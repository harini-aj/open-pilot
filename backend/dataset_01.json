[
  {
    "instruction": "**File Function:**\n\nThe CSS file defines the styles for the root HTML element of a web page. It is responsible for setting the layout, dimensions, and alignment of the entire page.\n\n**Root Element:**\n\nThe `root` element is the top-level element in an HTML document. It represents the entire web page and provides a reference point for all other elements within it.\n\n**Styles:**\n\nThe `root` element is styled with the following CSS properties:\n\n- **width:** 95vw (95% of the viewport width)\n- **height:** 95% (95% of the viewport height)\n- **display:** flex\n- **margin:** 0 auto\n- **padding:** 2rem\n- **text-align:** center\n- **align-items:** stretch\n\n**CSS Properties Explained:**\n\n- **width:** Sets the width of the root element to 95% of the viewport width.\n- **height:** Sets the height of the root element to 95% of the viewport height.\n- **display:** sets the display property of the root element to flex, which allows for flexible and responsive layout.\n- **margin:** sets the margin property to 0 auto, which centers the root element horizontally within its parent container.\n- **padding:** sets the padding property to 2rem, which adds a 2rem padding around the root element.\n- **text-align:** sets the text-align property to center, which centers the text content within the root element.\n- **align-items:** sets the align-items property to stretch, which makes all child elements within the root element stretch to fill the available height.\n\n**Purpose:**\n\nThe purpose of this CSS file is to create a central container for the entire web page, providing a consistent layout, dimensions, and alignment. It ensures that the page elements are centered, have adequate spacing, and are responsive to different screen sizes.\n\n**Additional Notes:**\n\n- The viewport refers to the visible area of the web page in a browser window.\n- The `vw` and `vh` units are used for viewport width and height, respectively.\n- Flexbox is a CSS layout model that allows for flexible and responsive layouts.\n- The `align-items: stretch` property ensures that all elements within the root element have the same height.",
    "input": "",
    "output": "#root {\n  width: 95vw;\n  height: 95%;\n  display: flex;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n  align-items: stretch;\n}\n"
  },
  {
    "instruction": "**App.js**\n\nThis file is the main entry point for a React web application. It renders the user interface and handles user interactions.\n\n**Components:**\n\n* **ChatWindow:** A component for displaying chat messages and user input.\n* **Settings:** A component for configuring model settings, including training mode and data value.\n* **SettingsIcon:** An icon for opening the settings component.\n* **Fab:** A floating action button for accessing the settings.\n\n**State Management:**\n\n* **open:** A state variable that indicates whether the settings component is open.\n* **loading:** A state variable that indicates whether the model is being trained.\n\n**Functionality:**\n\n* The `handleTrain()` function is called when the user submits the settings form.\n* It sends a POST request to the server endpoint `/train` with the training data.\n* It sets the `loading` state to `true` during training and displays a loading indicator.\n* Upon successful training, it displays an alert message.\n* In case of any errors, it logs the error to the console and displays an error message.\n\n**Rendering:**\n\n* The application renders a `ChatWindow` component for displaying chat messages.\n* A `Settings` component is displayed when the `open` state is `true`.\n* A `Fab` button with a `SettingsIcon` is used to open the settings component.\n\n**Additional Notes:**\n\n* The `axios` library is used for making HTTP requests to the server.\n* The server endpoint `http://127.0.0.1:8000/train` is assumed to be available for model training.\n* The `App.css` file likely contains styles for the application.",
    "input": "",
    "output": "import ChatWindow from './components/ChatWindow/ChatWindow'\nimport Settings from './components/Settings/Settings';\nimport SettingsIcon from \"@mui/icons-material/Settings\";\nimport Fab from \"@mui/material/Fab\";\nimport axios from 'axios';\n\nimport './App.css'\nimport { useState } from 'react';\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  const handleTrain = async (data: { mode: \"git\" | \"local\"; value: string }) => {\n    try {\n      setLoading(true);\n      setOpen(false);\n      const res = await axios.post(\"http://127.0.0.1:8000/train\", data);\n      alert(res.data.message);\n    } catch (err) {\n      console.error(err);\n      alert(\"Error starting training.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <>\n      <Fab\n        color=\"primary\"\n        aria-label=\"settings\"\n        size=\"small\"\n        sx={{\n            position: \"absolute\",\n            top: 8,\n            right: 8,\n        }}\n        onClick={() => setOpen(true)} \n        disabled={loading}\n        >\n        <SettingsIcon />\n      </Fab>\n      <ChatWindow/>\n      <Settings \n        open={open} \n        onSave={handleTrain} \n        onClose={() => { setOpen(false) }} />\n    </>\n  )\n}\n\nexport default App\n"
  },
  {
    "instruction": "**File Name:** styles.css\n\n**Purpose:**\n\nThe styles.css file defines the global CSS styles for a web application. It specifies the font family, line height, color scheme, typography, and other visual elements for the entire website.\n\n**CSS Code:**\n\n```css\n:root {\n  /* Global styles */\n  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n}\n\n/* Links */\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\n/* Body */\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\n/* Headings */\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\n/* Buttons */\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n/* Media query for light color scheme */\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n```\n\n**Key Features:**\n\n- **Global Styles:** Define font family, line height, color scheme, and typography for the entire website.\n- **Links:** Style links with specific colors and hover effects.\n- **Body:** Set up the basic layout and dimensions for the body element.\n- **Headings:** Define font size and line height for headings.\n- **Buttons:** Design buttons with rounded corners, background color, and hover effects.\n- **Media Query:** Adjust styles based on the user's preferred color scheme (light or dark).\n\n**Usage:**\n\nThis CSS file is typically included in the HTML document using a `<link>` tag in the `<head>` section. The styles will then be applied to all elements in the website according to the defined CSS rules.",
    "input": "",
    "output": ":root {\n  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n"
  },
  {
    "instruction": "**index.tsx File**\n\nThe `index.tsx` file is the entry point of a React application. It serves as the main JavaScript file that initializes and renders the application.\n\n**Code Breakdown:**\n\n**1. Imports:**\n\n* `StrictMode` is imported from the `react` package.\n* `createRoot` is imported from the `react-dom/client` package.\n* `index.css` is imported for styles.\n* `App.tsx` is imported as the main component of the application.\n\n**2. Rendering:**\n\n* `createRoot` is called with the DOM element with the ID `root`.\n* Inside `StrictMode`, the `App` component is rendered.\n\n**Purpose:**\n\n* The `index.tsx` file is responsible for initializing and rendering the React application.\n* It creates a root element in the HTML document with the ID `root`.\n* It imports the necessary components and styles.\n* It renders the `App` component within the `StrictMode` component, which enforces strict React rules.\n\n**Key Functions:**\n\n* **`StrictMode`:** Enforces strict React rules to help identify potential issues early on.\n* **`createRoot`:** Creates a root element in the DOM.\n* **`render`:** Renders the `App` component within the `StrictMode`.\n\n**Additional Notes:**\n\n* The `index.tsx` file is typically the first file that is executed when the application starts.\n* It serves as the central hub for initializing and rendering the entire application.\n* The `App.tsx` component is the main component of the application, which contains the application's logic and UI.\n* The `index.css` file contains the global styles for the application.\n\n**Conclusion:**\n\nThe `index.tsx` file is the entry point of a React application, responsible for initializing and rendering the application by importing necessary components, styles, and the main component.",
    "input": "",
    "output": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet is a TypeScript declaration file that references the `vite/client` types. This file is typically used in Vite projects to provide type definitions for the client-side API.\n\n**Description:**\n\n- `<reference types=\"vite/client\" />` is a TypeScript directive that specifies the reference to the `vite/client` types.\n\n- `vite/client` is a built-in module in Vite that provides type definitions for the client-side API. This includes types for the Vite API, browser globals, and other client-side specific functionality.\n\n**Usage:**\n\n- This declaration file is typically included in the root directory of a Vite project.\n- It ensures that the TypeScript compiler has access to the necessary type definitions for the Vite client-side API.\n- By including this file, developers can leverage TypeScript's type checking and code completion features for client-side code.\n\n**Benefits:**\n\n- Improved code quality and developer experience through type checking and autocompletion.\n- Enhanced documentation and understanding of the Vite client-side API.\n- Easier debugging and error handling by identifying potential issues early on.\n\n**Example:**\n\n```typescript\n// Example file using Vite client-side API\n\nimport { defineClient, useFetch } from '/@vite/client'\n\nconst client = defineClient({\n  setup() {\n    const data = useFetch('/api/users').then((res) => res.json())\n    return { data }\n  },\n})\n```\n\n**Conclusion:**\n\nThe `vite/client` declaration file is an essential component of Vite projects that provides type definitions for the client-side API. It ensures smooth TypeScript integration and enables developers to leverage the benefits of TypeScript's type checking and code completion features.",
    "input": "",
    "output": "/// <reference types=\"vite/client\" />\n"
  },
  {
    "instruction": "**ChatWindow.js**\n\nThis React functional component represents a chat window interface. It enables users to communicate with an AI chatbot through text input and receives responses in real-time.\n\n**Purpose:**\n\n* Provide a platform for users to interact with an AI chatbot.\n* Allow users to send text prompts and receive AI-generated responses.\n* Maintain a chat history of user interactions.\n\n**Key Features:**\n\n* **Chat History:** A list of previous messages between the user and the chatbot.\n* **Input Field:** A text field where users can enter their prompts.\n* **Send Button:** A button that triggers the sending of the prompt to the chatbot.\n* **Chatbot Response:** The chatbot's generated response is displayed in the chat history.\n\n**Functionality:**\n\n1. **State Management:** The component uses the `useState` hook to manage the chat history and user input.\n2. **Fetch Response:** The `fetchResponse` function is a callback function that sends the user's input prompt to the AI chatbot via an HTTP POST request.\n3. **Handle Send:** When the user clicks the send button, the `handleSend` function is triggered. It first checks if the input is valid and then calls the `fetchResponse` function to get the chatbot's response.\n4. **Update Chat History:** The new user input and chatbot response are appended to the chat history state.\n5. **Display Chat History:** The chat history is rendered in the chat window, with messages aligned based on the sender (user or chatbot).\n\n**Technical Details:**\n\n* **Material-UI Components:** The component uses Material-UI components for the chat window interface, including cards, text fields, buttons, and dividers.\n* **Axios:** Axios is used to make the HTTP request to the AI chatbot endpoint.\n* **Hooks:** The component uses the `useState` and `useCallback` hooks for state management and memoization, respectively.\n\n**Usage:**\n\nThis component can be used as a standalone chat interface or integrated into other applications. It provides a convenient and interactive way for users to interact with an AI chatbot.",
    "input": "",
    "output": "import { Container, \n  Typography, \n  Card, \n  CardContent, \n  Button, \n  Box, \n  Divider, \n  IconButton, \n  Paper, \n  TextField } from '@mui/material'\nimport { useCallback, useState } from 'react';\nimport SendIcon from '@mui/icons-material/Send';\nimport axios from 'axios';\n\nexport default function ChatWindow() {\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: 'Hi! How can I help you today?' },\n  ]);\n\n  const [input, setInput] = useState('');\n\n  const fetchResponse = useCallback((prompt: string) => {\n    return (async ():Promise<string> => {\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/generate', {\n          prompt: prompt,\n        });\n        const data = await response.data\n        return data.generated_code as string\n      } catch (error) {\n        console.error('Error:', error);\n        return error as string\n      }\n    })()\n  }, [])\n\n  const handleSend = useCallback(async () => {\n    debugger;\n    if (input.trim() === '') return;\n    let generateResponse = await fetchResponse(input.trim())\n    setMessages(prev =>  [...prev, { sender: 'user', text: input }, {sender: 'bot', text: generateResponse}]);\n    setInput('');\n  }, [input, messages, setMessages, setInput])\n\n  return (\n    <Container maxWidth=\"lg\" sx={{\n      height: '99vh',\n      display: 'flex',\n      flexDirection: 'column',\n      py: 2,\n    }}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\" gutterBottom>\n            OpenPilot\n          </Typography>\n          <Typography variant=\"body1\">\n            An open-source, local-first code assistant powered by LLMs.\n          </Typography>\n          <Divider sx={{ my: 1 }} />\n          <Box\n            sx={{\n              flexGrow: 1,\n              p: 2,\n              maxHeight: 'calc(100vh - 250px)',\n              overflowY: 'auto',\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 2,\n            }}\n          >\n            {messages.map((msg, idx) => (\n              <Box\n                key={`${msg.sender}-${idx}`}\n                alignSelf={msg.sender === 'user' ? 'flex-end' : 'flex-start'}\n                bgcolor={msg.sender === 'user' ? 'primary.main' : 'grey.200'}\n                color={msg.sender === 'user' ? 'white' : 'black'}\n                px={2}\n                py={1}\n                borderRadius={2}\n                maxWidth=\"80%\"\n              >\n                <Typography variant=\"caption\">\n                  {msg.text}\n                </Typography>\n              </Box>\n            ))}\n          </Box>\n\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Type your message...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleSend()}\n            />\n            <IconButton color=\"primary\" onClick={handleSend}>\n              <SendIcon color='info' />\n            </IconButton>\n          </Box>\n        </CardContent>\n      </Card>\n    </Container>\n  )\n}"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided React component is a dialog box that allows users to configure settings for a project. It provides options to choose between using a Git repository or a local path for project storage.\n\n**Components:**\n\n- **Dialog:** A modal window that pops up when the `open` prop is set to `true`.\n- **DialogTitle:** The title of the dialog box.\n- **DialogContent:** The content area where users can input settings.\n- **RadioGroup:** A group of radio buttons that allow users to select between \"git\" and \"local\" modes.\n- **TextField:** A text input field where users can enter the Git repository URL or local path.\n- **DialogActions:** The footer of the dialog box, containing buttons for \"Cancel\" and \"Add\".\n\n**State Management:**\n\n- **mode:** A state variable that stores the selected mode (\"git\" or \"local\").\n- **inputValue:** A state variable that stores the entered value for the Git repository URL or local path.\n\n**Functionalities:**\n\n- **Mode Selection:** Users can select between \"git\" and \"local\" modes using radio buttons.\n- **Input Field:** Based on the selected mode, a text input field is displayed for entering the corresponding information (Git repository URL or local path).\n- **Save Button:** Clicking the \"Add\" button triggers the `onSave` prop function with the selected mode and input value.\n- **Close Button:** Clicking the \"Cancel\" button closes the dialog box.\n\n**Usage:**\n\nThis component can be used in a React application to allow users to configure project settings. It receives props for `open`, `onClose`, and `onSave`.\n\n**Props:**\n\n- `open`: A boolean value indicating whether the dialog box should be open.\n- `onClose`: A function to be called when the dialog box is closed.\n- `onSave`: A function to be called when the user saves the settings with the selected mode and input value.\n\n**Example:**\n\n```\n<Settings open={isOpen} onClose={() => setIsOpen(false)} onSave={(data) => handleSaveSettings(data)} />\n```",
    "input": "",
    "output": "import { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n} from \"@mui/material\";\n\ninterface SettingsProps {\n  open: boolean;\n  onClose: () => void;\n  onSave: (data: { mode: \"git\" | \"local\"; value: string }) => void;\n}\n\nexport default function Settings({ open, onClose, onSave }: SettingsProps) {\n  const [mode, setMode] = useState<\"git\" | \"local\">(\"git\");\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleSave = () => {\n    onSave({ mode, value: inputValue });\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>Settings</DialogTitle>\n      <DialogContent>\n        <RadioGroup\n          row\n          value={mode}\n          onChange={(e) => {\n            setMode(e.target.value as \"git\" | \"local\");\n            setInputValue(\"\"); // reset field when switching\n          }}\n        >\n          <FormControlLabel value=\"git\" control={<Radio />} label=\"Git Repository\" />\n          <FormControlLabel value=\"local\" control={<Radio />} label=\"Local Path\" />\n        </RadioGroup>\n\n        {mode === \"git\" ? (\n          <TextField\n            label=\"Git Repository URL\"\n            placeholder=\"https://github.com/user/repo.git\"\n            fullWidth\n            margin=\"normal\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n        ) : (\n          <TextField\n            label=\"Local Path\"\n            placeholder=\"C:/Users/YourName/Projects\"\n            fullWidth\n            margin=\"normal\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button variant=\"contained\" onClick={handleSave}>\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n"
  }
]
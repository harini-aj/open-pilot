[
  {
    "instruction": "**Description of the File:**\n\nThe file you have provided is a module that exports various React components for use in an application. These components cover various functionalities and design elements, including:\n\n**App Cards:**\n- ActionsGrid\n- CardWithStats\n- BadgeCard\n- FeaturesCard\n- StatsRingCard\n- SwitchesCard\n- TaskCard\n\n**Authentication:**\n- AuthenticationForm\n- AuthenticationImage\n- AuthenticationTitle\n- ForgotPassword\n\n**Banners:**\n- EmailBanner\n- ImageActionBanner\n- CookiesBanner\n\n**Article Cards:**\n- ArticleCard\n- ArticleCardFooter\n- ArticleCardVertical\n- ArticleCardImage\n- ImageCard\n- CardGradient\n- ArticlesCardsGrid\n\n**Contact Us:**\n- ContactUs\n- GetInTouch\n- GetInTouchSimple\n\n**Inputs:**\n- AutocompleteLoading\n- CheckboxCard\n- ContainedInputs\n- CurrencyInput\n- FloatingLabelInput\n- ForgotPasswordInput\n- ImageCheckboxes\n- InputTooltip\n- InputValidation\n- InputWithButton\n- LanguagePicker\n- PasswordStrength\n- GradientSegmentedControl\n- CustomSwitch\n\n**Hero:**\n- HeroBullets\n- HeroContentLeft\n- HeroImageBackground\n- HeroImageRight\n- HeroText\n- HeroTitle\n\n**Features:**\n- FeaturesAsymmetrical\n- FeaturesGrid\n- FeaturesImages\n- FeaturesTitle\n- FeaturesCards\n\n**FAQ:**\n- FaqSimple\n- FaqWithBg\n- FaqWithHeader\n- FaqWithImage\n\n**Users:**\n- UserButton\n- UserInfoAction\n- UserInfoIcons\n- UserMenu\n- UsersRolesTable\n- UsersStack\n- UsersTable\n- UserCardImage\n\n**Sliders:**\n- SliderIcon\n- SliderInput\n- SliderLabel\n- SliderHover\n- SliderMarks\n- SliderWhite\n\n**Footers:**\n- FooterCentered\n- FooterSimple\n- FooterSocial\n- FooterLinks\n\n**Tables of Contents:**\n- TableOfContents\n- TableOfContentsFloating\n\n**Stats:**\n- StatsCard\n- StatsControls\n- StatsGrid\n- StatsGridIcons\n- StatsGroup\n- StatsRing\n- StatsSegments\n- ProgressCard\n- ProgressCardColored\n\n**Grids:**\n- GridAsymmetrical\n- Subgrid\n- LeadGrid\n\n**Tables:**\n- TableReviews\n- TableScrollArea\n- TableSelection\n- TableSort\n\n**Comments:**\n- CommentSimple\n- CommentHtml\n\n**Buttons:**\n- ButtonCopy\n- ButtonMenu\n- ButtonProgress\n- SplitButton\n- SocialButtons\n- ActionToggle\n\n**Carousels:**\n- CarouselCard\n- CardsCarousel\n\n**Dropzones:**\n- DropzoneButton\n\n**DND:**\n- DndList\n- DndListHandle\n- DndTable\n\n**Error Pages:**\n- NotFoundTitle\n- NotFoundImage\n- NothingFoundBackground\n- ServerError\n- ServerOverload\n\n**Navbars:**\n- NavbarMinimal\n- NavbarMinimalColored\n- NavbarSimple\n- NavbarSimpleColored\n- NavbarLinksGroup\n- NavbarSegmented\n- NavbarSearch\n- NavbarNested\n- DoubleNavbar\n\n**Headers:**\n- HeaderMegaMenu\n- HeaderMenu\n- HeaderSearch\n- HeaderSimple\n- HeaderTabs\n- DoubleHeader\n\n**Purpose:**\n\nThe purpose of this module is to provide a collection of reusable React components that can be easily integrated into an application. These components can save developers time and effort by avoiding the need to create new components from scratch.\n\n**Usage:**\n\nTo use the components in your application, simply import them into your React components and render them as needed.",
    "input": "",
    "output": "// App cards\nexport { ActionsGrid } from './ActionsGrid/ActionsGrid';\nexport { CardWithStats } from './CardWithStats/CardWithStats';\nexport { BadgeCard } from './BadgeCard/BadgeCard';\nexport { FeaturesCard } from './FeaturesCard/FeaturesCard';\nexport { StatsRingCard } from './StatsRingCard/StatsRingCard';\nexport { SwitchesCard } from './SwitchesCard/SwitchesCard';\nexport { TaskCard } from './TaskCard/TaskCard';\n\n// Authentication\nexport { AuthenticationForm } from './AuthenticationForm/AuthenticationForm';\nexport { AuthenticationImage } from './AuthenticationImage/AuthenticationImage';\nexport { AuthenticationTitle } from './AuthenticationTitle/AuthenticationTitle';\nexport { ForgotPassword } from './ForgotPassword/ForgotPassword';\n\n// Banners\nexport { EmailBanner } from './EmailBanner/EmailBanner';\nexport { ImageActionBanner } from './ImageActionBanner/ImageActionBanner';\nexport { CookiesBanner } from './CookiesBanner/CookiesBanner';\n\n// Article cards\nexport { ArticleCard } from './ArticleCard/ArticleCard';\nexport { ArticleCardFooter } from './ArticleCardFooter/ArticleCardFooter';\nexport { ArticleCardVertical } from './ArticleCardVertical/ArticleCardVertical';\nexport { ArticleCardImage } from './ArticleCardImage/ArticleCardImage';\nexport { ImageCard } from './ImageCard/ImageCard';\nexport { CardGradient } from './CardGradient/CardGradient';\nexport { ArticlesCardsGrid } from './ArticlesCardsGrid/ArticlesCardsGrid';\n\n// Contact us\nexport { ContactUs } from './ContactUs/ContactUs';\nexport { GetInTouch } from './GetInTouch/GetInTouch';\nexport { GetInTouchSimple } from './GetInTouchSimple/GetInTouchSimple';\n\n// Inputs\nexport { AutocompleteLoading } from './AutocompleteLoading/AutocompleteLoading';\nexport { CheckboxCard } from './CheckboxCard/CheckboxCard';\nexport { ContainedInputs } from './ContainedInputs/ContainedInputs';\nexport { CurrencyInput } from './CurrencyInput/CurrencyInput';\nexport { FloatingLabelInput } from './FloatingLabelInput/FloatingLabelInput';\nexport { ForgotPasswordInput } from './ForgotPasswordInput/ForgotPasswordInput';\nexport { ImageCheckboxes } from './ImageCheckboxes/ImageCheckboxes';\nexport { InputTooltip } from './InputTooltip/InputTooltip';\nexport { InputValidation } from './InputValidation/InputValidation';\nexport { InputWithButton } from './InputWithButton/InputWithButton';\nexport { LanguagePicker } from './LanguagePicker/LanguagePicker';\nexport { PasswordStrength } from './PasswordStrength/PasswordStrength';\nexport { GradientSegmentedControl } from './GradientSegmentedControl/GradientSegmentedControl';\nexport { CustomSwitch } from './CustomSwitch/CustomSwitch';\n\n// Hero\nexport { HeroBullets } from './HeroBullets/HeroBullets';\nexport { HeroContentLeft } from './HeroContentLeft/HeroContentLeft';\nexport { HeroImageBackground } from './HeroImageBackground/HeroImageBackground';\nexport { HeroImageRight } from './HeroImageRight/HeroImageRight';\nexport { HeroText } from './HeroText/HeroText';\nexport { HeroTitle } from './HeroTitle/HeroTitle';\n\n// Features\nexport { FeaturesAsymmetrical } from './FeaturesAsymmetrical/FeaturesAsymmetrical';\nexport { FeaturesGrid } from './FeaturesGrid/FeaturesGrid';\nexport { FeaturesImages } from './FeaturesImages/FeaturesImages';\nexport { FeaturesTitle } from './FeaturesTitle/FeaturesTitle';\nexport { FeaturesCards } from './FeaturesCards/FeaturesCards';\n\n// Faq\nexport { FaqSimple } from './FaqSimple/FaqSimple';\nexport { FaqWithBg } from './FaqWithBg/FaqWithBg';\nexport { FaqWithHeader } from './FaqWithHeader/FaqWithHeader';\nexport { FaqWithImage } from './FaqWithImage/FaqWithImage';\n\n// Users\nexport { UserButton } from './UserButton/UserButton';\nexport { UserInfoAction } from './UserInfoAction/UserInfoAction';\nexport { UserInfoIcons } from './UserInfoIcons/UserInfoIcons';\nexport { UserMenu } from './UserMenu/UserMenu';\nexport { UsersRolesTable } from './UsersRolesTable/UsersRolesTable';\nexport { UsersStack } from './UsersStack/UsersStack';\nexport { UsersTable } from './UsersTable/UsersTable';\nexport { UserCardImage } from './UserCardImage/UserCardImage';\n\n// Sliders\nexport { SliderIcon } from './SliderIcon/SliderIcon';\nexport { SliderInput } from './SliderInput/SliderInput';\nexport { SliderLabel } from './SliderLabel/SliderLabel';\nexport { SliderHover } from './SliderHover/SliderHover';\nexport { SliderMarks } from './SliderMarks/SliderMarks';\nexport { SliderWhite } from './SliderWhite/SliderWhite';\n\n// Footers\nexport { FooterCentered } from './FooterCentered/FooterCentered';\nexport { FooterSimple } from './FooterSimple/FooterSimple';\nexport { FooterSocial } from './FooterSocial/FooterSocial';\nexport { FooterLinks } from './FooterLinks/FooterLinks';\n\n// Tables of contents\nexport { TableOfContents } from './TableOfContents/TableOfContents';\nexport { TableOfContentsFloating } from './TableOfContentsFloating/TableOfContentsFloating';\n\n// Stats\nexport { StatsCard } from './StatsCard/StatsCard';\nexport { StatsControls } from './StatsControls/StatsControls';\nexport { StatsGrid } from './StatsGrid/StatsGrid';\nexport { StatsGridIcons } from './StatsGridIcons/StatsGridIcons';\nexport { StatsGroup } from './StatsGroup/StatsGroup';\nexport { StatsRing } from './StatsRing/StatsRing';\nexport { StatsSegments } from './StatsSegments/StatsSegments';\nexport { ProgressCard } from './ProgressCard/ProgressCard';\nexport { ProgressCardColored } from './ProgressCardColored/ProgressCardColored';\n\n// Grids\nexport { GridAsymmetrical } from './GridAsymmetrical/GridAsymmetrical';\nexport { Subgrid } from './Subgrid/Subgrid';\nexport { LeadGrid } from './LeadGrid/LeadGrid';\n\n// Tables\nexport { TableReviews } from './TableReviews/TableReviews';\nexport { TableScrollArea } from './TableScrollArea/TableScrollArea';\nexport { TableSelection } from './TableSelection/TableSelection';\nexport { TableSort } from './TableSort/TableSort';\n\n// Comments\nexport { CommentSimple } from './CommentSimple/CommentSimple';\nexport { CommentHtml } from './CommentHtml/CommentHtml';\n\n// Buttons\nexport { ButtonCopy } from './ButtonCopy/ButtonCopy';\nexport { ButtonMenu } from './ButtonMenu/ButtonMenu';\nexport { ButtonProgress } from './ButtonProgress/ButtonProgress';\nexport { SplitButton } from './SplitButton/SplitButton';\nexport { SocialButtons } from './SocialButtons/SocialButtons';\nexport { ActionToggle } from './ActionToggle/ActionToggle';\n\n// Carousels\nexport { CarouselCard } from './CarouselCard/CarouselCard';\nexport { CardsCarousel } from './CardsCarousel/CardsCarousel';\n\n// Dropzones\nexport { DropzoneButton } from './DropzoneButton/DropzoneButton';\n\n// DND\nexport { DndList } from './DndList/DndList';\nexport { DndListHandle } from './DndListHandle/DndListHandle';\nexport { DndTable } from './DndTable/DndTable';\n\n// Error pages\nexport { NotFoundTitle } from './NotFoundTitle/NotFoundTitle';\nexport { NotFoundImage } from './NotFoundImage/NotFoundImage';\nexport { NothingFoundBackground } from './NothingFoundBackground/NothingFoundBackground';\nexport { ServerError } from './ServerError/ServerError';\nexport { ServerOverload } from './ServerOverload/ServerOverload';\n\n// Navbars\nexport { NavbarMinimal } from './NavbarMinimal/NavbarMinimal';\nexport { NavbarMinimalColored } from './NavbarMinimalColored/NavbarMinimalColored';\nexport { NavbarSimple } from './NavbarSimple/NavbarSimple';\nexport { NavbarSimpleColored } from './NavbarSimpleColored/NavbarSimpleColored';\nexport { NavbarLinksGroup } from './NavbarLinksGroup/NavbarLinksGroup';\nexport { NavbarSegmented } from './NavbarSegmented/NavbarSegmented';\nexport { NavbarSearch } from './NavbarSearch/NavbarSearch';\nexport { NavbarNested } from './NavbarNested/NavbarNested';\nexport { DoubleNavbar } from './DoubleNavbar/DoubleNavbar';\n\n// Headers\nexport { HeaderMegaMenu } from './HeaderMegaMenu/HeaderMegaMenu';\nexport { HeaderMenu } from './HeaderMenu/HeaderMenu';\nexport { HeaderSearch } from './HeaderSearch/HeaderSearch';\nexport { HeaderSimple } from './HeaderSimple/HeaderSimple';\nexport { HeaderTabs } from './HeaderTabs/HeaderTabs';\nexport { DoubleHeader } from './DoubleHeader/DoubleHeader';\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided CSS file defines styles for a web page. It contains three CSS classes:\n\n**1. .card**\n\n- Sets the background color of an element to a light or dark gray color, depending on the user's preferred theme.\n\n**2. .title**\n\n- Specifies the font family, font weight, and font size for an element with the class \"title\".\n\n**3. .item**\n\n- Defines the styles for an element with the class \"item\":\n   - **Display:** Flexbox with a column direction.\n   - **Alignment:** Centered both horizontally and vertically.\n   - **Text Alignment:** Centered.\n   - **Border Radius:** Medium radius.\n   - **Height:** 90 pixels.\n   - **Background Color:** Matches the background color of the body.\n   - **Transitions:** Smooth changes in box shadow and transform properties on hover.\n\n**Hover Effect:**\n\nThe `.hover` mixin defines the styles that are applied to the \".item\" element when the user hovers over it:\n   - **Box Shadow:** A medium shadow effect.\n   - **Transform:** Scales the element slightly (by 5%).\n\n**Purpose:**\n\nThe CSS file likely defines styles for a user interface element, such as a card, that displays information or provides interactive elements. The styles include background colors, font settings, layout properties, and hover effects.\n\n**Additional Notes:**\n\n- The CSS variables used in the styles are defined in the Mantine CSS framework.\n- The `light-dark()` function allows the background color to be adjusted based on the user's preferred light or dark theme.\n- The `@mixin` declaration is a Sass mixin that defines the hover styles.\n- The `--mantine-color-body` variable represents the background color of the body element.\n- The `--mantine-shadow-md` variable represents a medium shadow.\n- The `--mantine-radius-md` variable represents a medium border radius.",
    "input": "",
    "output": ".card {\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n}\n\n.item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border-radius: var(--mantine-radius-md);\n  height: 90px;\n  background-color: var(--mantine-color-body);\n  transition:\n    box-shadow 150ms ease,\n    transform 100ms ease;\n\n  @mixin hover {\n    box-shadow: var(--mantine-shadow-md);\n    transform: scale(1.05);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ActionsGrid.jsx\n\n**Purpose:**\n\nThe `ActionsGrid.jsx` file is a React component that displays a grid of available actions. It is part of a user interface for an application or game.\n\n**Key Functions:**\n\n* **Imports:**\n    * `StoryWrapper`: A reusable component that provides a consistent rendering environment for displaying stories.\n    * `ActionsGrid`: The main component being exported.\n    * `attributes.json`: A JSON file containing the attributes of the actions.\n\n* **Component Export:**\n    * `export default { title: 'ActionsGrid' }`: Specifies the title of the component.\n\n* **Usage Function:**\n    * `export function Usage()`: Defines a function called `Usage` that renders the `ActionsGrid` component.\n    * `<StoryWrapper attributes={attributes} component={ActionsGrid} />`: Renders the `ActionsGrid` component with the `attributes` prop passed to it.\n\n**Description of Usage Function:**\n\n* The `Usage` function is responsible for rendering the `ActionsGrid` component.\n* It provides the `attributes` prop to the `StoryWrapper` component.\n* The `attributes` prop is used to configure the actions displayed in the grid.\n* The `StoryWrapper` component handles the rendering of the `ActionsGrid` component and provides a consistent environment for displaying stories.\n\n**Purpose of Attributes.json:**\n\n* The `attributes.json` file contains the attributes of the actions that can be displayed in the grid.\n* Each attribute object defines the name, description, and other properties of an action.\n* The `StoryWrapper` component uses the `attributes` prop to retrieve the action attributes from the JSON file.\n\n**Overall Functionality:**\n\nThe `ActionsGrid.jsx` file implements a React component that displays a grid of actions based on the attributes specified in the `attributes.json` file. The component is wrapped in the `StoryWrapper` component for consistent rendering.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ActionsGrid } from './ActionsGrid';\nimport attributes from './attributes.json';\n\nexport default { title: 'ActionsGrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ActionsGrid} />;\n}\n"
  },
  {
    "instruction": "**ActionsGrid.js** is a React component that displays a grid of actions with icons and titles.\n\n**Purpose:**\n\nThe component provides a visual representation of different actions that can be performed within a system. Each action is represented by an icon and a title.\n\n**Key Features:**\n\n- Uses the `@tabler/icons-react` and `@mantine/core` libraries for icon rendering and component styling.\n- Displays a grid of buttons, each representing an action.\n- Retrieves action data from a `mockdata` array.\n- Customizes the icons, titles, and colors of the actions.\n- Provides a title and a link to additional services.\n\n**Component Structure:**\n\n- Imports necessary components and icons from external libraries.\n- Defines a `mockdata` array containing information about each action, including title, icon, and color.\n- Maps the `mockdata` array to an array of `UnstyledButton` components, each representing an action.\n- Renders a `Card` component that contains the grid of actions and a title.\n\n**Rendering:**\n\nThe component renders a grid of buttons, each displaying an icon and title. The icons are rendered with the specified colors from the `mockdata`. The buttons are styled using the `classes.item` class.\n\n**Usage:**\n\nThe `ActionsGrid` component can be used to provide a visual overview of available actions within a system. It can be integrated into other components or pages to enhance user navigation and interaction.\n\n**Example:**\n\n```\n<ActionsGrid />\n```\n\n**Output:**\n\nA grid of buttons with icons and titles, representing various actions.\n\n**Additional Notes:**\n\n- The `classes.card` class styles the `Card` component.\n- The `classes.title` class styles the title of the grid.\n- The `useMantineTheme()` hook is used to access the theme colors.\n- The `UnstyledButton` component provides a button without any additional styling.",
    "input": "",
    "output": "import {\n  IconBuildingBank,\n  IconCashBanknote,\n  IconCoin,\n  IconCreditCard,\n  IconReceipt,\n  IconReceiptRefund,\n  IconReceiptTax,\n  IconRepeat,\n  IconReport,\n} from '@tabler/icons-react';\nimport {\n  Anchor,\n  Card,\n  Group,\n  SimpleGrid,\n  Text,\n  UnstyledButton,\n  useMantineTheme,\n} from '@mantine/core';\nimport classes from './ActionsGrid.module.css';\n\nconst mockdata = [\n  { title: 'Credit cards', icon: IconCreditCard, color: 'violet' },\n  { title: 'Banks nearby', icon: IconBuildingBank, color: 'indigo' },\n  { title: 'Transfers', icon: IconRepeat, color: 'blue' },\n  { title: 'Refunds', icon: IconReceiptRefund, color: 'green' },\n  { title: 'Receipts', icon: IconReceipt, color: 'teal' },\n  { title: 'Taxes', icon: IconReceiptTax, color: 'cyan' },\n  { title: 'Reports', icon: IconReport, color: 'pink' },\n  { title: 'Payments', icon: IconCoin, color: 'red' },\n  { title: 'Cashback', icon: IconCashBanknote, color: 'orange' },\n];\n\nexport function ActionsGrid() {\n  const theme = useMantineTheme();\n\n  const items = mockdata.map((item) => (\n    <UnstyledButton key={item.title} className={classes.item}>\n      <item.icon color={theme.colors[item.color][6]} size={32} />\n      <Text size=\"xs\" mt={7}>\n        {item.title}\n      </Text>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" className={classes.card}>\n      <Group justify=\"space-between\">\n        <Text className={classes.title}>Services</Text>\n        <Anchor size=\"xs\" c=\"dimmed\" style={{ lineHeight: 1 }}>\n          + 21 other services\n        </Anchor>\n      </Group>\n      <SimpleGrid cols={3} mt=\"md\">\n        {items}\n      </SimpleGrid>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a card with an actions grid. It is part of an application's card template library.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with actions grid\",\n  \"category\": \"app-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the card, which is displayed in the user interface.\n* **category:** The category of the card, which is used for organization and filtering. In this case, it is set to \"app-cards\".\n* **canvas:** An object that defines the layout of the card.\n\n**canvas Object:**\n\n* **center:** A boolean value that specifies whether the card should be centered horizontally. In this case, it is set to `true`.\n* **maxWidth:** An integer value that specifies the maximum width of the card in pixels. In this case, it is set to `420`.\n\n**Purpose:**\n\nThe purpose of this card template is to provide a layout for cards that include an actions grid. An actions grid is a grid of buttons or other interactive elements that allow users to perform specific actions.\n\n**Usage:**\n\nThis card template can be used by developers to create new cards with an actions grid. The `canvas` object provides the necessary configuration for the layout of the actions grid.\n\n**Example:**\n\nSuppose you want to create a card with an actions grid that includes three buttons: \"Submit\", \"Edit\", and \"Cancel\". You can use the following JSON code:\n\n```json\n{\n  \"title\": \"Action Grid Card\",\n  \"category\": \"app-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420,\n    \"actionsGrid\": {\n      \"buttons\": [\n        { \"label\": \"Submit\" },\n        { \"label\": \"Edit\" },\n        { \"label\": \"Cancel\" }\n      ]\n    }\n  }\n}\n```\n\n**Conclusion:**\n\nThe JSON file you provided defines a card with an actions grid, which can be used to provide a layout for cards that include interactive elements for user actions.",
    "input": "",
    "output": "{\n  \"title\": \"Card with actions grid\",\n  \"category\": \"app-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file is a CSS (Cascading Style Sheet) file that defines styles for a web page. It is responsible for controlling the display of icons and light/dark mode on the page.\n\n**Purpose:**\n\n* To set the dimensions of an icon to be 22 pixels wide and 22 pixels high.\n* To define two classes, `dark` and `light`, each with two mixins.\n* To control the display of icons and light/dark mode based on the user's preference.\n\n**CSS Code Explanation:**\n\n**1. Icon Dimensions:**\n\n```css\n.icon {\n  width: 22px;\n  height: 22px;\n}\n```\n\nThis rule sets the `width` and `height` properties of any element with the class `icon` to 22 pixels.\n\n**2. Dark Mode Mixin:**\n\n```css\n.dark {\n  @mixin dark {\n    display: none;\n  }\n}\n```\n\nThis mixin defines a rule that sets the `display` property to `none` for elements with the class `dark`. In other words, elements with the `dark` class will be hidden when the dark mode is enabled.\n\n**3. Light Mode Mixin:**\n\n```css\n.light {\n  @mixin light {\n    display: none;\n  }\n}\n```\n\nThis mixin defines a rule that sets the `display` property to `none` for elements with the class `light`. In other words, elements with the `light` class will be hidden when the light mode is enabled.\n\n**4. Dark Mode Application:**\n\n```css\n.dark {\n  @mixin dark {\n    display: block;\n  }\n}\n```\n\nThis rule applies the `dark` mixin to elements with the class `dark`. When dark mode is enabled, these elements will be displayed.\n\n**5. Light Mode Application:**\n\n```css\n.light {\n  @mixin light {\n    display: block;\n  }\n}\n```\n\nThis rule applies the `light` mixin to elements with the class `light`. When light mode is enabled, these elements will be displayed.\n\n**Conclusion:**\n\nThe CSS file provides a mechanism to control the display of icons and light/dark mode based on user preferences. It achieves this by defining mixins that set the `display` property based on the mode. The `dark` mixin hides elements in dark mode, while the `light` mixin hides elements in light mode.",
    "input": "",
    "output": ".icon {\n  width: 22px;\n  height: 22px;\n}\n\n.dark {\n  @mixin dark {\n    display: none;\n  }\n\n  @mixin light {\n    display: block;\n  }\n}\n\n.light {\n  @mixin light {\n    display: none;\n  }\n\n  @mixin dark {\n    display: block;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ActionToggle.jsx\n\n**Description:**\n\nThe ActionToggle.jsx file is a React component that implements an action toggle functionality. It is part of a story-driven application.\n\n**Components:**\n\n- **StoryWrapper:** A higher-order component that provides a context for the story. It receives attributes and a component as props.\n- **ActionToggle:** The main component that handles the action toggle logic.\n\n**Imports:**\n\n- **StoryWrapper:** Imports the StoryWrapper component from the '../../components/StoryWrapper/StoryWrapper' module.\n- **ActionToggle:** Imports the ActionToggle component from the current module.\n- **attributes.json:** Imports an external JSON file named attributes.json.\n\n**Export:**\n\n- **Title:** Exports a title object with the value 'ActionToggle'.\n- **Usage Function:** Exports a Usage function that renders the ActionToggle component within a StoryWrapper with the attributes specified in attributes.json.\n\n**Code Breakdown:**\n\n- The Usage function creates an instance of the StoryWrapper component with the following props:\n    - `attributes`: The attributes specified in attributes.json.\n    - `component`: The ActionToggle component.\n\n- The ActionToggle component is responsible for handling the action toggle logic. It receives the attributes from the StoryWrapper as props.\n\n**Purpose:**\n\nThe ActionToggle component enables users to perform actions within the story. It receives attributes that define the available actions and handles the user's selection of an action.\n\n**Additional Notes:**\n\n- The attributes.json file likely contains a list of available actions, their labels, and any other relevant configuration.\n- The ActionToggle component may use state management to track the selected action.\n- The StoryWrapper provides a context for the story and handles rendering the components within the story flow.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ActionToggle } from './ActionToggle';\nimport attributes from './attributes.json';\n\nexport default { title: 'ActionToggle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ActionToggle} />;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided file is a React functional component called `ActionToggle`. It is responsible for toggling the color scheme (light or dark) of a user interface.\n\n**Components and Functionality:**\n\n- **@tabler/icons-react:** This library provides icon components, including `IconMoon` and `IconSun`.\n- **@mantine/core:** This library provides Mantine components, including `ActionIcon`, `Group`, `useComputedColorScheme`, and `useMantineColorScheme`.\n- **clsx:** A utility function for conditionally applying CSS classes.\n- **ActionToggle.module.css:** A CSS module containing styles for the component.\n\n**Component Flow:**\n\n1. **State Management:**\n    - The component uses `useMantineColorScheme` to manage the current color scheme (light or dark).\n    - `useComputedColorScheme` calculates the initial color scheme based on user preferences or default settings.\n\n2. **Toggle Functionality:**\n    - An `ActionIcon` component is rendered with an `onClick` event handler.\n    - Clicking the icon triggers a function that checks the current color scheme.\n    - If the current scheme is 'light', it sets the scheme to 'dark'; otherwise, it sets it to 'light'.\n\n3. **Icon Display:**\n    - Based on the current color scheme, the appropriate icon is displayed using conditional rendering.\n    - The `IconMoon` icon is shown for the dark theme, while the `IconSun` icon is shown for the light theme.\n\n4. **Rendering:**\n    - The component renders an `ActionIcon` with the appropriate icon based on the current color scheme.\n    - The icon is wrapped in a `Group` component for centering purposes.\n\n**Usage:**\n\nThe `ActionToggle` component can be imported and used in other React components to provide a toggle functionality for the color scheme.\n\n**Example:**\n\n```\n<ActionToggle />\n```\n\n**Purpose:**\n\nThe `ActionToggle` component allows users to switch between light and dark themes, providing a more customizable user experience.",
    "input": "",
    "output": "import { IconMoon, IconSun } from '@tabler/icons-react';\nimport cx from 'clsx';\nimport { ActionIcon, Group, useComputedColorScheme, useMantineColorScheme } from '@mantine/core';\nimport classes from './ActionToggle.module.css';\n\nexport function ActionToggle() {\n  const { setColorScheme } = useMantineColorScheme();\n  const computedColorScheme = useComputedColorScheme('light', { getInitialValueInEffect: true });\n\n  return (\n    <Group justify=\"center\">\n      <ActionIcon\n        onClick={() => setColorScheme(computedColorScheme === 'light' ? 'dark' : 'light')}\n        variant=\"default\"\n        size=\"xl\"\n        radius=\"md\"\n        aria-label=\"Toggle color scheme\"\n      >\n        <IconSun className={cx(classes.icon, classes.light)} stroke={1.5} />\n        <IconMoon className={cx(classes.icon, classes.dark)} stroke={1.5} />\n      </ActionIcon>\n    </Group>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe JSON file you provided defines a user interface element called a \"color scheme toggle button\". Its purpose is to allow users to switch between different color schemes or themes within an application or website.\n\n**Properties:**\n\n**title:**\n- Specifies the text label displayed on the button. In this case, \"Color scheme toggle\".\n\n**category:**\n- Indicates the category of the element, which is \"buttons\".\n\n**canvas:**\n- An object containing configuration options for the button's placement and layout.\n\n**center:**\n- A boolean value set to \"true\". This property specifies that the button should be centered horizontally within its designated area.\n\n**Example Usage:**\n\nThe JSON code snippet you provided can be used in a user interface framework or codebase to create a toggle button with the following characteristics:\n\n- Text label: \"Color scheme toggle\"\n- Category: Buttons\n- Centered horizontally\n\n**Additional Notes:**\n\n- The file extension \".json\" suggests that it is a JSON file.\n- JSON is a data interchange format that allows for the representation of complex data structures and configurations.\n- User interface frameworks often use JSON files to define the layout and behavior of their elements.\n- The specific implementation and functionality of the button may vary depending on the user interface framework or codebase where it is used.",
    "input": "",
    "output": "{\n  \"title\": \"Color scheme toggle\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines a set of styles for a card component. It styles the card's layout, typography, and interactive elements.\n\n**CSS Classes:**\n\n* **.card:**\n    * Sets the position to relative.\n    * Sets the background color to the value of the `--mantine-color-body` variable.\n\n* **.rating:**\n    * Positions the element absolutely with a top offset of `var(--mantine-spacing-xs)` and a right offset of 12px.\n    * Sets `pointer-events: none` to prevent interaction with the element.\n\n* **.title:**\n    * Displays the element as a block element.\n    * Sets the font family to `Outfit`, falling back to `var(--mantine-font-family)`.\n    * Adds a margin-top of `var(--mantine-spacing-md)` and a margin-bottom of 5px.\n\n* **.action:**\n    * Sets the background color to a light or dark version of `var(--mantine-color-gray-0)` or `var(--mantine-color-dark-5)`, depending on the theme.\n    * Defines a CSS mixin called `hover` that changes the background color on hover.\n\n* **.footer:**\n    * Adds a margin-top of `var(--mantine-spacing-md)` to the footer element.\n\n**Purpose:**\n\nThe CSS file styles the card component, including its layout, typography, and interactive elements. The styles are designed to create a visually appealing and user-friendly interface.\n\n**Usage:**\n\nThis CSS file can be included in a HTML document or used as a standalone stylesheet. The styles will apply to any element with the corresponding CSS class names.\n\n**Additional Notes:**\n\n* The `--mantine-color-body`, `--mantine-spacing-xs`, `--mantine-spacing-md`, and `--mantine-font-family` variables are assumed to be defined elsewhere in the CSS or JavaScript code.\n* The `light-dark()` function is used to set the background color based on the theme mode.\n* The `.hover` mixin defines the hover effect for the `.action` element.",
    "input": "",
    "output": ".card {\n  position: relative;\n  background-color: var(--mantine-color-body);\n}\n\n.rating {\n  position: absolute;\n  top: var(--mantine-spacing-xs);\n  right: 12px;\n  pointer-events: none;\n}\n\n.title {\n  display: block;\n  font-family: Outfit, var(--mantine-font-family);\n  margin-top: var(--mantine-spacing-md);\n  margin-bottom: 5px;\n}\n\n.action {\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-6));\n  }\n}\n\n.footer {\n  margin-top: var(--mantine-spacing-md);\n}\n"
  },
  {
    "instruction": "**File Name:** ArticleCard.jsx\n\n**Purpose:**\n\nThe `ArticleCard.jsx` file is a React component that represents a single article card. It is part of a larger application and is responsible for rendering a single article with its title, content, and attributes.\n\n**Functionality:**\n\n- **Imports:**\n   - `StoryWrapper` component from the `StoryWrapper` module.\n   - `ArticleCard` component from the current file.\n   - `attributes.json` file containing article attributes.\n\n- **Default Export:**\n   - An object with a `title` property set to `'ArticleCard'`. This provides information about the component for documentation purposes.\n\n- **Usage Function:**\n   - Returns a React component that uses the `StoryWrapper` component.\n   - Passes the `attributes` and `component` props to the `StoryWrapper`.\n   - The `StoryWrapper` renders the `ArticleCard` component with the specified attributes.\n\n**Usage:**\n\nThe `Usage()` function can be used to render an `ArticleCard` component with the attributes specified in the `attributes.json` file.\n\n**attributes.json:**\n\nThe `attributes.json` file contains an object with the following structure:\n\n```json\n{\n  \"title\": \"Article Title\",\n  \"content\": \"Article content goes here.\",\n  // Additional attributes for the article card\n}\n```\n\n**Additional Notes:**\n\n- The `StoryWrapper` component is likely used for testing or documentation purposes.\n- The `ArticleCard` component receives the `attributes` prop and uses it to render the article title, content, and any other attributes specified in the JSON file.\n- The `StoryWrapper` component provides a convenient way to render the `ArticleCard` component with specific attributes for testing or demonstration purposes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ArticleCard } from './ArticleCard';\nimport attributes from './attributes.json';\n\nexport default { title: 'ArticleCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ArticleCard} />;\n}\n"
  },
  {
    "instruction": "**ArticleCard.js**\n\nThe `ArticleCard.js` file is a React functional component that renders a card displaying an article. It uses the Mantine UI library to create a visually appealing and informative card.\n\n**Component Structure:**\n\n* **Header:**\n    * A thumbnail image of the article.\n* **Content:**\n    * A badge indicating the article's rating.\n    * The title of the article.\n    * An excerpt of the article content.\n* **Footer:**\n    * The author's avatar and name.\n    * Buttons for sharing, bookmarking, and liking the article.\n\n**Features:**\n\n* **Responsive design:** The card adapts to different screen sizes.\n* **Customizable theme:** The card's style can be customized using CSS variables.\n* **Interactive elements:** The share, bookmark, and like buttons allow users to interact with the article.\n* **Rich text formatting:** The article title, rating, and excerpt are formatted with appropriate styles.\n\n**Usage:**\n\nThe `ArticleCard` component can be used to display individual articles or as part of a list of articles. It can be embedded in other pages or applications.\n\n**Code Breakdown:**\n\n* **Imports:**\n    * Import necessary Mantine components and icons.\n* **Component Function:**\n    * Define the `ArticleCard` function.\n* **Link Properties:**\n    * Set the link properties for the article title and image.\n* **Theme Hook:**\n    * Use the `useMantineTheme` hook to access theme variables.\n* **Card Component:**\n    * Render the card with a border, radius, and custom class.\n    * Display the article image, rating badge, title, excerpt, and footer.\n* **Footer Components:**\n    * Display the author's avatar and name.\n    * Include buttons for sharing, bookmarking, and liking the article.\n\n**Overall Functionality:**\n\nThe `ArticleCard.js` file provides a functional and visually appealing component for displaying articles. It can be used to provide users with summaries of articles, promote content, and engage with readers.",
    "input": "",
    "output": "import { IconBookmark, IconHeart, IconShare } from '@tabler/icons-react';\nimport {\n  ActionIcon,\n  Avatar,\n  Badge,\n  Card,\n  Center,\n  Group,\n  Image,\n  Text,\n  useMantineTheme,\n} from '@mantine/core';\nimport classes from './ArticleCard.module.css';\n\nexport function ArticleCard() {\n  const linkProps = { href: 'https://mantine.dev', target: '_blank', rel: 'noopener noreferrer' };\n  const theme = useMantineTheme();\n\n  return (\n    <Card withBorder radius=\"md\" className={classes.card}>\n      <Card.Section>\n        <a {...linkProps}>\n          <Image src=\"https://i.imgur.com/Cij5vdL.png\" height={180} />\n        </a>\n      </Card.Section>\n\n      <Badge className={classes.rating} variant=\"gradient\" gradient={{ from: 'yellow', to: 'red' }}>\n        outstanding\n      </Badge>\n\n      <Text className={classes.title} fw={500} component=\"a\" {...linkProps}>\n        Resident Evil Village review\n      </Text>\n\n      <Text fz=\"sm\" c=\"dimmed\" lineClamp={4}>\n        Resident Evil Village is a direct sequel to 2017’s Resident Evil 7, but takes a very\n        different direction to its predecessor, namely the fact that this time round instead of\n        fighting against various mutated zombies, you’re now dealing with more occult enemies like\n        werewolves and vampires.\n      </Text>\n\n      <Group justify=\"space-between\" className={classes.footer}>\n        <Center>\n          <Avatar\n            src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png\"\n            size={24}\n            radius=\"xl\"\n            mr=\"xs\"\n          />\n          <Text fz=\"sm\" inline>\n            Bill Wormeater\n          </Text>\n        </Center>\n\n        <Group gap={8} mr={0}>\n          <ActionIcon className={classes.action}>\n            <IconHeart size={16} color={theme.colors.red[6]} />\n          </ActionIcon>\n          <ActionIcon className={classes.action}>\n            <IconBookmark size={16} color={theme.colors.yellow[7]} />\n          </ActionIcon>\n          <ActionIcon className={classes.action}>\n            <IconShare size={16} color={theme.colors.blue[6]} />\n          </ActionIcon>\n        </Group>\n      </Group>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** article-card-with-image.json\n\n**File Type:** JSON\n\n**Purpose:**\n\nThis JSON file defines the layout and style of an article card with an image. It is used to render a specific type of article card in an application or website.\n\n**Properties:**\n\n* **title:** The title of the article.\n* **category:** The category of the article.\n* **dimmed:** Whether the card should be dimmed or not.\n* **canvas:** An object that specifies the layout of the card.\n    * **center:** Whether the card should be centered or not.\n    * **maxWidth:** The maximum width of the card.\n\n**Example Usage:**\n\n```json\n{\n  \"title\": \"Article card with image\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Effects:**\n\n* Creates an article card with the specified title and category.\n* Sets the dimmed property to true, indicating that the card should be darkened.\n* Centers the card horizontally within its container.\n* Sets the maximum width of the card to 320 pixels.\n\n**Usage:**\n\nThis JSON file can be used to configure the rendering of article cards with images in an application or website. It can be loaded and processed by JavaScript code to dynamically generate the card layout.\n\n**Additional Notes:**\n\n* The `canvas` property is an object that provides additional layout options for the card.\n* The `maxWidth` property specifies the maximum width of the card, which can be adjusted based on design requirements.\n* The `dimmed` property can be used to add visual emphasis to the card.\n* The specific implementation of rendering the article card with image may vary depending on the framework or platform being used.",
    "input": "",
    "output": "{\n  \"title\": \"Article card with image\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS file that defines the styles for a web page. It contains three CSS rules that define the styles for the following HTML elements:\n\n- `.card`\n- `.title`\n- `.footer`\n\n**Purpose:**\n\nThe purpose of this CSS file is to style the HTML elements with the classes `.card`, `.title`, and `.footer`. These elements are likely part of a web page or application that uses the Mantine CSS framework.\n\n**CSS Rules:**\n\n**1. `.card` Rule:**\n\n- Sets the `background-color` property of the `.card` element to the value of the `--mantine-color-body` CSS variable. This variable is likely defined in another CSS file that provides the base color for the page.\n\n**2. `.title` Rule:**\n\n- Sets the `font-family` property of the `.title` element to the value of the `--mantine-font-family` CSS variable. This variable specifies the default font family for the page.\n- Sets the `font-weight` property of the `.title` element to 450.\n- Sets the `margin-top` property of the `.title` element to the value of the `--mantine-spacing-xs` CSS variable. This variable specifies a small spacing value.\n\n**3. `.footer` Rule:**\n\n- Sets the `padding` property of the `.footer` element to the value of the `--mantine-spacing-xs` CSS variable for the top and bottom padding, and the value of the `--mantine-spacing-lg` CSS variable for the left and right padding.\n- Sets the `margin-top` property of the `.footer` element to the value of the `--mantine-spacing-md` CSS variable. This variable specifies a medium spacing value.\n- Sets the `border-top` property of the `.footer` element to a 1px solid border with a color that is determined by the `light-dark()` function. This function uses the `--mantine-color-gray-2` CSS variable for light themes and the `--mantine-color-dark-5` CSS variable for dark themes.\n\n**Conclusion:**\n\nThe CSS file defines the styles for the `.card`, `.title`, and `.footer` elements, including font family, font weight, padding, margin, and border. The styles are likely used to create a visually appealing and consistent layout for a web page or application.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 450;\n  margin-top: var(--mantine-spacing-xs);\n}\n\n.footer {\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-lg);\n  margin-top: var(--mantine-spacing-md);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n"
  },
  {
    "instruction": "**File Name:** ArticleCardFooter.jsx\n\n**Purpose:**\n\nThe file ArticleCardFooter.jsx is a React component responsible for rendering the footer section of an article card. It uses the StoryWrapper component to provide a storybook environment for rendering and testing the component.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper` from `../../components/StoryWrapper/StoryWrapper.js`\n    * `ArticleCardFooter` from `./ArticleCardFooter.js`\n    * `attributes.json` from `./attributes.json`\n\n* **Component Definition:**\n    * An object with the title `ArticleCardFooter` is exported.\n\n* **Usage Function:**\n    * A function named `Usage` is exported.\n    * It renders a `<StoryWrapper>` component with the following props:\n        * `attributes`: The `attributes.json` file, which provides data for rendering the component.\n        * `component`: The `ArticleCardFooter` component.\n\n**Storybook Environment:**\n\n* The StoryWrapper component is used to create a storybook environment where the `ArticleCardFooter` component can be rendered with different attributes.\n* The `attributes.json` file provides the data needed to render the component with the desired properties.\n\n**Usage:**\n\nThe `Usage()` function can be imported into a storybook file and used to render the `ArticleCardFooter` component with the specified attributes.\n\n**Additional Notes:**\n\n* The `ArticleCardFooter` component is likely responsible for displaying information such as the author, date, and read time of an article.\n* The `attributes.json` file may contain attributes such as article title, author name, date, and read time.\n* The StoryWrapper component is a utility component that provides a convenient way to render React components within a storybook environment.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ArticleCardFooter } from './ArticleCardFooter';\nimport attributes from './attributes.json';\n\nexport default { title: 'ArticleCardFooter' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ArticleCardFooter} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `ArticleCardFooter.js` file is a React component that renders a card footer for an article. It provides information about the article author, likes, and sharing options.\n\n**Functionality:**\n\n* **Card Layout:** The component uses the `Card` component from the `@mantine/core` library to create a card with a border, padding, and radius.\n* **Image:** An image of the article is displayed at the top of the card.\n* **Badge:** A badge with the category \"decorations\" is displayed below the image.\n* **Title:** The title of the article is displayed in a text element with a larger font weight.\n* **Author Information:** The author's avatar, name, and posting time are displayed in a group.\n* **Footer Section:** A section that includes the number of likes and sharing options.\n\n**Sharing Options:**\n\nThe sharing options include:\n\n* **Heart Icon:** Indicates that the article has been liked.\n* **Bookmark Icon:** Indicates that the article has been bookmarked.\n* **Share Icon:** Indicates that the article can be shared.\n\n**Additional Features:**\n\n* **CSS Classes:** The component uses CSS classes for styling, including the `classes.card` class for the card element.\n* **Icons:** The component uses icons from the `@tabler/icons-react` library for the sharing options.\n* **Time Display:** The posting time is displayed in a smaller font size with a dimmed color.\n\n**Usage:**\n\nThe `ArticleCardFooter` component can be used to display a card footer for an article in a blog or news website. It provides a convenient way to showcase the article's author, sharing options, and other relevant information.\n\n**Conclusion:**\n\nThe `ArticleCardFooter.js` file is a React component that provides a comprehensive footer for an article card, including the author information, sharing options, and other relevant details. It is an essential component for any blog or news website that wants to enhance the user experience and encourage interaction with articles.",
    "input": "",
    "output": "import { IconBookmark, IconHeart, IconShare } from '@tabler/icons-react';\nimport { ActionIcon, Avatar, Badge, Card, Group, Image, Text } from '@mantine/core';\nimport classes from './ArticleCardFooter.module.css';\n\nexport function ArticleCardFooter() {\n  return (\n    <Card withBorder padding=\"lg\" radius=\"md\" className={classes.card}>\n      <Card.Section mb=\"sm\">\n        <Image\n          src=\"https://images.unsplash.com/photo-1477554193778-9562c28588c0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=500&q=80\"\n          alt=\"Top 50 underrated plants for house decoration\"\n          height={180}\n        />\n      </Card.Section>\n\n      <Badge variant=\"light\">decorations</Badge>\n      <Text className={classes.title}>Top 50 underrated plants for house decoration</Text>\n\n      <Group mt=\"lg\">\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png\"\n          radius=\"sm\"\n        />\n        <div>\n          <Text fw={500}>Elsa Gardenowl</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            posted 34 minutes ago\n          </Text>\n        </div>\n      </Group>\n\n      <Card.Section className={classes.footer}>\n        <Group justify=\"space-between\">\n          <Text fz=\"xs\" c=\"dimmed\">\n            733 people liked this\n          </Text>\n          <Group gap={0}>\n            <ActionIcon variant=\"subtle\" color=\"gray\">\n              <IconHeart size={20} color=\"var(--mantine-color-red-6)\" stroke={1.5} />\n            </ActionIcon>\n            <ActionIcon variant=\"subtle\" color=\"gray\">\n              <IconBookmark size={20} color=\"var(--mantine-color-yellow-6)\" stroke={1.5} />\n            </ActionIcon>\n            <ActionIcon variant=\"subtle\" color=\"gray\">\n              <IconShare size={20} color=\"var(--mantine-color-blue-6)\" stroke={1.5} />\n            </ActionIcon>\n          </Group>\n        </Group>\n      </Card.Section>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON object that defines the configuration for an article card with a footer. It specifies the following attributes:\n\n**Title:** \"Article card with footer\"\n**Category:** \"article-cards\"\n**Dimmed:** True\n**Canvas:**\n\n* **Center:** True\n* **MaxWidth:** 320\n\n**Purpose:**\n\nThe purpose of this JSON object is to configure an article card with a footer that appears in a specific category and has additional styling options.\n\n**Properties:**\n\n* **title:** The title of the article card, which is displayed in a prominent way.\n* **category:** The category of the article card, which is used for organizational purposes.\n* **dimmed:** Whether the card should be dimmed, which can be visually appealing but may also suggest that the article is not current or relevant.\n* **canvas:** The configuration for the card's layout and appearance.\n\n**Canvas Properties:**\n\n* **center:** Whether the card should be centered within its container.\n* **maxWidth:** The maximum width of the card.\n\n**Usage:**\n\nThis JSON object can be used to render an article card with a footer in a specific way. The specific rendering engine or framework used may vary, but the configuration options specified in the JSON object can be used to achieve the desired outcome.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Article card with footer\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Additional Notes:**\n\n* The \"dimmed\" property can be used to create a visually appealing effect, but it may also suggest that the article is not current or relevant.\n* The \"canvas\" property allows for fine-grained control over the card's layout and appearance.\n* The specific rendering engine or framework used may have additional options or limitations.",
    "input": "",
    "output": "{\n  \"title\": \"Article card with footer\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines the style and layout of a single card element. It is used to create a visually appealing and informative card that can be used for various purposes, such as displaying product information, news articles, or portfolio projects.\n\n**Card Design:**\n\n- **Height:** The card has a fixed height of 440 pixels.\n- **Flexbox Layout:** The card is implemented using flexbox, allowing it to adapt to different screen sizes while maintaining its overall structure.\n- **Column Direction:** The card's content is arranged in a vertical column.\n- **Spacing:** Content is evenly spaced between the top and bottom of the card using `justify-content: space-between`.\n- **Alignment:** Content is aligned to the left side of the card using `align-items: flex-start`.\n- **Background Image:** A background image is applied using a URL, with `background-size: cover` to scale the image to cover the entire card and `background-position: center` to center the image within the card.\n\n**Card Content:**\n\n- **Title:** The title is styled with a font-family, font-weight, color, line-height, and font-size. It is positioned with a margin-top.\n- **Category:** The category is displayed with a color, opacity, font-weight, and text-transform.\n\n**Purpose:**\n\nThe card can be used to display various types of content, such as:\n\n- Product information\n- News articles\n- Portfolio projects\n- Testimonials\n- Event announcements\n\n**Usage:**\n\nTo use this card, you would need to include the CSS file in your HTML document and then create an HTML element with the appropriate classes to apply the styles.",
    "input": "",
    "output": ".card {\n  height: 440px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  background-size: cover;\n  background-position: center;\n  background-image: url(https://images.unsplash.com/photo-1508193638397-1c4234db14d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80);\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 600;\n  color: var(--mantine-color-white);\n  line-height: 1.2;\n  font-size: 32px;\n  margin-top: var(--mantine-spacing-xs);\n}\n\n.category {\n  color: var(--mantine-color-white);\n  opacity: 0.7;\n  font-weight: 700;\n  text-transform: uppercase;\n}\n"
  },
  {
    "instruction": "**File Name:** ArticleCardImage.jsx\n\n**Purpose:**\n\nThe `ArticleCardImage.jsx` file is a React component that represents an article card image. It displays an image and provides metadata about the article.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `ArticleCardImage` component with additional props, such as attributes and a reference to the component itself.\n* **ArticleCardImage:** The main component that renders the article card image.\n\n**Data Source:**\n\nThe `attributes.json` file provides the metadata for the article card image, including the image URL, title, and other relevant details.\n\n**Usage:**\n\nThe `Usage()` function renders the `StoryWrapper` component with the following props:\n\n* **attributes:** The metadata from the `attributes.json` file.\n* **component:** The `ArticleCardImage` component.\n\n**Rendering:**\n\nThe `ArticleCardImage` component renders the following elements:\n\n* **Image:** An image with the URL specified in the `attributes` prop.\n* **Title:** The title of the article, also specified in the `attributes` prop.\n* **Additional Metadata:** Other metadata fields from the `attributes` prop, such as author, date, etc.\n\n**Conclusion:**\n\nThe `ArticleCardImage.jsx` file is responsible for displaying an article card image with associated metadata. It uses the `StoryWrapper` component to provide additional functionality, such as wrapping the component with additional props.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ArticleCardImage } from './ArticleCardImage';\nimport attributes from './attributes.json';\n\nexport default { title: 'ArticleCardImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ArticleCardImage} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ArticleCardImage.js\n\n**Purpose:**\n\nThe `ArticleCardImage.js` file is a React component that represents an article card with an image. It is part of a Mantine UI framework.\n\n**Functionality:**\n\nThe component renders a `Paper` element with the following components inside:\n\n* A `Text` element with the category \"nature\" and a small size.\n* A `Title` element with the title \"Best forests to visit in North America\" and an order of 3.\n* A `Button` element with the text \"Read article\" and a white variant and dark color.\n\n**CSS:**\n\nThe `ArticleCardImage.module.css` file contains CSS classes used to style the component. These classes are used to set the styles of the `category`, `title`, and `button` elements.\n\n**Usage:**\n\nThe `ArticleCardImage` component can be used to display an article card with an image. It can be rendered in a React application by importing the component and rendering it.\n\n**Example:**\n\n```\n<ArticleCardImage />\n```\n\n**Key Features:**\n\n* Mantine UI framework components: `Paper`, `Text`, `Title`, `Button`\n* CSS styling through a separate module file\n* Shadow, padding, and radius settings for the `Paper` element\n* Category, title, and button content\n* Read article button with a white variant and dark color\n\n**Additional Notes:**\n\n* The `classes.card` class is used to style the entire `Paper` element.\n* The `classes.category` class is used to style the category text.\n* The `classes.title` class is used to style the title text.\n* The `classes.button` class is used to style the read article button.\n* The `start_of_turn` tag is a placeholder and does not have any semantic meaning in the code.",
    "input": "",
    "output": "import { Button, Paper, Text, Title } from '@mantine/core';\nimport classes from './ArticleCardImage.module.css';\n\nexport function ArticleCardImage() {\n  return (\n    <Paper shadow=\"md\" p=\"xl\" radius=\"md\" className={classes.card}>\n      <div>\n        <Text className={classes.category} size=\"xs\">\n          nature\n        </Text>\n        <Title order={3} className={classes.title}>\n          Best forests to visit in North America\n        </Title>\n      </div>\n      <Button variant=\"white\" color=\"dark\">\n        Read article\n      </Button>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON configuration file that defines the properties of a card with a background image.\n\n**Purpose:**\n\nThe purpose of this file is to specify the layout and appearance of a card that will be used in a user interface or website.\n\n**File Structure:**\n\nThe file is a JSON object with the following structure:\n\n```json\n{\n  \"title\": \"Card with background image\",\n  \"category\": \"article-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the card, which will be displayed as a heading.\n* **category:** The category of the card, which can be used for grouping or filtering.\n* **canvas:** An object that defines the layout of the card.\n    * **center:** Whether the card should be centered horizontally.\n    * **maxWidth:** The maximum width of the card in pixels.\n\n**Example Usage:**\n\nThe provided JSON object specifies a card with the following properties:\n\n* Title: \"Card with background image\"\n* Category: \"article-cards\"\n* Canvas:\n    * Centered horizontally\n    * Maximum width of 320 pixels\n\n**Additional Notes:**\n\n* The background image for the card is not specified in this file. It is assumed to be an external image file.\n* The card's layout and appearance can be further customized using CSS or other styling techniques.\n* This JSON configuration file can be used in conjunction with a JavaScript library or framework to render the card in a user interface.",
    "input": "",
    "output": "{\n  \"title\": \"Card with background image\",\n  \"category\": \"article-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines the styles for a card component. The card is a container that displays information about a product or item.\n\n**Structure:**\n\nThe file consists of four CSS classes:\n\n**1. .card:**\n- Sets the background color of the card to the value of the `--mantine-color-body` CSS variable.\n- Uses a flexbox layout with the following properties:\n    - Flex-wrap: nowrap\n    - Flex-direction: row\n- Applies a media query using the `@mixin smaller-than 755px` mixin to change the flex-direction to column on screens with a width of 755px or less.\n\n**2. .image:**\n- Sets the maximum width of the image to 220px.\n- Applies a media query using the `@mixin smaller-than 755px` mixin to change the maximum width and height of the image on screens with a width of 755px or less.\n\n**3. .title:**\n- Sets the font-weight to 500.\n- Sets the font-family to \"Outfit\", followed by the value of the `--mantine-font-family` CSS variable.\n- Sets the line-height to 1.2.\n\n**4. .body:**\n- Adds padding to the body content using the `--mantine-spacing-md` CSS variable.\n\n**Purpose:**\n\nThe purpose of this CSS file is to define the visual style and layout of a card component. The card provides a visually appealing and informative container for product or item information.\n\n**Key Features:**\n\n- Responsive design that adapts to different screen sizes.\n- Clean and modern design with customizable font and spacing.\n- Flexible layout that allows for easy content organization.\n\n**Usage:**\n\nTo use this CSS file, it should be included in the HTML document where the card component is located. The CSS variables used in the file should be defined elsewhere in the project's CSS or variables file.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: row;\n\n  @mixin smaller-than 755px {\n    flex-direction: column;\n  }\n}\n\n.image {\n  max-width: 220px;\n\n  @mixin smaller-than 755px {\n    max-width: 100%;\n    max-height: 180px;\n  }\n}\n\n.title {\n  font-weight: 500;\n  font-family: Outfit, var(--mantine-font-family);\n  line-height: 1.2;\n}\n\n.body {\n  padding: var(--mantine-spacing-md);\n}\n"
  },
  {
    "instruction": "**File Name:** ArticleCardVertical.jsx\n\n**Purpose:**\n\nThe file is a React component that renders an article card vertically. It is part of a storybook application.\n\n**Components:**\n\n* **StoryWrapper:** A component that provides a container for the article card and sets up the attributes passed to the component.\n* **ArticleCardVertical:** The main component that displays the article card.\n\n**Features:**\n\n* **Imports:**\n    * `StoryWrapper`: A component that provides a storybook environment.\n    * `ArticleCardVertical`: The component that renders the article card.\n    * `attributes.json`: A JSON file that contains the attributes used to configure the article card.\n\n* **Exports:**\n    * `title`: The title of the story.\n    * `Usage`: A function that renders the `StoryWrapper` component with the `ArticleCardVertical` component and the `attributes`.\n\n**Usage:**\n\nThe `Usage` function renders the `StoryWrapper` component with the following props:\n\n* `attributes`: The attributes from the `attributes.json` file.\n* `component`: The `ArticleCardVertical` component.\n\n**Purpose of the File:**\n\nThe file creates an interactive storybook component that allows users to preview and customize an article card with various attributes. It provides a convenient way to demonstrate the functionality and styling of the card.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component provides additional functionality, such as rendering the component with different attributes and setting up a preview mode.\n* The `attributes.json` file contains the actual values for the attributes, which can be customized as needed.\n* The `title` export is used to set the title of the story in the storybook interface.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ArticleCardVertical } from './ArticleCardVertical';\nimport attributes from './attributes.json';\n\nexport default { title: 'ArticleCardVertical' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ArticleCardVertical} />;\n}\n"
  },
  {
    "instruction": "**ArticleCardVertical.js**\n\nThis file is a React functional component that renders a vertical card component for an article. It uses the Mantine UI library for styling and layout.\n\n**Purpose:**\n\nThe purpose of this component is to display an article with its title, author, date, and category. It provides a clean and visually appealing layout for presenting article information.\n\n**Components:**\n\n* **Card:** The primary container for the article card, with a border and rounded corners.\n* **Image:** An image of the article, displayed at the top of the card.\n* **Body:** A section containing the article's title, category, author, and date.\n* **Text:** For displaying text content, including the category, title, author name, and date.\n* **Group:** Used to group elements such as the author and date information.\n* **Avatar:** An avatar representing the author.\n\n**Styling:**\n\nThe component uses a CSS module called `ArticleCardVertical.module.css` for styling the individual components.\n\n**Code Breakdown:**\n\n* **Import Statements:** Import necessary Mantine components and CSS classes.\n* **Function Declaration:** Define the `ArticleCardVertical` function.\n* **JSX Code:** Render the card component with the following elements:\n    * Card container\n    * Image\n    * Body\n        * Category text\n        * Title text\n        * Author and date information with avatar and text\n* **Class Name:** Apply the `classes.card` class to the card for styling.\n\n**Usage:**\n\nThis component can be used in other React components to display articles. It can be easily customized with different image, title, author, date, and category values.\n\n**Benefits:**\n\n* Consistent and visually appealing article layout.\n* Easy to customize with different article information.\n* Use of Mantine UI for styling and layout.\n\n**Note:**\n\n* The code assumes that the `ArticleCardVertical.module.css` file contains the necessary CSS styles for the component.\n* The image source and avatar image source can be changed as needed.",
    "input": "",
    "output": "import { Avatar, Card, Group, Image, Text } from '@mantine/core';\nimport classes from './ArticleCardVertical.module.css';\n\nexport function ArticleCardVertical() {\n  return (\n    <Card withBorder radius=\"md\" p={0} className={classes.card}>\n      <Image\n        src=\"https://images.unsplash.com/photo-1602080858428-57174f9431cf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80\"\n        className={classes.image}\n      />\n\n      <div className={classes.body}>\n        <Text tt=\"uppercase\" c=\"dimmed\" fw={700} size=\"xs\">\n          technology\n        </Text>\n        <Text className={classes.title} mt=\"xs\" mb=\"md\">\n          The best laptop for Frontend engineers in 2022\n        </Text>\n        <Group wrap=\"nowrap\" gap=\"xs\">\n          <Group gap=\"xs\" wrap=\"nowrap\">\n            <Avatar\n              size={20}\n              src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-8.png\"\n            />\n            <Text size=\"xs\">Elsa Typechecker</Text>\n          </Group>\n          <Text size=\"xs\" c=\"dimmed\">\n            •\n          </Text>\n          <Text size=\"xs\" c=\"dimmed\">\n            Feb 6th\n          </Text>\n        </Group>\n      </div>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines the configuration for a \"Vertical Article Card\" component. It is part of a design system or component library, likely used to render a specific type of content on a web page.\n\n**Key Features:**\n\n- **Title:** \"Vertical Article Card\"\n- **Category:** \"article-cards\"\n- **Dimmed:** Indicates whether the card should have a darkened background or not.\n- **Responsive:** Determines if the card should automatically adjust its size based on the screen size.\n- **Canvas:**\n    - **Center:** Whether the card should be centered within its container.\n    - **MaxWidth:** The maximum width of the card in pixels.\n\n**Purpose:**\n\nThe purpose of this file is to provide a blueprint for rendering a vertical article card with specific design and layout properties. It includes configurations for title, category, background, responsiveness, and canvas placement.\n\n**Usage:**\n\nThis file can be used by developers to:\n\n- Specify the layout and style of the article card.\n- Determine the content to be displayed within the card.\n- Integrate the card into a web page or application.\n\n**Additional Notes:**\n\n- The JSON syntax allows for easy configuration of multiple properties.\n- The values assigned to each property correspond to specific design and functionality options.\n- The file can be used as a template or reference for creating additional article cards with different configurations.",
    "input": "",
    "output": "{\n  \"title\": \"Vertical article card\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 520\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a card component, including its layout, animations, and hover effects.\n\n**Key Features:**\n\n**1. Card Container:**\n\n- `border`: Sets a transparent 1px solid border.\n- `position: relative`: Positions the card relatively within the document flow.\n- `transition`: Defines smooth transitions for border color, transform, and box shadow changes on hover.\n\n**2. Hover Effects:**\n\n- `@mixin hover`: A CSS mixin that defines the styles applied on hover.\n    - `z-index: 1`: Places the card above other elements.\n    - `transform: scale(1.01)`: Scales the card slightly to indicate hover.\n    - `box-shadow: var(--mantine-shadow-md)`: Applies a medium shadow to the card.\n    - `border-color`: Changes the border color to a light or dark gray shade depending on the theme.\n\n**3. Card Elements:**\n\n- `.date`:\n    - `text-transform: uppercase`: Capitalizes the date text.\n    - `font-weight: 500`: Sets the font weight to medium.\n    - `color: var(--mantine-color-dimmed)`: Uses a dimmed color for the date text.\n    - `font-size: var(--mantine-font-size-xs)`: Sets the font size for the date text.\n    - `margin-top: var(--mantine-spacing-xs)`: Adds spacing above the date text.\n\n- `.title`:\n    - `font-family: 'Outfit', var(--mantine-font-family)`: Sets the font family to 'Outfit'.\n    - `font-weight: 500`: Sets the font weight to medium.\n    - `font-size: var(--mantine-font-size-lg)`: Sets the font size for the title.\n\n**Usage:**\n\nThe CSS styles defined in this file can be used to style a card component with hover effects and a consistent layout. The `.card` class can be applied to the root element of the card, while the `.date` and `.title` classes can be used to style the date and title elements, respectively.\n\n**Note:**\n\n- The file assumes the use of a CSS framework called Mantine, which provides predefined variables and styles.\n- The specific values for font size, spacing, and shadow may vary depending on the Mantine theme configuration.",
    "input": "",
    "output": ".card {\n  border: 1px solid transparent;\n  position: relative;\n  transition:\n    border-color 150ms ease,\n    transform 150ms ease,\n    box-shadow 150ms ease;\n\n  @mixin hover {\n    z-index: 1;\n    transform: scale(1.01);\n    box-shadow: var(--mantine-shadow-md);\n    border-color: light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n  }\n}\n\n.date {\n  text-transform: uppercase;\n  font-weight: 500;\n  color: var(--mantine-color-dimmed);\n  font-size: var(--mantine-font-size-xs);\n  margin-top: var(--mantine-spacing-xs);\n}\n\n.title {\n  font-family: 'Outfit', var(--mantine-font-family);\n  font-weight: 500;\n  font-size: var(--mantine-font-size-lg);\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file is a React component that displays a grid of articles. It is part of a story-based application.\n\n**File Structure:**\n\n* **import statements:** Import necessary components and files.\n* **export statements:** Define the component title and export a Usage function.\n* **Usage function:**\n    * Creates an instance of the `StoryWrapper` component.\n    * Passes the `attributes` object and the `ArticlesCardsGrid` component as props.\n* **StoryWrapper component:**\n    * Renders the `ArticlesCardsGrid` component with the provided `attributes`.\n\n**Components:**\n\n* **ArticlesCardsGrid:** A component that displays a grid of articles.\n* **StoryWrapper:** A component that provides a story-based environment for the `ArticlesCardsGrid` component.\n\n**Data:**\n\n* **attributes.json:** An object containing article attributes, such as title, author, and description.\n\n**Usage:**\n\nThe Usage function renders an instance of the `StoryWrapper` component, passing the `attributes` and `ArticlesCardsGrid` components as props. This creates a story-based environment where the `ArticlesCardsGrid` component can be displayed with the given attributes.\n\n**Benefits:**\n\n* Provides a story-based context for the `ArticlesCardsGrid` component.\n* Allows for easy testing and debugging of the component.\n* Enables collaboration and feedback during the development process.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component may provide additional features, such as navigation and story progression.\n* The `attributes.json` file can be customized to include different article data.\n* The `ArticlesCardsGrid` component can be further customized to change the layout and styling of the article grid.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport { ArticlesCardsGrid } from './ArticlesCardsGrid';\nimport attributes from './attributes.json';\n\nexport default { title: 'ArticlesCardsGrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ArticlesCardsGrid} />;\n}\n"
  },
  {
    "instruction": "**ArticlesCardsGrid.js**\n\nThis file is a React component that displays a grid of articles using the Mantine UI library.\n\n**File Structure:**\n\n- **Imports:** Import necessary Mantine components, including Card, Image, AspectRatio, SimpleGrid, Text, and Container.\n- **Mock Data:** Defines an array of article objects with title, image, and date properties.\n- **ArticlesCardsGrid Component:**\n    - Maps the mock data to create a list of Card components.\n    - Each Card component includes:\n        - AspectRatio for displaying the article image with a specific aspect ratio.\n        - Image component to display the article image with rounded corners.\n        - Text component for the article date.\n        - Text component for the article title.\n    - SimpleGrid component is used to display the cards in a two-column grid with spacing between them.\n    - Container component provides padding around the grid.\n\n**Functionality:**\n\n- The component renders a grid of four articles, each with an image, title, date, and a link to an external page.\n- The aspect ratio of the images is automatically adjusted to maintain the original image proportions.\n- The grid layout is responsive, adjusting to different screen sizes.\n\n**Usage:**\n\nThis component can be used to display a list of articles on a webpage. It provides a visually appealing and functional way to present information.\n\n**Additional Features:**\n\n- The component could be extended to include additional article details, such as an excerpt or author name.\n- The link in each Card component could be linked to a specific article page or any other desired destination.\n\n**Overall, this file demonstrates the use of Mantine UI components to create a clean and visually appealing grid of articles.**",
    "input": "",
    "output": "import { AspectRatio, Card, Container, Image, SimpleGrid, Text } from '@mantine/core';\nimport classes from './ArticlesCardsGrid.module.css';\n\nconst mockdata = [\n  {\n    title: 'Top 10 places to visit in Norway this summer',\n    image:\n      'https://images.unsplash.com/photo-1527004013197-933c4bb611b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'August 18, 2022',\n  },\n  {\n    title: 'Best forests to visit in North America',\n    image:\n      'https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'August 27, 2022',\n  },\n  {\n    title: 'Hawaii beaches review: better than you think',\n    image:\n      'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'September 9, 2022',\n  },\n  {\n    title: 'Mountains at night: 12 best locations to enjoy the view',\n    image:\n      'https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'September 12, 2022',\n  },\n];\n\nexport function ArticlesCardsGrid() {\n  const cards = mockdata.map((article) => (\n    <Card key={article.title} p=\"md\" radius=\"md\" component=\"a\" href=\"#\" className={classes.card}>\n      <AspectRatio ratio={1920 / 1080}>\n        <Image src={article.image} radius=\"md\" />\n      </AspectRatio>\n      <Text className={classes.date}>{article.date}</Text>\n      <Text className={classes.title}>{article.title}</Text>\n    </Card>\n  ));\n\n  return (\n    <Container py=\"xl\">\n      <SimpleGrid cols={{ base: 1, sm: 2 }} spacing={{ base: 0, sm: 'md' }}>\n        {cards}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file provided is a JSON object that defines the configuration for an article cards grid layout.\n\n**Purpose:**\n\nThe purpose of this file is to specify the layout and settings for a grid of article cards.\n\n**Structure:**\n\nThe JSON object contains the following key-value pairs:\n\n- **title:** A string value that specifies the title of the article cards grid.\n- **category:** A string value that specifies the category of the article cards.\n- **changelog:** A string value that specifies the date of the latest changes made to the layout.\n- **responsive:** A boolean value that specifies whether the layout should be responsive (adjust to different screen sizes).\n- **canvas:** An object that contains the canvas settings.\n\n**Canvas Settings:**\n\nThe `canvas` object contains a single key-value pair:\n\n- **center:** A boolean value that specifies whether the article cards should be centered within the canvas.\n\n**Usage:**\n\nThis JSON object can be used to configure an article cards grid layout in a web application or content management system. The configuration can be used to generate the necessary HTML and CSS code to render the layout, as well as to set the layout properties and content.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Articles cards grid\",\n  \"category\": \"article-cards\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Conclusion:**\n\nThe JSON object described above defines the configuration for an article cards grid layout. It specifies the layout title, category, changelog, responsiveness, and canvas settings. This configuration can be used to render an article cards grid with the specified layout and settings.",
    "input": "",
    "output": "{\n  \"title\": \"Articles cards grid\",\n  \"category\": \"article-cards\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a configuration for an authentication form. It contains the following key fields:\n\n**title:** \"Authentication form\"\n**category:** \"authentication\"\n**dimmed:** true\n**canvas:**\n    **center:** true\n    **maxWidth:** 420\n\n**Purpose:**\n\nThe purpose of this file is to configure a user interface element that represents an authentication form.\n\n**Key Fields:**\n\n**title:**\n- Specifies the title of the authentication form. In this case, it is \"Authentication form\".\n\n**category:**\n- Indicates the category of the form, which is \"authentication\".\n\n**dimmed:**\n- Set to true, indicating that the form should be displayed with a dimmed or translucent background. This is typically used to create a visually distinct form that stands out from the surrounding content.\n\n**canvas:**\n- Defines the layout and style of the form.\n    - **center:** Set to true, indicating that the form should be centered horizontally within its container.\n    - **maxWidth:** Specifies the maximum width of the form, which is set to 420.\n\n**Additional Notes:**\n\n- The file provides a configuration for an authentication form, including its title, category, dimming effect, and layout.\n- The \"canvas\" object defines the positioning and styling of the form, ensuring that it is displayed correctly within the user interface.\n- The \"dimmed\" field and \"canvas.center\" options work together to create a visually appealing and user-friendly authentication form.",
    "input": "",
    "output": "{\n  \"title\": \"Authentication form\",\n  \"category\": \"authentication\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** AuthenticationForm.jsx\n\n**Purpose:**\n\nThe file is a React component that renders an authentication form. It is part of a storybook application.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that wraps the `AuthenticationForm` component and provides additional props.\n- **AuthenticationForm:** The actual form component that handles user authentication.\n\n**Functionality:**\n\n- The file imports necessary components and data from other files:\n    - `StoryWrapper`: A component that provides props to the `AuthenticationForm`.\n    - `attributes.json`: A JSON file containing attributes for the form.\n    - `AuthenticationForm`: The form component.\n- It exports an object with a title property, which will be used to display the component in storybook.\n- It exports a `Usage()` function that renders the `StoryWrapper` component with the following props:\n    - `attributes`: The data from `attributes.json`.\n    - `component`: The `AuthenticationForm` component.\n\n**Usage:**\n\nThe `Usage()` function is used in the storybook application to render the `AuthenticationForm` with the provided attributes. This allows developers to preview and test the form in different scenarios.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component likely provides additional functionality to the `AuthenticationForm`, such as styling or event handling.\n- The `attributes.json` file likely contains fields like email, password, and submit button labels.\n- The `AuthenticationForm` component is likely responsible for handling user input and performing authentication logic.\n\n**Purpose of the File:**\n\nThe purpose of this file is to create an interactive and functional authentication form that can be easily tested and previewed in a storybook application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { AuthenticationForm } from './AuthenticationForm';\n\nexport default { title: 'AuthenticationForm' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={AuthenticationForm} />;\n}\n"
  },
  {
    "instruction": "**Description:**\n\nThe provided code is a React functional component named `AuthenticationForm` that renders a form for user authentication. It allows users to either log in or register by providing their email address, password, and name (for registration).\n\n**Components and Functionality:**\n\n- **Mantine Core Components:** The component uses various Mantine core components for form input and layout, including:\n    - Text\n    - TextInput\n    - PasswordInput\n    - Button\n    - Anchor\n    - Divider\n    - Group\n    - Paper\n\n- **Mantine Form Hook:** The `useForm` hook from Mantine provides form state management and validation.\n\n- **Mantine Hooks:**\n    - `useToggle`: To switch between login and registration modes.\n\n- **Form Validation:**\n    - Email validation: Checks for a valid email format.\n    - Password validation: Ensures the password has at least 6 characters.\n\n- **Form Handling:**\n    - The form is submitted when the user clicks the \"Login\" or \"Register\" button.\n    - The form data is submitted as a JSON object.\n\n- **Toggle Functionality:**\n    - The user can toggle between login and registration modes.\n    - Based on the current mode, the form displays either login or registration fields.\n\n- **Google and Twitter Buttons:**\n    - The component includes Google and Twitter buttons for social login options.\n\n- **Layout:**\n    - The form is displayed within a paper component with rounded corners and a border.\n    - The form fields are arranged in a stacked layout with appropriate labels and error messages.\n    - The submit button and toggle link are positioned at the bottom of the form.\n\n**Usage:**\n\nThe `AuthenticationForm` component can be used to implement user authentication functionality in a React application. It provides a secure and user-friendly interface for both login and registration processes.\n\n**Purpose:**\n\nThe purpose of this component is to allow users to easily authenticate themselves on a website or application by providing their email address and password. It offers options for social login and provides a toggle for switching between login and registration modes.",
    "input": "",
    "output": "import {\n  Anchor,\n  Button,\n  Checkbox,\n  Divider,\n  Group,\n  Paper,\n  PaperProps,\n  PasswordInput,\n  Stack,\n  Text,\n  TextInput,\n} from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { upperFirst, useToggle } from '@mantine/hooks';\nimport { GoogleButton } from './GoogleButton';\nimport { TwitterButton } from './TwitterButton';\n\nexport function AuthenticationForm(props: PaperProps) {\n  const [type, toggle] = useToggle(['login', 'register']);\n  const form = useForm({\n    initialValues: {\n      email: '',\n      name: '',\n      password: '',\n      terms: true,\n    },\n\n    validate: {\n      email: (val) => (/^\\S+@\\S+$/.test(val) ? null : 'Invalid email'),\n      password: (val) => (val.length <= 6 ? 'Password should include at least 6 characters' : null),\n    },\n  });\n\n  return (\n    <Paper radius=\"md\" p=\"lg\" withBorder {...props}>\n      <Text size=\"lg\" fw={500}>\n        Welcome to Mantine, {type} with\n      </Text>\n\n      <Group grow mb=\"md\" mt=\"md\">\n        <GoogleButton radius=\"xl\">Google</GoogleButton>\n        <TwitterButton radius=\"xl\">Twitter</TwitterButton>\n      </Group>\n\n      <Divider label=\"Or continue with email\" labelPosition=\"center\" my=\"lg\" />\n\n      <form onSubmit={form.onSubmit(() => {})}>\n        <Stack>\n          {type === 'register' && (\n            <TextInput\n              label=\"Name\"\n              placeholder=\"Your name\"\n              value={form.values.name}\n              onChange={(event) => form.setFieldValue('name', event.currentTarget.value)}\n              radius=\"md\"\n            />\n          )}\n\n          <TextInput\n            required\n            label=\"Email\"\n            placeholder=\"hello@mantine.dev\"\n            value={form.values.email}\n            onChange={(event) => form.setFieldValue('email', event.currentTarget.value)}\n            error={form.errors.email && 'Invalid email'}\n            radius=\"md\"\n          />\n\n          <PasswordInput\n            required\n            label=\"Password\"\n            placeholder=\"Your password\"\n            value={form.values.password}\n            onChange={(event) => form.setFieldValue('password', event.currentTarget.value)}\n            error={form.errors.password && 'Password should include at least 6 characters'}\n            radius=\"md\"\n          />\n\n          {type === 'register' && (\n            <Checkbox\n              label=\"I accept terms and conditions\"\n              checked={form.values.terms}\n              onChange={(event) => form.setFieldValue('terms', event.currentTarget.checked)}\n            />\n          )}\n        </Stack>\n\n        <Group justify=\"space-between\" mt=\"xl\">\n          <Anchor component=\"button\" type=\"button\" c=\"dimmed\" onClick={() => toggle()} size=\"xs\">\n            {type === 'register'\n              ? 'Already have an account? Login'\n              : \"Don't have an account? Register\"}\n          </Anchor>\n          <Button type=\"submit\" radius=\"xl\">\n            {upperFirst(type)}\n          </Button>\n        </Group>\n      </form>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**GoogleButton.tsx**\n\n**Purpose:**\n\nThe `GoogleButton.tsx` file creates a React component called `GoogleButton` that represents a Google login button. It displays the Google logo and the text \"Sign in with Google.\"\n\n**Components:**\n\n* **GoogleIcon:** A React component that renders an SVG icon representing the Google logo.\n* **GoogleButton:** A React component that extends the `Button` component from the `@mantine/core` library.\n\n**Code Breakdown:**\n\n**1. GoogleIcon Component:**\n\n* The `GoogleIcon` component receives props for `viewBox`, `width`, and `height`.\n* It renders an `<svg>` element with the specified dimensions.\n* Inside the `<svg>` element, there are five `<path>` elements that define the Google logo in different colors.\n\n**2. GoogleButton Component:**\n\n* The `GoogleButton` component extends the `Button` component.\n* It receives props for `variant`, `leftSection`, and any other props passed to the `Button` component.\n* In the `leftSection` prop, it renders the `GoogleIcon` component.\n* The `variant` prop sets the button style to \"default.\"\n\n**Usage:**\n\nThe `GoogleButton` component can be used in any React component where you want to add a Google login button.\n\n```\n<GoogleButton onClick={() => handleGoogleLogin()} />\n```\n\n**Additional Features:**\n\n* The `GoogleIcon` component is styled using CSS.\n* The `GoogleButton` component provides accessibility and keyboard navigation features.\n* The `Button` component from `@mantine/core` provides additional styling and functionality for the button.\n\n**Conclusion:**\n\nThe `GoogleButton.tsx` file provides a convenient and customizable way to implement a Google login button in a React application. It uses the Google logo and a user-friendly interface to simplify the login process.",
    "input": "",
    "output": "import { Button, ButtonProps } from '@mantine/core';\n\nfunction GoogleIcon(props: React.ComponentPropsWithoutRef<'svg'>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMidYMid\"\n      viewBox=\"0 0 256 262\"\n      style={{ width: 14, height: 14 }}\n      {...props}\n    >\n      <path\n        fill=\"#4285F4\"\n        d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\"\n      />\n      <path\n        fill=\"#34A853\"\n        d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\"\n      />\n      <path\n        fill=\"#FBBC05\"\n        d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782\"\n      />\n      <path\n        fill=\"#EB4335\"\n        d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\"\n      />\n    </svg>\n  );\n}\n\nexport function GoogleButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return <Button leftSection={<GoogleIcon />} variant=\"default\" {...props} />;\n}\n"
  },
  {
    "instruction": "**File Name:** TwitterButton.tsx\n\n**Description:**\n\nThis file is a React functional component that renders a Twitter-themed button. It is part of a Mantine UI library.\n\n**Functionality:**\n\n- **Imports:**\n    - `Button` and `ButtonProps` from the `@mantine/core` library.\n    - `TwitterIcon` from the `@mantinex/dev-icons` library.\n\n- **Component Declaration:**\n    - The component is named `TwitterButton`.\n    - It takes `ButtonProps` and `React.ComponentPropsWithoutRef<'button'>` as props.\n\n- **Component Rendering:**\n    - It renders a `Button` component with the following configuration:\n        - `leftSection`: A `TwitterIcon` component with the following properties:\n            - `size`: 16 pixels\n            - `color`: \"#00ACEE\" (Twitter blue)\n        - `variant`: \"default\"\n        - `{...props}`: Passes any additional props passed to the component.\n\n**Usage:**\n\nTo use the `TwitterButton` component, simply import it into your React application and render it with the desired props.\n\n**Example:**\n\n```\n<TwitterButton onClick={() => console.log('Tweet clicked')}>\n  Tweet\n</TwitterButton>\n```\n\n**Output:**\n\nThis will render a Twitter button with the following behavior:\n\n- A Twitter icon on the left.\n- The text \"Tweet\" inside the button.\n- When clicked, it will log \"Tweet clicked\" to the console.\n\n**Purpose:**\n\nThe `TwitterButton` component provides a convenient way to add a Twitter share button to your React application. It simplifies the process of rendering a Twitter button with the appropriate styling and functionality.",
    "input": "",
    "output": "import { Button, ButtonProps } from '@mantine/core';\nimport { TwitterIcon } from '@mantinex/dev-icons';\n\nexport function TwitterButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return (\n    <Button leftSection={<TwitterIcon size={16} color=\"#00ACEE\" />} variant=\"default\" {...props} />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided describes a user interface element called an \"authentication page with image.\" This page is designed for the purpose of user authentication.\n\n**File Structure:**\n\n* **title:** The title of the page, which is \"Authentication page with image.\"\n* **category:** The category of the page, which is \"authentication.\"\n* **responsive:** A boolean value indicating whether the page is responsive, which is set to `true`.\n* **canvas:** An object that contains configuration options for the page layout.\n    * **center:** A boolean value indicating whether the page content should be centered, which is set to `false`.\n\n**Page Functionality:**\n\nThe authentication page with image typically includes the following components:\n\n* A header or banner with an image or logo.\n* A form for entering user credentials (e.g., username, password).\n* A submit button to initiate the authentication process.\n* An option for password recovery or account creation.\n\n**Additional Notes:**\n\n* The `canvas.center` property is set to `false`, which indicates that the page content should not be centered within the viewport.\n* The `responsive` property ensures that the page adapts to different screen sizes and devices.\n* The specific design and layout of the page may vary depending on the platform or framework being used to implement it.",
    "input": "",
    "output": "{\n  \"title\": \"Authentication page with image\",\n  \"category\": \"authentication\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS stylesheet that defines the visual style of a web page. It contains CSS rules that specify the following:\n\n- **Background image:** A background image is set for the `.wrapper` element using the `background-image` property. The image is retrieved from a URL provided in the `url()` function.\n- **Form style:** The `.form` element has a border, minimum height, maximum width, padding, and border-radius. It also includes a media query that adjusts the form style for screens with a maximum width of 768px (small screens).\n- **Title style:** The `.title` element has a color, font family, font weight, text alignment, margin top, and margin bottom.\n\n**CSS Properties:**\n\n- `min-height`: Specifies the minimum height of an element.\n- `background-size`: Controls the size of the background image.\n- `background-image`: Sets the background image of an element.\n- `border-right`: Creates a border on the right side of an element.\n- `padding`: Adds padding to an element.\n- `border-radius`: Rounds the corners of an element.\n- `color`: Sets the text color of an element.\n- `font-family`: Specifies the font family for an element.\n- `font-weight`: Sets the font weight of an element.\n- `text-align`: Aligns text within an element.\n- `margin-top`: Adds margin to the top of an element.\n- `margin-bottom`: Adds margin to the bottom of an element.\n\n**Media Queries:**\n\nA media query is used to adjust the form style for screens with a maximum width of 768px (small screens). In this case, the maximum width of the form is set to 100%.\n\n**Purpose:**\n\nThe CSS stylesheet defines the visual style of a web page by specifying the background image, form style, and title style. It ensures that the page has a visually appealing and consistent layout.",
    "input": "",
    "output": ".wrapper {\n  min-height: 900px;\n  background-size: cover;\n  background-image: url(https://images.unsplash.com/photo-1484242857719-4b9144542727?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1280&q=80);\n}\n\n.form {\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-7));\n  min-height: 900px;\n  max-width: 450px;\n  padding: 30px;\n  padding-top: 80px;\n  border-radius: 0;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    max-width: 100%;\n  }\n}\n\n.title {\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  text-align: center;\n  margin-top: var(--mantine-spacing-md);\n  margin-bottom: 50px;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you provided is a React component file named `AuthenticationImage.jsx`. It appears to be part of a React application and is responsible for rendering an authentication image.\n\n**Component Structure:**\n\n* **Import Statements:**\n    * Imports the `StoryWrapper` component from the `StoryWrapper` module.\n    * Imports the `attributes.json` file.\n    * Imports the `AuthenticationImage` component from the same file.\n\n* **Component Declaration:**\n    * Exports an object with the title `AuthenticationImage`.\n\n* **Usage Function:**\n    * Renders a `StoryWrapper` component with the following properties:\n        * `attributes`: The `attributes.json` file.\n        * `component`: The `AuthenticationImage` component.\n\n**Purpose:**\n\nThe `AuthenticationImage.jsx` file likely serves the following purposes:\n\n* To display an authentication image on a React application.\n* To provide a visual cue for users to authenticate themselves.\n* To enhance the user experience by making it easier to identify and complete the authentication process.\n\n**How it Works:**\n\n* The `StoryWrapper` component is used to render the `AuthenticationImage` component with the specified attributes.\n* The `attributes.json` file likely contains configuration options for the authentication image, such as its source or styling.\n* The `AuthenticationImage` component renders the image based on the specified attributes.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for testing and documentation purposes.\n* The `AuthenticationImage` component may be part of a larger authentication system or module.\n* The specific functionality of the authentication image and its integration with the rest of the application may vary depending on the project and codebase.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { AuthenticationImage } from './AuthenticationImage';\n\nexport default { title: 'AuthenticationImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={AuthenticationImage} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet is a React functional component named `AuthenticationImage`. Its purpose is to display a simple authentication form, allowing users to log in to an account.\n\n**Components:**\n\nThe component uses the following Mantine components:\n\n- `Paper`: A card-like container for the form.\n- `Title`: A component for displaying a title.\n- `TextInput`: A component for entering text input.\n- `PasswordInput`: A component for entering passwords.\n- `Checkbox`: A component for selecting an option.\n- `Button`: A component for submitting the form.\n- `Anchor`: A component for hyperlinks.\n\n**Functionality:**\n\n- The component renders a form with the following fields:\n    - Email address\n    - Password\n    - A checkbox for keeping the user logged in\n- There is a submit button labeled \"Login\".\n- The component also displays a message indicating that users can register if they don't have an account.\n\n**Styling:**\n\nThe component uses a CSS module named `AuthenticationImage.module.css` to style the components. The CSS file defines styles for the `wrapper`, `form`, `title`, and other elements.\n\n**Event Handling:**\n\n- The component uses an `onClick` event handler on the \"Register\" anchor to prevent the default navigation behavior.\n\n**Usage:**\n\nThe `AuthenticationImage` component can be imported and rendered in an application to display the authentication form.\n\n**Example:**\n\n```\n<AuthenticationImage />\n```\n\n**Conclusion:**\n\nThe `AuthenticationImage` component is a simple and functional form that allows users to log in to an account. It utilizes Mantine components for ease of use and styling, and provides a clear call to action for registration.",
    "input": "",
    "output": "import {\n  Anchor,\n  Button,\n  Checkbox,\n  Paper,\n  PasswordInput,\n  Text,\n  TextInput,\n  Title,\n} from '@mantine/core';\nimport classes from './AuthenticationImage.module.css';\n\nexport function AuthenticationImage() {\n  return (\n    <div className={classes.wrapper}>\n      <Paper className={classes.form}>\n        <Title order={2} className={classes.title}>\n          Welcome back to Mantine!\n        </Title>\n\n        <TextInput label=\"Email address\" placeholder=\"hello@gmail.com\" size=\"md\" radius=\"md\" />\n        <PasswordInput label=\"Password\" placeholder=\"Your password\" mt=\"md\" size=\"md\" radius=\"md\" />\n        <Checkbox label=\"Keep me logged in\" mt=\"xl\" size=\"md\" />\n        <Button fullWidth mt=\"xl\" size=\"md\" radius=\"md\">\n          Login\n        </Button>\n\n        <Text ta=\"center\" mt=\"md\">\n          Don&apos;t have an account?{' '}\n          <Anchor href=\"#\" fw={500} onClick={(event) => event.preventDefault()}>\n            Register\n          </Anchor>\n        </Text>\n      </Paper>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a configuration for an authentication form with a title. It is part of a larger application or system that manages user authentication.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Authentication form with title\",\n  \"category\": \"authentication\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Fields:**\n\n* **title:** A string that specifies the title of the authentication form. In this case, it is \"Authentication form with title\".\n* **category:** A string that categorizes the form as \"authentication\".\n* **dimmed:** A boolean value that determines whether the form should be dimmed or not. When set to `true`, the form will appear with a darker overlay.\n* **canvas:** An object that contains configuration options for the form's layout.\n    * **center:** A boolean value that specifies whether the form should be centered within its container. In this case, it is set to `false`.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure an authentication form with the following characteristics:\n\n* A title that reads \"Authentication form with title\".\n* A dimmed overlay.\n* The form should not be centered within its container.\n\n**Usage:**\n\nThis JSON file can be used by an application or system to render an authentication form with the specified configuration. The file can be loaded and parsed using a JSON parser or other similar tool.\n\n**Example:**\n\nSuppose an application uses this JSON file to render an authentication form. When the form is rendered, it will have the following characteristics:\n\n* A title that reads \"Authentication form with title\".\n* A dimmed overlay.\n* The form will not be centered within its container.\n\n**Additional Notes:**\n\n* The configuration options in this file may vary depending on the specific application or system being used.\n* The `canvas` object may contain additional configuration options for the form's layout, such as padding, margin, and border.\n* The `category` field can be used to group related forms together for easy navigation.",
    "input": "",
    "output": "{\n  \"title\": \"Authentication form with title\",\n  \"category\": \"authentication\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines styles for two HTML elements: `h1` and `h2`. It is typically used to set the font family, font weight, color, and other visual properties of these elements.\n\n**Description:**\n\nThe file contains two CSS rules, each corresponding to a different HTML element:\n\n**1. .title:**\n\n- Sets the font family to `Outfit`, followed by the value of the `--mantine-font-family` CSS variable.\n- Sets the font weight to 500 (medium).\n\n**Example Usage:**\n\n```html\n<h1>My Title</h1>\n```\n\n**2. .subtitle:**\n\n- Sets the text color to the value of the `--mantine-color-dimmed` CSS variable, which is typically a lighter gray color.\n- Sets the font size to the value of the `--mantine-font-size-sm` CSS variable, which is typically a smaller size than the default font size.\n- Sets the text alignment to center.\n- Sets a margin-top of 5 pixels.\n\n**Example Usage:**\n\n```html\n<h2>My Subtitle</h2>\n```\n\n**Overall Effect:**\n\nThe CSS file defines styles that create a visually distinct title and subtitle pair. The title is set in a specific font family and weight, while the subtitle is a lighter color and smaller size with centered text alignment.\n\n**Additional Notes:**\n\n- The CSS variables `--mantine-font-family`, `--mantine-color-dimmed`, and `--mantine-font-size-sm` are assumed to be defined elsewhere in the CSS file or stylesheet.\n- The specific font family and color values may vary depending on the project's design preferences.\n- This file is typically included in the HTML document or linked as an external CSS file.",
    "input": "",
    "output": ".title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n}\n\n.subtitle {\n  color: var(--mantine-color-dimmed);\n  font-size: var(--mantine-font-size-sm);\n  text-align: center;\n  margin-top: 5px;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a React functional component named `AuthenticationTitle`. It is likely part of a web application or software application.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper` is imported from the `StoryWrapper` component located in the `components/StoryWrapper` directory.\n    * `attributes.json` is imported as a JavaScript object.\n    * `AuthenticationTitle` is imported as a React component.\n\n* **Component Definition:**\n    * The component is exported as an object with a `title` property set to `\"AuthenticationTitle\"`.\n\n* **Usage Function:**\n    * The `Usage` function is exported and defines how the component is used in a story.\n    * It renders a `StoryWrapper` component with the following properties:\n        * `attributes`: The `attributes.json` object.\n        * `component`: The `AuthenticationTitle` component.\n\n**Purpose:**\n\nThe purpose of this file is likely to be to display a title related to authentication or authorization in a user interface. The `AuthenticationTitle` component likely renders a title and may provide additional information or instructions.\n\n**Key Features:**\n\n* **StoryWrapper:** The `StoryWrapper` component is used to display the `AuthenticationTitle` component within a specific context.\n* **Attributes:** The `attributes.json` file provides additional information or props for the `AuthenticationTitle` component.\n* **Title:** The title is set to `\"AuthenticationTitle\"` and can be customized as needed.\n\n**Usage:**\n\nThe `Usage` function demonstrates how the `AuthenticationTitle` component is used within a story. It provides a complete example of how the component can be rendered and integrated into a larger application.\n\n**Conclusion:**\n\nThe file `AuthenticationTitle.js` is a React functional component that renders an authentication or authorization title in a user interface. It uses the `StoryWrapper` component and `attributes.json` to provide additional context and styling.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { AuthenticationTitle } from './AuthenticationTitle';\n\nexport default { title: 'AuthenticationTitle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={AuthenticationTitle} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `AuthenticationTitle.jsx` file is a React component that renders a form for user authentication. It includes fields for email, password, and a checkbox for remembering login credentials.\n\n**Functionality:**\n\n- **Container:** The component uses a `Container` component with a specified width (420px) and margin (40px).\n- **Title:** A `Title` component displays the text \"Welcome back!\".\n- **Subtitle:** A `Text` component provides a subtitle that invites users to create an account if they don't have one.\n- **Paper:** A `Paper` component serves as a container for the authentication form, with border, shadow, padding, margin, and rounded corners.\n- **TextInput:** Two `TextInput` components are used for email and password input.\n- **Checkbox:** A `Checkbox` component allows users to remember their login credentials.\n- **Anchor:** Two `Anchor` components are used for account creation and password recovery.\n- **Button:** A `Button` component serves as the submit button, with full width and rounded corners.\n\n**Style:**\n\nThe component uses a CSS module (`AuthenticationTitle.module.css`) to style the title, subtitle, and other elements.\n\n**Usage:**\n\nThe `AuthenticationTitle` component can be imported and rendered to display the authentication form.\n\n**Example:**\n\n```\n<AuthenticationTitle />\n```\n\n**Benefits:**\n\n- Provides a user-friendly interface for authentication.\n- Allows users to create new accounts or recover forgotten passwords.\n- Enhances user experience with features like remembering login credentials.\n\n**Additional Notes:**\n\n- The `@mantine/core` library provides the necessary Mantine components for the form.\n- The `classes` variable imports the CSS styles for the component.\n- The `required` prop ensures that both email and password fields are mandatory.\n- The `justify=\"space-between\"` prop in the `Group` component aligns the checkbox and password recovery link.",
    "input": "",
    "output": "import {\n  Anchor,\n  Button,\n  Checkbox,\n  Container,\n  Group,\n  Paper,\n  PasswordInput,\n  Text,\n  TextInput,\n  Title,\n} from '@mantine/core';\nimport classes from './AuthenticationTitle.module.css';\n\nexport function AuthenticationTitle() {\n  return (\n    <Container size={420} my={40}>\n      <Title ta=\"center\" className={classes.title}>\n        Welcome back!\n      </Title>\n\n      <Text className={classes.subtitle}>\n        Do not have an account yet? <Anchor>Create account</Anchor>\n      </Text>\n\n      <Paper withBorder shadow=\"sm\" p={22} mt={30} radius=\"md\">\n        <TextInput label=\"Email\" placeholder=\"you@mantine.dev\" required radius=\"md\" />\n        <PasswordInput label=\"Password\" placeholder=\"Your password\" required mt=\"md\" radius=\"md\" />\n        <Group justify=\"space-between\" mt=\"lg\">\n          <Checkbox label=\"Remember me\" />\n          <Anchor component=\"button\" size=\"sm\">\n            Forgot password?\n          </Anchor>\n        </Group>\n        <Button fullWidth mt=\"xl\" radius=\"md\">\n          Sign in\n        </Button>\n      </Paper>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Purpose:**\n\nThe JSON file you provided defines a configuration for an interactive element or component within a user interface. It specifies the title, category, and layout options for an autocomplete input field.\n\n**Title:**\n\n* `title`: \"Autocomplete async data\"\n\n**Category:**\n\n* `category`: \"inputs\"\n\n**Canvas Configuration:**\n\n* `canvas`:\n    * `center`: `true` - Indicates that the autocomplete input field should be centered horizontally within its container.\n    * `maxWidth`: `420` - Sets the maximum width of the autocomplete input field to 420 pixels.\n\n**Description:**\n\nThe file configures an autocomplete input field with the following characteristics:\n\n* **Title:** \"Autocomplete async data\"\n* **Category:** Inputs\n* **Centered layout:** The input field will be positioned in the center of its container.\n* **Maximum width:** 420 pixels\n\n**Usage:**\n\nThis JSON configuration file can be used to specify the properties of an autocomplete input field in a user interface framework or library. It can be loaded and applied to create the desired input field with the specified title, category, and layout options.\n\n**Additional Notes:**\n\n* The `center` property ensures that the autocomplete input field is positioned horizontally in the center of its container.\n* The `maxWidth` property sets a maximum width for the input field, preventing it from becoming too wide.\n* The specific implementation of this configuration may vary depending on the user interface framework or library being used.",
    "input": "",
    "output": "{\n  \"title\": \"Autocomplete async data\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**Filename:** AutocompleteLoading.jsx\n\n**Purpose:**\n\nThe AutocompleteLoading.jsx file is a React component that provides a loading state for an autocomplete field. It is used to indicate to the user that the data is being loaded and that they should wait for it to complete.\n\n**Functionality:**\n\n* **Imports:**\n    * `StoryWrapper` component from the `StoryWrapper` module.\n    * `attributes.json` file, which contains attributes for the `StoryWrapper`.\n    * `AutocompleteLoading` component from the current file.\n\n* **Default export:**\n    * Defines the title of the component as \"AutocompleteLoading\".\n\n* **Usage function:**\n    * Renders a `StoryWrapper` component with the following attributes:\n        * `attributes`: The attributes defined in the `attributes.json` file.\n        * `component`: The `AutocompleteLoading` component.\n\n**Attributes.json:**\n\nThe `attributes.json` file contains the attributes for the `StoryWrapper` component. It is used to provide additional information about the component, such as its title, description, and usage instructions.\n\n**Usage:**\n\nThe `Usage()` function renders a `StoryWrapper` component with the following configuration:\n\n* The `attributes` prop is set to the attributes defined in `attributes.json`.\n* The `component` prop is set to the `AutocompleteLoading` component.\n\n**Purpose of StoryWrapper:**\n\nThe `StoryWrapper` component is used to provide a convenient way to render and document React components. It takes the following props:\n\n* `attributes`: An object containing attributes for the component.\n* `component`: The React component to render.\n\n**Summary:**\n\nThe AutocompleteLoading.jsx file is a React component that provides a loading state for an autocomplete field. It is used to indicate to the user that the data is being loaded and that they should wait for it to complete. The component is wrapped in a `StoryWrapper` component to provide additional documentation and context.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { AutocompleteLoading } from './AutocompleteLoading';\n\nexport default { title: 'AutocompleteLoading' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={AutocompleteLoading} />;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe `AutocompleteLoading.js` file implements an autocompletion component with dynamic data retrieval. It allows users to input email addresses and suggests possible email addresses based on user input.\n\n**Components:**\n\n- **Autocomplete:** A Mantine component that provides an input field for user input.\n- **Loader:** A Mantine component that displays a loading indicator.\n\n**State Management:**\n\n- **value:** Stores the current user input.\n- **loading:** Indicates whether data is being loaded.\n- **data:** Stores the suggested email addresses based on user input.\n\n**Key Functionality:**\n\n- **Debounced Search:** The component uses a debouncing technique to delay data retrieval until the user has paused typing for 1 second. This improves performance by reducing unnecessary API calls.\n- **Data Retrieval:** When the user enters a valid email address, the component sends an API request to retrieve suggested email addresses.\n- **Loading Indicator:** A loader is displayed while the data is being retrieved.\n- **Suggestions Display:** Once the data is retrieved, the component displays the suggested email addresses in the autocompletion dropdown list.\n\n**Usage:**\n\n- The `AutocompleteLoading` component can be used to enable users to enter their email addresses.\n- The suggested email addresses are dynamically generated based on user input.\n- The component automatically handles the loading indicator and data retrieval process.\n\n**Example:**\n\nWhen a user types \"joh\" into the input field, the component will suggest the following email addresses:\n\n- john@gmail.com\n- john@outlook.com\n- john@yahoo.com\n\n**Benefits:**\n\n- Improved user experience with instant suggestions.\n- Reduced server load by debouncing API calls.\n- Enhanced user productivity by autocompleting email addresses.\n\n**Conclusion:**\n\nThe `AutocompleteLoading.js` file is a well-designed component that provides an efficient and user-friendly autocompletion experience for email address input. It handles data retrieval, loading indicators, and suggestions display seamlessly, making it an ideal solution for various applications where users need to enter email addresses.",
    "input": "",
    "output": "import { useRef, useState } from 'react';\nimport { Autocomplete, Loader } from '@mantine/core';\n\nexport function AutocompleteLoading() {\n  const timeoutRef = useRef<number>(-1);\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<string[]>([]);\n\n  const handleChange = (val: string) => {\n    window.clearTimeout(timeoutRef.current);\n    setValue(val);\n    setData([]);\n\n    if (val.trim().length === 0 || val.includes('@')) {\n      setLoading(false);\n    } else {\n      setLoading(true);\n      timeoutRef.current = window.setTimeout(() => {\n        setLoading(false);\n        setData(['gmail.com', 'outlook.com', 'yahoo.com'].map((provider) => `${val}@${provider}`));\n      }, 1000);\n    }\n  };\n  return (\n    <Autocomplete\n      value={value}\n      data={data}\n      onChange={handleChange}\n      rightSection={loading ? <Loader size={16} /> : null}\n      label=\"Async Autocomplete data\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON configuration file that defines the properties of a card with badges. It is used by an application or platform to render and display the card in a specific way.\n\n**Properties:**\n\n- **title:** The title of the card, which is displayed as a headline.\n- **category:** The category of the card, which is used for organizational purposes. In this case, the category is \"app-cards\".\n- **dimmed:** Indicates whether the card should be displayed with a dimmed effect. This is typically used to indicate that the card is disabled or inactive.\n- **canvas:** An object that defines the layout and styling of the card.\n    - **center:** Specifies whether the card should be centered horizontally.\n    - **maxWidth:** Sets the maximum width of the card in pixels.\n\n**Usage:**\n\nThis JSON configuration file is typically used by an application or platform to:\n\n- Define the properties of a card with badges.\n- Specify the layout and styling of the card.\n- Determine the category of the card.\n- Indicate whether the card is dimmed.\n\n**Example:**\n\nThe provided JSON configuration file defines a card with the following properties:\n\n- Title: Card with badges\n- Category: app-cards\n- Dimmed: true\n- Canvas:\n    - Centered horizontally\n    - Maximum width of 370 pixels\n\n**Conclusion:**\n\nThe JSON configuration file you have provided is a template for creating a card with badges in an application or platform. It specifies the title, category, dimmed status, and canvas properties of the card, allowing for customized rendering and display.",
    "input": "",
    "output": "{\n  \"title\": \"Card with badges\",\n  \"category\": \"app-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 370\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file appears to be a CSS stylesheet, likely written in the CSS preprocessor Sass. It defines a set of styles for a user interface, including colors, borders, paddings, font sizes, and more.\n\n**Styles:**\n\n- **.card:**\n    - Sets the background color of a card element using the `light-dark()` function to automatically choose between light and dark mode based on the user's preference.\n\n- **.section:**\n    - Defines the style of a section element, including:\n        - A border-bottom with a color set using the `light-dark()` function.\n        - Padding on the left, right, and bottom sides.\n\n- **.like:**\n    - Sets the color of an element with the class \"like\" to a red shade.\n    - Defines the width and height of the element.\n\n- **.label:**\n    - Sets the text-transform to uppercase.\n    - Defines the font size and font weight.\n\n**Purpose:**\n\nThe purpose of this CSS stylesheet is to provide a set of predefined styles for a user interface. These styles can be used to quickly and easily style elements within the interface, saving developers time and effort.\n\n**Key Features:**\n\n- Automatic dark mode support using `light-dark()` function.\n- Predefined colors, borders, paddings, font sizes, and other styles.\n- CSS variables (e.g., `--mantine-color-white`, `--mantine-spacing-md`) for flexibility and ease of customization.\n\n**Usage:**\n\nThe CSS stylesheet can be included in a web page using the `<link>` tag in the `<head>` section. The styles will then be applied to the elements in the HTML code.\n\n**Example:**\n\n```html\n<div class=\"card\">...</div>\n<div class=\"section\">...</div>\n<span class=\"like\">...</span>\n<label class=\"label\">...</label>\n```",
    "input": "",
    "output": ".card {\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\n}\n\n.section {\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n  padding-bottom: var(--mantine-spacing-md);\n}\n\n.like {\n  color: var(--mantine-color-red-6);\n  width: 20px;\n  height: 20px;\n}\n\n.label {\n  text-transform: uppercase;\n  font-size: var(--mantine-font-size-xs);\n  font-weight: 700;\n}\n"
  },
  {
    "instruction": "**File Name:** BadgeCard.jsx\n\n**Purpose:**\n\nThe `BadgeCard.jsx` file is a React component that serves as a template for displaying a badge card. It utilizes the `StoryWrapper` component to facilitate component documentation and rendering within a Storybook environment.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper` component from the `StoryWrapper` module.\n    * `attributes.json` file containing data used to render the badge card.\n    * `BadgeCard` component itself.\n\n* **Component Declaration:**\n    * `export default { title: 'BadgeCard' };` sets the title of the component as \"BadgeCard\" in the Storybook documentation.\n\n* **Usage Function:**\n    * `export function Usage()` defines a function named `Usage`.\n    * Inside the function:\n        * Renders a `StoryWrapper` component.\n        * Passes the `attributes` object and `BadgeCard` component as props to the `StoryWrapper`.\n\n**StoryWrapper Usage:**\n\nThe `StoryWrapper` component is responsible for rendering the `BadgeCard` component with the provided `attributes`. It provides a convenient way to showcase how the component behaves with different data and configurations.\n\n**attributes.json:**\n\nThe `attributes.json` file likely contains an object or JSON data that defines the properties and values used to render the badge card. This data includes things like the badge title, description, and image.\n\n**Purpose of Usage Function:**\n\nThe `Usage()` function creates a single instance of the `BadgeCard` component within the Storybook environment. This allows developers to preview and test the component with the provided data.\n\n**Overall Function:**\n\nThe `BadgeCard.jsx` file plays a crucial role in documenting and rendering the `BadgeCard` component within the Storybook framework. It provides a template for showcasing how the component functions with different attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { BadgeCard } from './BadgeCard';\n\nexport default { title: 'BadgeCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={BadgeCard} />;\n}\n"
  },
  {
    "instruction": "**BadgeCard.jsx**\n\nThis file represents a React component named `BadgeCard`. It renders a card that displays information about a beach destination, including its image, title, description, country, and a list of badges.\n\n**Functionality:**\n\n* **Imports:**\n    * The component imports necessary components from the `@tabler/icons-react` and `@mantine/core` libraries.\n    * It also imports a CSS module named `BadgeCard.module.css`.\n\n* **Data:**\n    * The component uses a `mockdata` object to provide dummy data for the beach destination.\n\n* **Rendering:**\n    * The component renders a `Card` component with the following sections:\n        * **Image Section:** Displays an image of the beach.\n        * **Description Section:** Shows the title, country, and description of the destination.\n        * **Features Section:** Lists badges representing the destination's features.\n        * **Action Section:** Includes a \"Show details\" button and a heart icon for liking.\n\n**CSS:**\n\n* The `BadgeCard.module.css` file likely contains CSS styles that customize the appearance of the component, such as margins, paddings, font sizes, and colors.\n\n**Features:**\n\n* The component displays a visually appealing and informative card.\n* It uses badges to categorize the destination's features.\n* It provides a call-to-action button for further information.\n\n**Usage:**\n\nThe `BadgeCard` component can be used to showcase beach destinations or any other similar items. It can be included in a list or grid layout to display multiple destinations.\n\n**Example:**\n\n```jsx\n<BadgeCard />\n```\n\n**Conclusion:**\n\nThe `BadgeCard.jsx` file defines a React component that represents a card for displaying beach destination information. It utilizes Mantine and Tabler components and CSS styles to create a visually appealing and informative UI element.",
    "input": "",
    "output": "import { IconHeart } from '@tabler/icons-react';\nimport { ActionIcon, Badge, Button, Card, Group, Image, Text } from '@mantine/core';\nimport classes from './BadgeCard.module.css';\n\nconst mockdata = {\n  image:\n    'https://images.unsplash.com/photo-1437719417032-8595fd9e9dc6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80',\n  title: 'Verudela Beach',\n  country: 'Croatia',\n  description:\n    'Completely renovated for the season 2020, Arena Verudela Bech Apartments are fully equipped and modernly furnished 4-star self-service apartments located on the Adriatic coastline by one of the most beautiful beaches in Pula.',\n  badges: [\n    { emoji: '☀️', label: 'Sunny weather' },\n    { emoji: '🦓', label: 'Onsite zoo' },\n    { emoji: '🌊', label: 'Sea' },\n    { emoji: '🌲', label: 'Nature' },\n    { emoji: '🤽', label: 'Water sports' },\n  ],\n};\n\nexport function BadgeCard() {\n  const { image, title, description, country, badges } = mockdata;\n  const features = badges.map((badge) => (\n    <Badge variant=\"light\" key={badge.label} leftSection={badge.emoji}>\n      {badge.label}\n    </Badge>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" p=\"md\" className={classes.card}>\n      <Card.Section>\n        <Image src={image} alt={title} height={180} />\n      </Card.Section>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Group justify=\"apart\">\n          <Text fz=\"lg\" fw={500}>\n            {title}\n          </Text>\n          <Badge size=\"sm\" variant=\"light\">\n            {country}\n          </Badge>\n        </Group>\n        <Text fz=\"sm\" mt=\"xs\">\n          {description}\n        </Text>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Text mt=\"md\" className={classes.label} c=\"dimmed\">\n          Perfect for you, if you enjoy\n        </Text>\n        <Group gap={7} mt={5}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Group mt=\"xs\">\n        <Button radius=\"md\" style={{ flex: 1 }}>\n          Show details\n        </Button>\n        <ActionIcon variant=\"default\" radius=\"md\" size={36}>\n          <IconHeart className={classes.like} stroke={1.5} />\n        </ActionIcon>\n      </Group>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file describes a user interface element called a \"Copy to Clipboard\" button.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Copy to Clipboard button\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 240\n  }\n}\n```\n\n**Properties:**\n\n* **title:** This property specifies the title of the button, which is displayed on the screen. In this case, the title is \"Copy to Clipboard button\".\n* **category:** This property categorizes the button as a \"buttons\" element.\n* **canvas:** This property defines the layout and behavior of the button within the user interface.\n\n**Canvas Properties:**\n\n* **center:** This property sets the button to be centered horizontally within its container.\n* **maxWidth:** This property sets the maximum width of the button to 240 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to define a button that allows users to copy text to their clipboard. When the button is clicked, the text associated with the button or its surrounding content will be copied to the clipboard.\n\n**Usage:**\n\nThis JSON file can be used in conjunction with a user interface framework to create an interactive element that enables users to copy text to their clipboard.\n\n**Example:**\n\n```\n<button data-json-file=\"copy-to-clipboard-button.json\">Copy to Clipboard</button>\n```\n\n**Conclusion:**\n\nThe JSON file provides a description of a \"Copy to Clipboard\" button, including its title, category, and canvas properties. This file can be used to create an interactive user interface element that allows users to copy text to their clipboard.",
    "input": "",
    "output": "{\n  \"title\": \"Copy to clipboard button\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 240\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ButtonCopy.jsx\n\n**Purpose:**\n\nThe ButtonCopy.jsx file is a React component that serves as a copy button. It is part of a storybook application used to showcase and test the component.\n\n**Functionality:**\n\n- Imports necessary components and data:\n   - `StoryWrapper`: A component used to display the ButtonCopy component with given attributes.\n   - `attributes.json`: A JSON file containing the attributes for the ButtonCopy component.\n   - `ButtonCopy`: The component itself.\n\n- Exports a default object with a title: `ButtonCopy`.\n- Defines a `Usage` function that renders the `StoryWrapper` component with the following properties:\n   - `attributes`: The data from `attributes.json`.\n   - `component`: The `ButtonCopy` component.\n\n**Usage:**\n\n- The `Usage` function renders the `ButtonCopy` component with the attributes specified in `attributes.json`.\n- The `StoryWrapper` component provides a structured environment for testing and displaying the component.\n\n**Key Points:**\n\n- The component is designed to be used as a copy button.\n- It receives attributes through the `attributes` prop of the `StoryWrapper`.\n- The `ButtonCopy` component is likely responsible for handling copy operations when the button is clicked.\n- The `attributes.json` file likely contains configuration options for the copy button, such as the text to be copied.\n\n**Purpose of Storybook:**\n\nStorybook is a tool that helps developers create and document React components. It allows them to easily preview and test their components in different environments. In this case, the ButtonCopy component is being tested and documented using storybook.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ButtonCopy } from './ButtonCopy';\n\nexport default { title: 'ButtonCopy' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ButtonCopy} />;\n}\n"
  },
  {
    "instruction": "**ButtonCopy.js**\n\n**Purpose:**\n\nThe `ButtonCopy.js` file creates a button that allows users to copy a specific link to their clipboard.\n\n**Functionality:**\n\n* Imports necessary components from the `@tabler/icons-react`, `@mantine/core`, and `@mantine/hooks` libraries.\n* Uses the `useClipboard` hook from `@mantine/hooks` to track whether the link has been copied to the clipboard.\n* Renders a `Button` component with the following features:\n    * A label that indicates whether the link has been copied (\"Copy link to clipboard\" when not copied, \"Link copied!\" when copied).\n    * An icon that changes based on whether the link has been copied (a copy icon when not copied, a check icon when copied).\n    * A click event handler that copies the specified link (\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\") to the clipboard using the `useClipboard` hook.\n    * A `Tooltip` component that displays a message when the link is copied.\n\n**Code Breakdown:**\n\n* **Import Section:**\n    * Imports the `IconCheck`, `IconCopy` icons from the `@tabler/icons-react` library.\n    * Imports the `Button`, `Tooltip` components from the `@mantine/core` library.\n    * Imports the `useClipboard` hook from the `@mantine/hooks` library.\n\n* **Function Definition:**\n    * Defines a `ButtonCopy` function that returns the UI component.\n\n* **UI Component:**\n    * Renders a `Tooltip` component with the following props:\n        * `label`: \"Link copied!\"\n        * `offset`: 5\n        * `position`: \"bottom\"\n        * `radius`: \"xl\"\n        * `transitionProps`: { duration: 100, transition: 'slide-down' }\n        * `opened`: `clipboard.copied` (controls the visibility of the tooltip)\n    * Renders a `Button` component with the following props:\n        * `variant`: \"light\"\n        * `rightSection`: Icon that changes based on `clipboard.copied`\n        * `radius`: \"xl\"\n        * `size`: \"md\"\n        * `pr`: 14\n        * `h`: 48\n        * `styles`: { section: { marginLeft: 22 } }\n        * `onClick`: Copies the link to the clipboard using `clipboard.copy()`\n    * The button label is \"Copy link to clipboard\".\n\n**Usage:**\n\nThis component can be used in a React application to provide a copy link functionality. When the user clicks the button, the specified link will be copied to their clipboard.",
    "input": "",
    "output": "import { IconCheck, IconCopy } from '@tabler/icons-react';\nimport { Button, Tooltip } from '@mantine/core';\nimport { useClipboard } from '@mantine/hooks';\n\nexport function ButtonCopy() {\n  const clipboard = useClipboard();\n  return (\n    <Tooltip\n      label=\"Link copied!\"\n      offset={5}\n      position=\"bottom\"\n      radius=\"xl\"\n      transitionProps={{ duration: 100, transition: 'slide-down' }}\n      opened={clipboard.copied}\n    >\n      <Button\n        variant=\"light\"\n        rightSection={\n          clipboard.copied ? (\n            <IconCheck size={20} stroke={1.5} />\n          ) : (\n            <IconCopy size={20} stroke={1.5} />\n          )\n        }\n        radius=\"xl\"\n        size=\"md\"\n        pr={14}\n        h={48}\n        styles={{ section: { marginLeft: 22 } }}\n        onClick={() => clipboard.copy('https://www.youtube.com/watch?v=dQw4w9WgXcQ')}\n      >\n        Copy link to clipboard\n      </Button>\n    </Tooltip>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines a user interface element called a \"Button with menu\".\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Button with menu\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 120\n  }\n}\n```\n\n**Key Features:**\n\n- **Title:** \"Button with menu\"\n- **Category:** \"buttons\"\n- **Canvas:**\n    - **center:** Set to `true`, indicating that the element should be centered horizontally.\n    - **maxWidth:** Set to `120`, specifying the maximum width of the element.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define a specific user interface element with the following characteristics:\n\n- A button that can be clicked.\n- A menu that will appear when the button is clicked.\n- The button will be centered horizontally and have a maximum width of 120 pixels.\n\n**Usage:**\n\nThis configuration file can be used to create a user interface element with the specified characteristics. The element can be embedded into other HTML or JavaScript code to provide interactive functionality.\n\n**Example:**\n\n```html\n<button id=\"myButton\">Button with Menu</button>\n\n<script>\n// JavaScript code to create the menu and handle button clicks\n// ...\n</script>\n```\n\n**Note:**\n\nThe JavaScript code required to implement the menu and handle button clicks is not included in this file. It would need to be added separately based on the specific requirements of the application.",
    "input": "",
    "output": "{\n  \"title\": \"Button with menu\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 120\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ButtonMenu.js\n\n**Purpose:**\n\nThe ButtonMenu.js file is a React component that uses the StoryWrapper component to render a ButtonMenu component with predefined attributes.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper` from the `StoryWrapper` component.\n    * `attributes.json` containing the predefined attributes for the ButtonMenu.\n    * `ButtonMenu` from the current file.\n* **Default Export:**\n    * An object with the title `ButtonMenu`.\n* **Usage Function:**\n    * Returns a `StoryWrapper` component with the following props:\n        * `attributes`: The predefined attributes from `attributes.json`.\n        * `component`: The `ButtonMenu` component.\n\n**Usage:**\n\nThe `Usage()` function renders a `StoryWrapper` component with the following components:\n\n* `ButtonMenu`: The ButtonMenu component with the predefined attributes.\n\n**Purpose of ButtonMenu Component:**\n\nThe ButtonMenu component is responsible for displaying a menu of buttons. The predefined attributes in `attributes.json` specify the following:\n\n* Button labels\n* Button click events\n\n**StoryWrapper Component:**\n\nThe `StoryWrapper` component provides a convenient way to render a React component with predefined attributes. It receives the `attributes` prop and passes it to the `component` prop as props to the component being rendered.\n\n**Overall Functionality:**\n\nThe ButtonMenu.js file uses the StoryWrapper component to render a ButtonMenu component with predefined attributes. This allows developers to easily preview and test the component with different configurations.\n\n**Additional Notes:**\n\n* The `attributes.json` file can be used to define any additional attributes that may be needed for the ButtonMenu component.\n* The `ButtonMenu` component can be further customized to add additional features or functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ButtonMenu } from './ButtonMenu';\n\nexport default { title: 'ButtonMenu' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ButtonMenu} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `ButtonMenu.jsx` file is a React component that creates a dropdown menu with options to create new project, task, team, and event.\n\n**Functionality:**\n\n- The component uses the `@tabler/icons-react` and `@mantine/core` libraries for styling and icon rendering.\n- It renders a `Button` element as the menu target, which displays the text \"Create new\" and an arrow icon.\n- When the user clicks on the target button, a dropdown menu appears positioned above it.\n- The dropdown menu contains four menu items, each representing a different type of new item:\n    - Project\n    - Task\n    - Team\n    - Event\n- Each menu item has a left section that displays an icon corresponding to the item type.\n- The right section of each menu item shows a keyboard shortcut for creating the item.\n- The menu uses the `transitionProps` prop to specify a transition effect when it opens and closes.\n\n**Usage:**\n\nThe `ButtonMenu` component can be used to allow users to easily create new project, task, team, and event items. It can be integrated into any React application or website.\n\n**Example:**\n\n```\n<ButtonMenu />\n```\n\n**Key Features:**\n\n- Dropdown menu with four options.\n- Icons for each menu item.\n- Keyboard shortcuts for creating new items.\n- Transition effect for smooth opening and closing.\n\n**Benefits:**\n\n- Improves user experience by providing an easy way to create new items.\n- Saves time and effort by reducing the need to manually enter information.\n- Enhances productivity and efficiency.\n\n**Target Audience:**\n\n- Users who need to create new project, task, team, and event items.\n- Anyone who wants to improve their productivity.",
    "input": "",
    "output": "import {\n  IconCalendar,\n  IconChevronDown,\n  IconPackage,\n  IconSquareCheck,\n  IconUsers,\n} from '@tabler/icons-react';\nimport { Button, Menu, Text, useMantineTheme } from '@mantine/core';\n\nexport function ButtonMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Menu\n      transitionProps={{ transition: 'pop-top-right' }}\n      position=\"top-end\"\n      width={220}\n      withinPortal\n      radius=\"md\"\n    >\n      <Menu.Target>\n        <Button rightSection={<IconChevronDown size={18} stroke={1.5} />} pr={12} radius=\"md\">\n          Create new\n        </Button>\n      </Menu.Target>\n      <Menu.Dropdown>\n        <Menu.Item\n          leftSection={<IconPackage size={16} color={theme.colors.blue[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n              Ctrl + P\n            </Text>\n          }\n        >\n          Project\n        </Menu.Item>\n        <Menu.Item\n          leftSection={<IconSquareCheck size={16} color={theme.colors.pink[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n              Ctrl + T\n            </Text>\n          }\n        >\n          Task\n        </Menu.Item>\n        <Menu.Item\n          leftSection={<IconUsers size={16} color={theme.colors.cyan[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n              Ctrl + U\n            </Text>\n          }\n        >\n          Team\n        </Menu.Item>\n        <Menu.Item\n          leftSection={<IconCalendar size={16} color={theme.colors.violet[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n              Ctrl + E\n            </Text>\n          }\n        >\n          Event\n        </Menu.Item>\n      </Menu.Dropdown>\n    </Menu>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe JSON file you provided defines a user interface element called a \"button\" with additional configuration options. It specifies the title, category, and layout properties of the button.\n\n**File Structure:**\n\n**title:**\n- The title of the button, which will be displayed on the user interface.\n- In this case, the title is \"Button with loading progress\".\n\n**category:**\n- The category of the button, which is \"buttons\".\n- This helps organize and categorize the button within the user interface.\n\n**canvas:**\n- An object that specifies the layout and styling of the button.\n\n**center:**\n- A boolean value that determines whether the button should be centered horizontally.\n- In this case, the value is set to `true`, indicating that the button should be centered.\n\n**maxWidth:**\n- The maximum width of the button.\n- In this case, the value is set to 220, which specifies the maximum width of the button.\n\n**Additional Notes:**\n\n- The file is a JSON object, which is a data exchange format used to represent data in a structured way.\n- The `start_of_turn` tags are not part of the JSON syntax and are likely used as a markup or command in a specific context.\n- The configuration options specified in the file can be used to customize the appearance, behavior, and layout of the button in the user interface.\n\n**Purpose of the File:**\n\nThe purpose of this JSON file is to define a button with the following characteristics:\n\n- Title: Button with loading progress\n- Category: buttons\n- Centered horizontally\n- Maximum width of 220 pixels\n\nThe configuration options specified in the file can be used to create a button that can be used to trigger an action with a loading progress indicator.",
    "input": "",
    "output": "{\n  \"title\": \"Button with loading progress\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 220\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThis CSS file defines styles for a button element with a progress bar and a label.\n\n**Key Styles:**\n\n**`.button`:**\n- Positioned relatively to allow for absolute positioning of child elements.\n- Transforms the background color of the button with a transition duration of 150 milliseconds and an ease easing function.\n\n**`.progress`:**\n- Positioned absolutely to fill the entire button area.\n- Has a negative margin of -1px to ensure it overlaps the button's border.\n- Auto-adjusts its height to fit the content.\n- Background color is transparent.\n- Has a lower z-index than the label to ensure it is hidden behind the label.\n\n**`.label`:**\n- Positioned relatively to ensure it sits on top of the progress bar.\n- Has a higher z-index than the progress bar to ensure it is displayed on top.\n\n**Purpose:**\n\nThe purpose of this CSS file is to style a button element that displays a progress bar and a label. The progress bar visually indicates the progress of an action or task associated with the button. The label provides additional context or information about the button.\n\n**Usage:**\n\nTo use this CSS file, simply include it in the HTML document where the button element is located. The styles will automatically be applied to the button and its child elements.\n\n**Example:**\n\n```html\n<button class=\"button\">\n  <div class=\"progress\"></div>\n  <span class=\"label\">Loading...</span>\n</button>\n```\n\n**Note:**\n\n- The specific values for the `transition`, `background-color`, and `z-index` properties can be customized as needed.\n- The `label` element can contain any text or content that is relevant to the button.",
    "input": "",
    "output": ".button {\n  position: relative;\n  transition: background-color 150ms ease;\n}\n\n.progress {\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  right: -1px;\n  bottom: -1px;\n  height: auto;\n  background-color: transparent;\n  z-index: 0;\n}\n\n.label {\n  position: relative;\n  z-index: 1;\n}\n"
  },
  {
    "instruction": "**File Name:** ButtonProgress.js\n\n**Purpose:**\n\nThe ButtonProgress.js file is a React component that renders a progress bar with buttons. It is likely part of a user interface or application that requires tracking progress and providing interactive elements.\n\n**Description:**\n\n* **Import Statements:**\n    * `StoryWrapper` component from the `StoryWrapper` module.\n    * `attributes.json` file containing attributes for the component.\n    * `ButtonProgress` component from the current file.\n* **Default Export:**\n    * Exports an object with the title `ButtonProgress`.\n* **Usage Function:**\n    * Renders a `StoryWrapper` component with the following props:\n        * `attributes`: The attributes defined in the `attributes.json` file.\n        * `component`: The `ButtonProgress` component.\n\n**ButtonProgress Component:**\n\n* The `ButtonProgress` component likely renders the following elements:\n    * A progress bar that indicates the current progress.\n    * Buttons that allow users to navigate through the progress steps.\n\n**attributes.json:**\n\nThe `attributes.json` file likely contains configuration options for the `ButtonProgress` component, such as:\n\n* Progress steps\n* Button labels\n* Progress bar styles\n\n**Purpose of ButtonProgress Component:**\n\nThe ButtonProgress component is likely used to:\n\n* Track progress through a workflow or task list.\n* Provide navigation buttons to move forward or backward in the progress.\n* Display feedback or alerts based on the user's progress.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for testing or documentation purposes.\n* The specific functionality of the ButtonProgress component may vary depending on the implementation in the codebase.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ButtonProgress } from './ButtonProgress';\n\nexport default { title: 'ButtonProgress' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ButtonProgress} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ButtonProgress.js\n\n**Purpose:**\n\nThe file is a React functional component that creates a button with a progress bar that simulates the process of uploading files.\n\n**Functionality:**\n\n- **State Management:**\n    - `progress`: Stores the current progress percentage (0-100).\n    - `loaded`: Indicates whether the files have been uploaded (true) or not (false).\n\n- **Interval Hook:**\n    - Uses the `useInterval` hook to periodically update the progress value.\n    - The interval duration is set to 20 milliseconds.\n    - The progress is incremented by 1 until it reaches 100%.\n    - Once complete, the interval is stopped, and the `loaded` state is set to true.\n\n- **Button Functionality:**\n    - The button has two states:\n        - **Initial state:** Disables the button and displays a message to upload files.\n        - **Progress state:** Shows a progress bar and indicates the current progress.\n        - **Completed state:** Disables the button, shows a success message, and hides the progress bar.\n    - Clicking the button toggles between these states.\n    - If the files are not loaded, the interval is started to simulate the upload process.\n    - If the files are loaded, the interval is stopped, and the success message is displayed.\n\n**Rendering:**\n\n- The component renders a Button component with the following features:\n    - Full width and rounded corners.\n    - Different colors based on the state (initial, progress, completed).\n    - A label that changes depending on the state.\n    - A Progress component that shows the current progress.\n\n**CSS Class:**\n\n- The `ButtonProgress.module.css` file likely defines styles for the button, progress bar, and label.\n\n**Usage:**\n\nThis component can be used to simulate file uploads in a React application. It provides a visually appealing and interactive way to provide feedback to users during the upload process.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { Button, Progress, rgba, useMantineTheme } from '@mantine/core';\nimport { useInterval } from '@mantine/hooks';\nimport classes from './ButtonProgress.module.css';\n\nexport function ButtonProgress() {\n  const theme = useMantineTheme();\n  const [progress, setProgress] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  const interval = useInterval(\n    () =>\n      setProgress((current) => {\n        if (current < 100) {\n          return current + 1;\n        }\n\n        interval.stop();\n        setLoaded(true);\n        return 0;\n      }),\n    20\n  );\n\n  return (\n    <Button\n      fullWidth\n      className={classes.button}\n      onClick={() => (loaded ? setLoaded(false) : !interval.active && interval.start())}\n      color={loaded ? 'teal' : theme.primaryColor}\n      radius=\"md\"\n    >\n      <div className={classes.label}>\n        {progress !== 0 ? 'Uploading files' : loaded ? 'Files uploaded' : 'Upload files'}\n      </div>\n      {progress !== 0 && (\n        <Progress\n          value={progress}\n          className={classes.progress}\n          color={rgba(theme.colors.blue[2], 0.35)}\n          radius=\"sm\"\n        />\n      )}\n    </Button>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file provided describes a card with a gradient border.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with gradient border\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 360\n  }\n}\n```\n\n**File Properties:**\n\n- **title:** The title of the card is \"Card with gradient border\".\n- **category:** The category of the card is \"article-cards\".\n- **dimmed:** The card is dimmed, indicating that it may be inactive or disabled.\n- **canvas:**\n    - **center:** The card is centered within the available space.\n    - **maxWidth:** The maximum width of the card is set to 360 pixels.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define the configuration of a card with a gradient border. The card will be displayed within an article layout with the following characteristics:\n\n- A title that reads \"Card with gradient border\".\n- A dimmed appearance.\n- A centered layout.\n- A maximum width of 360 pixels.\n\n**Usage:**\n\nThis JSON file can be used to configure a card with a gradient border in a content management system or website. The file can be imported or referenced by the relevant code or template to render the card with the specified properties.\n\n**Additional Notes:**\n\n- The gradient border is not explicitly defined in the JSON file. It is assumed to be applied through CSS or other styling techniques.\n- The \"canvas\" property provides additional layout options for the card, such as centering and setting a maximum width.\n- The \"dimmed\" property can be used to indicate that the card is inactive or disabled.",
    "input": "",
    "output": "{\n  \"title\": \"Card with gradient border\",\n  \"category\": \"article-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 360\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines a CSS class named `.card` that styles a card element.\n\n**Purpose:**\n\nThe purpose of this CSS class is to provide a visually appealing and interactive card element with the following features:\n\n- A subtle hover effect that increases the box shadow and scales the card slightly.\n- A decorative left border with a gradient background.\n- A pointer cursor to indicate that the card is interactive.\n\n**CSS Code:**\n\n```css\n.card {\n  position: relative;\n  cursor: pointer;\n  overflow: hidden;\n  transition:\n    transform 150ms ease,\n    box-shadow 100ms ease;\n  padding: var(--mantine-spacing-xl);\n  padding-left: calc(var(--mantine-spacing-xl) * 1.5);\n\n  @mixin hover {\n    box-shadow: var(--mantine-shadow-sm);\n    transform: scale(1.01);\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 6px;\n    background-image: linear-gradient(\n      0,\n      var(--mantine-color-pink-6),\n      var(--mantine-color-orange-6)\n    );\n  }\n}\n```\n\n**Key Features:**\n\n- **Position and Overflow:** The card is positioned relatively, with overflow set to hidden to prevent content from spilling outside its bounds.\n- **Cursor:** The cursor property is set to pointer to indicate interactivity.\n- **Transitions:** The `transition` property defines smooth transitions for the `transform` and `box-shadow` properties on hover.\n- **Padding:** The card has padding on all sides, with an additional left padding that is 50% larger.\n- **Hover Effect:** The `@mixin hover` pseudoclass defines the hover effect, which includes a box shadow and a slight scale transformation.\n- **Left Border:** A pseudo-element with a linear gradient background is positioned absolutely on the left side of the card, serving as the decorative border.\n\n**Usage:**\n\nThis CSS class can be applied to any HTML element to style it as a card with the specified features. For example:\n\n```html\n<div class=\"card\">\n  <!-- Card content -->\n</div>\n```",
    "input": "",
    "output": ".card {\n  position: relative;\n  cursor: pointer;\n  overflow: hidden;\n  transition:\n    transform 150ms ease,\n    box-shadow 100ms ease;\n  padding: var(--mantine-spacing-xl);\n  padding-left: calc(var(--mantine-spacing-xl) * 1.5);\n\n  @mixin hover {\n    box-shadow: var(--mantine-shadow-sm);\n    transform: scale(1.01);\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 6px;\n    background-image: linear-gradient(\n      0,\n      var(--mantine-color-pink-6),\n      var(--mantine-color-orange-6)\n    );\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CardGradient.js\n\n**Purpose:**\n\nThe CardGradient.js file is a React component that represents a card gradient. It is part of a storybook application that is used to showcase and document the design of various UI components.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the CardGradient component and provides additional functionality, such as rendering attributes and handling events.\n* **CardGradient:** The main component that represents the card gradient.\n\n**File Structure:**\n\n* **import statements:** Import necessary components and files.\n* **default export:** Export an object with the title 'CardGradient'.\n* **Usage function:** Defines a function that renders the CardGradient component within a StoryWrapper with the provided attributes.\n\n**How the File Works:**\n\n1. **Imports:** The file imports the necessary components and files, including the StoryWrapper, attributes.json, and CardGradient components.\n\n2. **Default Export:** The default export provides a title for the storybook documentation.\n\n3. **Usage Function:**\n   * Creates an instance of the StoryWrapper component.\n   * Sets the `attributes` prop to an object loaded from the attributes.json file.\n   * Sets the `component` prop to the CardGradient component.\n   * Returns the StoryWrapper component with the configured settings.\n\n**Purpose of the CardGradient Component:**\n\nThe CardGradient component is likely responsible for rendering a visually appealing gradient effect on a card. It may be used to enhance the visual hierarchy and draw attention to specific content.\n\n**Storybook Usage:**\n\nThe CardGradient.js file is part of a storybook application. Storybook is a tool that allows developers to easily document and showcase their UI components.\n\n**Additional Notes:**\n\n* The attributes.json file likely contains configuration options for the CardGradient component, such as the gradient colors and styles.\n* The CardGradient component may be used in conjunction with other components to create a complete card layout.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CardGradient } from './CardGradient';\n\nexport default { title: 'CardGradient' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CardGradient} />;\n}\n"
  },
  {
    "instruction": "**File Name:** CardGradient.js\n\n**Description:**\n\nThe `CardGradient.js` file creates a React component called `CardGradient`. This component renders a card with a gradient background, an icon, and some text.\n\n**Components:**\n\n- **Paper:** A Mantine component that provides a container with a border, radius, and padding.\n- **ThemeIcon:** A Mantine component that renders an icon with a gradient background.\n- **IconColorSwatch:** A Tabler icon that represents a color swatch.\n- **Text:** Mantine components for displaying text with different styles.\n\n**Code Breakdown:**\n\n- The component imports necessary components from the `@tabler/icons-react` and `@mantine/core` libraries.\n- It imports a CSS module called `CardGradient.module.css` for styling.\n- The `CardGradient` function defines the component's render logic.\n- Inside the `return` statement, it renders the following elements:\n    - A `Paper` component with a border, radius, and class name `card`.\n    - A `ThemeIcon` component with the following props:\n        - `size`: \"xl\"\n        - `radius`: \"md\"\n        - `variant`: \"gradient\"\n        - `gradient`: An object specifying the gradient direction (deg: 0) and colors (from: \"pink\", to: \"orange\").\n        - An `IconColorSwatch` component with size and stroke properties.\n    - A `Text` component with the following props:\n        - `size`: \"xl\"\n        - `fw`: 500\n        - `mt`: \"md\"\n        - The text \"Theming documentation\"\n    - Another `Text` component with the following props:\n        - `size`: \"sm\"\n        - `mt`: \"sm\"\n        - `c`: \"dimmed\"\n        - A long paragraph of text explaining how to extend the default theme, replace styles, and build custom components.\n\n**Purpose:**\n\nThe `CardGradient.js` component is likely used to display themed documentation or information in a visually appealing and informative way.\n\n**Additional Notes:**\n\n- The CSS module `CardGradient.module.css` likely defines styles for the card component, such as background color and padding.\n- The specific values used in the component can be customized to match the desired design and content.",
    "input": "",
    "output": "import { IconColorSwatch } from '@tabler/icons-react';\nimport { Paper, Text, ThemeIcon } from '@mantine/core';\nimport classes from './CardGradient.module.css';\n\nexport function CardGradient() {\n  return (\n    <Paper withBorder radius=\"md\" className={classes.card}>\n      <ThemeIcon\n        size=\"xl\"\n        radius=\"md\"\n        variant=\"gradient\"\n        gradient={{ deg: 0, from: 'pink', to: 'orange' }}\n      >\n        <IconColorSwatch size={28} stroke={1.5} />\n      </ThemeIcon>\n      <Text size=\"xl\" fw={500} mt=\"md\">\n        Theming documentation\n      </Text>\n      <Text size=\"sm\" mt=\"sm\" c=\"dimmed\">\n        Extend default theme with any amount of additional colors, replace shadows, radius, spacing,\n        fonts and many other properties to match your design requirements. Mantine theme is just an\n        object, you can subscribe to it in any part of application via context and use it to build\n        your own components.\n      </Text>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the parameters for a carousel with cards. It is used to configure the layout, functionality, and responsiveness of the carousel on a website or web application.\n\n**File Structure:**\n\nThe JSON object contains the following key-value pairs:\n\n* **title:** The title of the carousel, which is displayed as a header or caption.\n* **category:** The category of the carousel, which can be used for organizational purposes.\n* **changelog:** The date or version number of the carousel configuration.\n* **responsive:** A boolean value that indicates whether the carousel is responsive to different screen sizes.\n* **canvas:** An object that defines the canvas settings for the carousel.\n\n**Canvas Settings:**\n\n* **center:** A boolean value that specifies whether the carousel should be centered within its container.\n* **maxWidth:** The maximum width of the carousel in pixels.\n\n**Example Usage:**\n\n```json\n{\n  \"title\": \"Carousel with cards\",\n  \"category\": \"carousels\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 820\n  }\n}\n```\n\n**Purpose:**\n\nThe purpose of this configuration file is to:\n\n* Define the layout and functionality of a carousel with cards.\n* Specify the canvas settings, such as centering and maximum width.\n* Ensure responsiveness across different screen sizes.\n\n**Additional Notes:**\n\n* The carousel with cards is likely part of a larger web application or website.\n* The configuration file may be used by a JavaScript library or framework to render the carousel.\n* The values in the file can be customized to suit the specific needs of the project.",
    "input": "",
    "output": "{\n  \"title\": \"Carousel with cards\",\n  \"category\": \"carousels\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 820\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines the styles for a card element. The card is a rectangular container that displays information about a topic.\n\n**Purpose:**\n\nThe primary purpose of this file is to style the card element, including its layout, typography, and visual elements.\n\n**Structure:**\n\nThe file consists of three CSS rules:\n\n- `.card`: Defines the overall layout and style of the card.\n- `.title`: Styles the title element within the card.\n- `.category`: Styles the category element within the card.\n\n**CSS Rules:**\n\n**1. `.card`:**\n\n- **Height:** Sets the height of the card to 440 pixels.\n- **Display:** Specifies the display type as a flexbox container.\n- **Flex-direction:** Arranges the child elements (title and category) in a column layout.\n- **Justify-content:** Distributes the elements vertically with space between them.\n- **Align-items:** Aligns the elements to the start of the flex container.\n- **Background-size:** Sets the background image to cover the entire card.\n- **Background-position:** Positions the background image at the center of the card.\n\n**2. `.title`:**\n\n- **Font-family:** Specifies the font family as Outfit, sans-serif.\n- **Font-weight:** Sets the font weight to 600 (semi-bold).\n- **Color:** Sets the text color to white.\n- **Line-height:** Sets the line spacing to 1.2.\n- **Font-size:** Sets the font size to 32 pixels.\n- **Margin-top:** Adds a small margin to the top of the title.\n\n**3. `.category`:**\n\n- **Color:** Sets the text color to white.\n- **Opacity:** Adjusts the opacity of the text to 0.7, making it slightly transparent.\n- **Font-weight:** Sets the font weight to 700 (bold).\n- **Text-transform:** Capitalizes the first letter of each word in the category text.\n\n**Overall Effect:**\n\nThe CSS file creates a visually appealing and informative card with a title, category, and background image. The card layout is optimized for readability and responsiveness.",
    "input": "",
    "output": ".card {\n  height: 440px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  background-size: cover;\n  background-position: center;\n}\n\n.title {\n  font-family: Outfit, sans-serif;\n  font-weight: 600;\n  color: var(--mantine-color-white);\n  line-height: 1.2;\n  font-size: 32px;\n  margin-top: var(--mantine-spacing-xs);\n}\n\n.category {\n  color: var(--mantine-color-white);\n  opacity: 0.7;\n  font-weight: 700;\n  text-transform: uppercase;\n}\n"
  },
  {
    "instruction": "**File Name:** CardsCarousel.js\n\n**Purpose:**\n\nThe `CardsCarousel.js` file is a React component that represents a carousel of cards. It is part of a storybook application that allows developers to preview and interact with the component.\n\n**Functionality:**\n\n* **Imports:**\n    * `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper.js`.\n    * `attributes.json` file containing the attributes for the component.\n    * `CardsCarousel` component from the current file.\n\n* **Default Export:**\n    * Defines a React component with a title of `CardsCarousel`.\n\n* **Usage Function:**\n    * Creates a `StoryWrapper` component with the following properties:\n        * `attributes`: The attributes defined in the `attributes.json` file.\n        * `component`: The `CardsCarousel` component.\n\n**How to Use:**\n\nThe `CardsCarousel.js` file can be used in a storybook application to preview and interact with the `CardsCarousel` component.\n\n**Steps:**\n\n1. Import the `CardsCarousel.js` file into a storybook story.\n2. Use the `StoryWrapper` component to render the `CardsCarousel` component with the specified attributes.\n\n**Example:**\n\n```\nimport { CardsCarousel } from './CardsCarousel';\n\nconst MyStory = () => {\n  return <StoryWrapper attributes={attributes} component={CardsCarousel} />;\n};\n\nexport default MyStory;\n```\n\n**Additional Notes:**\n\n* The `attributes.json` file contains the configuration for the `CardsCarousel` component, such as the number of cards, their attributes, and any other necessary settings.\n* The `StoryWrapper` component is a utility component that provides additional functionality to the `CardsCarousel` component, such as rendering it with the specified attributes and handling user interactions.\n* The `Usage()` function is used to render the `CardsCarousel` component in the storybook application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CardsCarousel } from './CardsCarousel';\n\nexport default { title: 'CardsCarousel' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CardsCarousel} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet creates a carousel component that displays a collection of cards with images, titles, and categories. The carousel allows users to navigate between these cards using navigation arrows.\n\n**Functionality:**\n\n- The code imports necessary Mantine components, including Carousel, Paper, Text, Title, Button, and useMantineTheme.\n- It defines an interface `CardProps` to represent the data for each card.\n- The `Card` function renders a single card with an image, title, and category.\n- The `data` array contains an array of card data objects.\n- The `CardsCarousel` function creates the carousel component.\n    - It uses `useMantineTheme` to get the theme configuration.\n    - It uses `useMediaQuery` to determine if the screen size is small (mobile).\n    - It maps the `data` array to an array of `Carousel.Slide` components, each containing a `Card` component.\n    - It sets the carousel options, including slide size, gap, and navigation behavior based on screen size.\n    - It renders the carousel with the array of `Carousel.Slide` components.\n\n**Output:**\n\nThe code results in a carousel component with six cards, each displaying an image, title, and category. The carousel allows users to navigate between these cards using navigation arrows.\n\n**Additional Notes:**\n\n- The code uses Mantine, a React UI library, to create the carousel and other UI components.\n- The `Carousel` component from Mantine is used to implement the carousel functionality.\n- The `useMediaQuery` hook is used to detect screen size and adjust the carousel behavior accordingly.\n- The `className` prop is used to apply CSS styles to the cards and carousel.\n- The `onClick` prop can be used to add click event listeners to the cards.",
    "input": "",
    "output": "import { Carousel } from '@mantine/carousel';\nimport { Button, Paper, Text, Title, useMantineTheme } from '@mantine/core';\nimport { useMediaQuery } from '@mantine/hooks';\nimport classes from './CardsCarousel.module.css';\n\ninterface CardProps {\n  image: string;\n  title: string;\n  category: string;\n}\n\nfunction Card({ image, title, category }: CardProps) {\n  return (\n    <Paper\n      shadow=\"md\"\n      p=\"xl\"\n      radius=\"md\"\n      style={{ backgroundImage: `url(${image})` }}\n      className={classes.card}\n    >\n      <div>\n        <Text className={classes.category} size=\"xs\">\n          {category}\n        </Text>\n        <Title order={3} className={classes.title}>\n          {title}\n        </Title>\n      </div>\n      <Button variant=\"white\" color=\"dark\">\n        Read article\n      </Button>\n    </Paper>\n  );\n}\n\nconst data = [\n  {\n    image:\n      'https://images.unsplash.com/photo-1508193638397-1c4234db14d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Best forests to visit in North America',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1559494007-9f5847c49d94?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Hawaii beaches review: better than you think',\n    category: 'beach',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1608481337062-4093bf3ed404?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Mountains at night: 12 best locations to enjoy the view',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1507272931001-fc06c17e4f43?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Aurora in Norway: when to visit for best experience',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1510798831971-661eb04b3739?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Best places to visit this winter',\n    category: 'tourism',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1582721478779-0ae163c05a60?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Active volcanos reviews: travel at your own risk',\n    category: 'nature',\n  },\n];\n\nexport function CardsCarousel() {\n  const theme = useMantineTheme();\n  const mobile = useMediaQuery(`(max-width: ${theme.breakpoints.sm})`);\n  const slides = data.map((item) => (\n    <Carousel.Slide key={item.title}>\n      <Card {...item} />\n    </Carousel.Slide>\n  ));\n\n  return (\n    <Carousel\n      slideSize={{ base: '100%', sm: '50%' }}\n      slideGap={2}\n      emblaOptions={{ align: 'start', slidesToScroll: mobile ? 1 : 2 }}\n    >\n      {slides}\n    </Carousel>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file provided is a JSON configuration file that defines the properties of a card with stats. It is part of an application framework or design system that handles the creation and rendering of user interface components.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with stats\",\n  \"category\": \"app-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the card, displayed as a heading.\n* **category:** The category of the card, used for grouping and organization.\n* **dimmed:** A boolean value that determines if the card should be displayed with a dimmed effect.\n* **canvas:** An object that specifies the layout and style of the card's content area.\n\n**canvas Properties:**\n\n* **center:** A boolean value that specifies if the content should be centered horizontally.\n* **maxWidth:** The maximum width of the content area in pixels.\n\n**Purpose:**\n\nThe purpose of this file is to configure the properties of a card with stats that will be displayed within an application. The card should have a title, category, dimmed effect, and a content area with specified layout and styling.\n\n**Usage:**\n\nThis JSON file can be used to:\n\n* Define the configuration of a card with stats.\n* Load and render the card in an application using a design system or framework.\n\n**Additional Notes:**\n\n* The file name may have a different name, such as `card-stats.json`.\n* The specific values for the properties and canvas options may vary depending on the design system or framework used.\n* The card with stats can be customized with additional content, such as statistics, charts, or graphs.",
    "input": "",
    "output": "{\n  \"title\": \"Card with stats\",\n  \"category\": \"app-cards\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file appears to be a CSS (Cascading Style Sheet) file, likely used to style a web page or application. It defines three CSS classes:\n\n**1. .card:**\n- Sets the background color of the element with the class `card` to the value of the CSS variable `--mantine-color-body`.\n\n**2. .footer:**\n- Sets the display property to `flex`, allowing the elements within the footer to be arranged in a flexible layout.\n- Justifies the content along the main axis with `justify-content: space-between`, which creates equal spacing between the elements.\n- Sets padding to the footer using the CSS variables `--mantine-spacing-sm` and `--mantine-spacing-lg`.\n- Adds a border-top with a width of 1 pixel, a style of solid, and a color based on the `--mantine-color-gray-2` or `--mantine-color-dark-5` variable, depending on the theme mode.\n\n**3. .title:**\n- Sets the font-family to the values of the CSS variables `Outfit` and `--mantine-font-family`.\n- Sets the font-weight to 500.\n- Sets the line-height to 1.\n- Sets the font-size to the value of the CSS variable `--mantine-font-size-sm`.\n\n**Purpose:**\n\nThe CSS classes defined in this file likely style a web page with a card layout, a footer, and a title element. The styles are applied using the `class` attribute in HTML elements.\n\n**Usage:**\n\nTo use the styles defined in this file, the HTML elements should have the corresponding class names applied. For example:\n\n```html\n<div class=\"card\">...</div>\n<footer class=\"footer\">...</footer>\n<h2 class=\"title\">...</h2>\n```\n\n**Note:**\n\nThe CSS variables `--mantine-color-body`, `--mantine-spacing-sm`, `--mantine-spacing-lg`, `--mantine-color-gray-2`, `--mantine-color-dark-5`, `--mantine-font-family`, `--mantine-font-size-sm`, and `--mantine-font-size-md` are assumed to be defined elsewhere in the CSS file or stylesheet.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.footer {\n  display: flex;\n  justify-content: space-between;\n  padding: var(--mantine-spacing-sm) var(--mantine-spacing-lg);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  line-height: 1;\n  font-size: var(--mantine-font-size-sm);\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file is a React component called `CardWithStats`. It is responsible for displaying a card with various statistics.\n\n**Components Used:**\n\n- `StoryWrapper`: A custom component that provides a context for rendering components with attributes.\n- `CardWithStats`: The main component that displays the card.\n\n**Data Import:**\n\n- `attributes.json`: A JSON file containing the statistics to be displayed on the card.\n\n**Component Structure:**\n\n**1. Import Statements:**\n- Import the necessary components and data.\n\n**2. Default Export:**\n- Export an object with the title `CardWithStats`.\n\n**3. Usage Function:**\n- Defines a function called `Usage` that renders the `StoryWrapper` component with the following props:\n    - `attributes`: The statistics loaded from `attributes.json`.\n    - `component`: The `CardWithStats` component.\n\n**How the Component Works:**\n\n1. When the `Usage` function is called, it renders the `StoryWrapper` component.\n2. The `StoryWrapper` component receives the `attributes` prop and passes it to the `CardWithStats` component.\n3. The `CardWithStats` component uses the `attributes` prop to render the card with the corresponding statistics.\n\n**Usage:**\n\nThis component can be used by importing it into another React component and calling the `Usage` function. For example:\n\n```\nimport CardWithStats from './CardWithStats';\n\nconst MyComponent = () => {\n  return <CardWithStats.Usage />;\n};\n```\n\n**Purpose:**\n\nThe `CardWithStats` component provides a reusable and customizable way to display cards with statistics. It can be used in various applications, such as:\n\n- Game interfaces\n- Data visualizations\n- Product descriptions",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CardWithStats } from './CardWithStats';\n\nexport default { title: 'CardWithStats' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CardWithStats} />;\n}\n"
  },
  {
    "instruction": "**Description:**\n\nThe provided code snippet is a React functional component named `CardWithStats`. It renders a card with various statistics related to a running challenge.\n\n**Components:**\n\n* **Card:** A container component with a border, padding, radius, and a custom CSS class.\n* **Image:** An image component displaying a running challenge image.\n* **Text:** Text components for displaying title, statistics, progress, and additional information.\n* **RingProgress:** A progress ring component to represent the completion percentage.\n* **Group:** A container component for grouping elements vertically or horizontally.\n\n**Data:**\n\n* The `stats` array contains an object for each statistic, with `title` and `value` properties.\n\n**Functionality:**\n\n* The `CardWithStats()` function iterates over the `stats` array and maps each object to a `<div>` element containing a title and value.\n* The `Card.Section` component provides a section within the card for the image.\n* The progress ring displays an 80% completion percentage.\n* Additional text provides additional information such as distance, improvement, and global leaderboard placement.\n\n**CSS:**\n\n* The `classes.card` class applies custom styles to the card.\n* The `classes.title` class styles the title text.\n\n**Purpose:**\n\nThe purpose of this component is to display running challenge statistics in a visually appealing and informative way. It provides users with insights into their progress, performance, and global ranking.\n\n**Usage:**\n\nThe `CardWithStats` component can be included in any React application to showcase running challenge statistics.\n\n**Additional Notes:**\n\n* The `Image` component uses a placeholder image.\n* The progress ring color can be customized in the `sections` prop.\n* The `start_of_turn` tag in the description is likely a placeholder or typo, as the code does not contain that tag.",
    "input": "",
    "output": "import { Card, Group, Image, RingProgress, Text } from '@mantine/core';\nimport classes from './CardWithStats.module.css';\n\nconst stats = [\n  { title: 'Distance', value: '27.4 km' },\n  { title: 'Avg. speed', value: '9.6 km/h' },\n  { title: 'Score', value: '88/100' },\n];\n\nexport function CardWithStats() {\n  const items = stats.map((stat) => (\n    <div key={stat.title}>\n      <Text size=\"xs\" color=\"dimmed\">\n        {stat.title}\n      </Text>\n      <Text fw={500} size=\"sm\">\n        {stat.value}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder padding=\"lg\" radius=\"md\" className={classes.card}>\n      <Card.Section>\n        <Image\n          src=\"https://images.unsplash.com/photo-1581889470536-467bdbe30cd0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80\"\n          alt=\"Running challenge\"\n          height={100}\n        />\n      </Card.Section>\n\n      <Group justify=\"space-between\" mt=\"lg\">\n        <Text className={classes.title}>Running challenge</Text>\n        <Group gap={5}>\n          <Text fz=\"xs\" c=\"dimmed\">\n            80% completed\n          </Text>\n          <RingProgress size={18} thickness={2} sections={[{ value: 80, color: 'blue' }]} />\n        </Group>\n      </Group>\n      <Text mt=\"sm\" mb=\"md\" c=\"dimmed\" fz=\"xs\">\n        56 km this month • 17% improvement compared to last month • 443 place in global scoreboard\n      </Text>\n      <Card.Section className={classes.footer}>{items}</Card.Section>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe file provided is a JSON configuration file that defines the settings for a card with a carousel layout.\n\n**File Structure**\n\n```json\n{\n  \"title\": \"Card with carousel\",\n  \"category\": \"carousels\",\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 350\n  }\n}\n```\n\n**Properties**\n\n* **title:** The title of the card, which is \"Card with carousel\".\n* **category:** The category of the card, which is \"carousels\".\n* **changelog:** The date when the card was last updated, which is \"september-2022\".\n* **canvas:** An object that contains the canvas settings for the card.\n\n**Canvas Settings**\n\n* **center:** A boolean value that specifies whether the card should be centered within its container. The value is set to `true`.\n* **maxWidth:** An integer value that specifies the maximum width of the card. The value is set to `350`.\n\n**Purpose**\n\nThe purpose of this file is to configure the layout and settings for a card that includes a carousel. The card will have the following characteristics:\n\n* A title of \"Card with carousel\".\n* A category of \"carousels\".\n* A maximum width of 350 pixels.\n* The card will be centered within its container.\n\n**Additional Notes**\n\n* The `category` property is used to group related cards together.\n* The `changelog` property is used to track the date when the card was last updated.\n* The `canvas` property is used to specify the layout and settings for the card's content.",
    "input": "",
    "output": "{\n  \"title\": \"Card with carousel\",\n  \"category\": \"carousels\",\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 350\n  }\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe file is a CSS stylesheet that defines the visual styles for a carousel component. It is written in the CSS syntax and uses a cascading style sheet approach.\n\n**Components**\n\nThe file defines styles for three main components:\n\n- `.price`\n- `.carousel`\n- `.carouselControls`\n- `.carouselIndicator`\n\n**Styles**\n\n**`.price`**\n\n- Sets the text color to the value of the `--mantine-color-bright` CSS variable.\n\n**`.carousel`**\n\n- Defines a CSS mixin called `hover`. When this mixin is applied to an element, it sets the opacity of the `.carouselControls` element to 1 when the element is hovered over.\n\n**`.carouselControls`**\n\n- Transitions the opacity of the element to 150 milliseconds with an ease transition.\n- Sets the opacity of the element to 0 by default.\n\n**`.carouselIndicator`**\n\n- Sets the width and height of the element to 4 pixels.\n- Transitions the width of the element to 250 milliseconds with an ease transition.\n- Changes the width of the element to 16 pixels when the `data-active` attribute is set.\n\n**Purpose**\n\nThe CSS stylesheet defines the visual appearance of a carousel component, including the price, carousel controls, and carousel indicators. It is used to create a visually appealing and interactive carousel that enhances the user experience.\n\n**Usage**\n\nThe styles defined in this file can be included in a HTML document using a `<link>` tag or by copying and pasting the CSS code into the `<style>` tag.\n\n**Note:**\n\nThe CSS variables and mixins used in the file may require additional context or specific CSS framework setup to be applied correctly.",
    "input": "",
    "output": ".price {\n  color: var(--mantine-color-bright);\n}\n\n.carousel {\n  @mixin hover {\n    .carouselControls {\n      opacity: 1;\n    }\n  }\n}\n\n.carouselControls {\n  transition: opacity 150ms ease;\n  opacity: 0;\n}\n\n.carouselIndicator {\n  width: 4px;\n  height: 4px;\n  transition: width 250ms ease;\n\n  &[data-active] {\n    width: 16px;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CarouselCard.jsx\n\n**Purpose:**\n\nThe CarouselCard.jsx file is a React component that uses a StoryWrapper component to display a carousel card with predefined attributes.\n\n**Components:**\n\n- **StoryWrapper:** A component that wraps the CarouselCard component and provides additional functionality for storybook rendering.\n- **CarouselCard:** The main component that renders the carousel card.\n- **attributes.json:** A JSON file containing the attributes for the carousel card.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n- Imports the necessary components and files:\n    - StoryWrapper from '../../components/StoryWrapper/StoryWrapper'\n    - attributes.json\n    - CarouselCard\n\n**2. Default Export:**\n- Exports an object with the title 'CarouselCard'.\n\n**3. Usage Function:**\n- Defines a Usage function that:\n    - Creates a StoryWrapper component.\n    - Passes the attributes and CarouselCard component as props.\n    - Renders the StoryWrapper component, which in turn renders the CarouselCard component with the specified attributes.\n\n**Workflow:**\n\nWhen the CarouselCard.jsx file is imported and rendered in a storybook environment, the following steps occur:\n\n1. The StoryWrapper component wraps the CarouselCard component.\n2. The attributes specified in the attributes.json file are passed to the CarouselCard component.\n3. The CarouselCard component renders the carousel card with the given attributes.\n\n**Purpose of Usage Function:**\n\nThe Usage function provides a convenient way to preview the CarouselCard component with predefined attributes in the storybook environment. It allows developers to easily see how the component behaves with different settings.\n\n**Conclusion:**\n\nThe CarouselCard.jsx file is a React component that uses a StoryWrapper to display a carousel card with attributes specified in a separate JSON file. The Usage function provides a way to preview the component in the storybook environment.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CarouselCard } from './CarouselCard';\n\nexport default { title: 'CarouselCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CarouselCard} />;\n}\n"
  },
  {
    "instruction": "**CarouselCard.js**\n\nThis file is a React component that displays a carousel of five images with associated text and booking information.\n\n**Purpose:**\n\nThe purpose of this component is to showcase a unique birdhouse located in Norway, with emphasis on its natural beauty, comfort, and booking options.\n\n**Components:**\n\n* **Carousel:** A Mantine carousel component that displays the five images in a slideshow.\n* **Card:** A Mantine card component that encapsulates the carousel and associated text and booking information.\n* **Image:** Mantine image components that display each of the five images.\n* **Text:** Mantine text components for displaying location, rating, description, price, and booking call to action.\n* **Button:** A Mantine button component for booking the accommodation.\n\n**Functionality:**\n\n* The component renders five carousel slides, each containing an image of the birdhouse.\n* The carousel supports indicators, looping, and custom CSS classes.\n* The text section displays the location, rating, description, price, and booking call to action.\n* The booking button allows users to make reservations.\n\n**Key Features:**\n\n* High-quality images showcasing the birdhouse's natural surroundings and amenities.\n* Detailed description of the accommodation and its features.\n* Clear booking information, including price and call to action.\n* User-friendly interface with a modern design and easy navigation.\n\n**Usage:**\n\nThis component can be integrated into any React application where it is desired to showcase the birdhouse accommodation.\n\n**Styling:**\n\nThe component utilizes custom CSS classes defined in `CarouselCard.module.css` to style the carousel, indicators, and other elements.\n\n**Note:**\n\n* The images used in the carousel are obtained from Unsplash.\n* The specific location and price of the birdhouse may vary.\n* The booking functionality is not included in this component.",
    "input": "",
    "output": "import { IconStarFilled } from '@tabler/icons-react';\nimport { Carousel } from '@mantine/carousel';\nimport { Button, Card, Group, Image, Text } from '@mantine/core';\nimport classes from './CarouselCard.module.css';\n\nconst images = [\n  'https://images.unsplash.com/photo-1598928506311-c55ded91a20c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1567767292278-a4f21aa2d36e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1605774337664-7a846e9cdf17?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1554995207-c18c203602cb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1616486029423-aaa4789e8c9a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n];\n\nexport function CarouselCard() {\n  const slides = images.map((image) => (\n    <Carousel.Slide key={image}>\n      <Image src={image} height={220} />\n    </Carousel.Slide>\n  ));\n\n  return (\n    <Card radius=\"md\" withBorder padding=\"xl\">\n      <Card.Section>\n        <Carousel\n          withIndicators\n          emblaOptions={{ loop: true }}\n          classNames={{\n            root: classes.carousel,\n            controls: classes.carouselControls,\n            indicator: classes.carouselIndicator,\n          }}\n        >\n          {slides}\n        </Carousel>\n      </Card.Section>\n\n      <Group justify=\"space-between\" mt=\"lg\">\n        <Text fw={500} fz=\"lg\">\n          Forde, Norway\n        </Text>\n\n        <Group gap={5}>\n          <IconStarFilled size={16} color=\"var(--mantine-color-yellow-6)\" />\n          <Text fz=\"sm\" fw={600}>\n            4.78\n          </Text>\n        </Group>\n      </Group>\n\n      <Text fz=\"sm\" c=\"dimmed\" mt=\"sm\">\n        Relax, rejuvenate and unplug in this unique contemporary Birdbox. Feel close to nature in\n        ultimate comfort. Enjoy the view of the epic mountain range of Blegja and the Førdefjord.\n      </Text>\n\n      <Group justify=\"space-between\" mt=\"md\">\n        <div>\n          <Text fz=\"xl\" span fw={500} className={classes.price}>\n            397$\n          </Text>\n          <Text span fz=\"sm\" c=\"dimmed\">\n            {' '}\n            / night\n          </Text>\n        </div>\n\n        <Button radius=\"md\">Book now</Button>\n      </Group>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a card with a checkbox input field. It is part of a user interface framework or application that allows users to interact with digital content.\n\n**File Structure:**\n\nThe file is a JSON object with three main properties:\n\n**1. title:**\n- The title of the card, which is displayed at the top of the card.\n- In this case, the title is \"Card with checkbox\".\n\n**2. category:**\n- The category of the card, which is used for organizational purposes.\n- In this case, the category is \"inputs\".\n\n**3. canvas:**\n- An object that defines the layout and styling of the card.\n- - center: A boolean value that specifies whether the card should be centered horizontally.\n- - maxWidth: The maximum width of the card in pixels.\n\n**Purpose:**\n\nThe purpose of this file is to create a card that includes a checkbox input field. The checkbox can be used to represent a boolean value, such as \"Yes\" or \"No\".\n\n**Usage:**\n\nThis JSON file can be used to define the structure of a card in a user interface framework or application. It can then be rendered on a screen or webpage to create an interactive form element.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Card with checkbox\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 400\n  }\n}\n```\n\n**Note:**\n\n- The specific implementation of the user interface framework or application may vary depending on the platform or framework used.\n- The canvas object may contain additional properties and settings that are specific to the framework being used.",
    "input": "",
    "output": "{\n  \"title\": \"Card with checkbox\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 400\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** .button.css\n\n**Purpose:**\n\nThis CSS file defines the style for a button component. It is likely part of a user interface or web application framework, such as Mantine.\n\n**Description:**\n\nThe file defines a CSS class called `.button`. This class defines the visual appearance and behavior of a button element.\n\n**CSS Code:**\n\n```css\n.button {\n  display: flex;\n  width: 100%;\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-8));\n  border-radius: var(--mantine-radius-md);\n  padding: var(--mantine-spacing-lg);\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-9));\n  }\n}\n```\n\n**Key CSS Properties:**\n\n* **display:** flex\n* **width:** 100%\n* **border:** 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-8))\n* **border-radius:** var(--mantine-radius-md)\n* **padding:** var(--mantine-spacing-lg)\n* **background-color:** light-dark(var(--mantine-color-white), var(--mantine-color-dark-8))\n\n**@mixin hover:**\n\n* **background-color:** light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-9))\n\n**Purpose of CSS Code:**\n\n* The `.button` class defines a button with the following properties:\n    * A flexible display layout\n    * Full width\n    * A light gray border\n    * A medium border radius\n    * Adequate padding\n    * A background color that is light or dark depending on the user's theme\n* The `@mixin hover` rule defines a hover effect for the button, which changes the background color to a slightly darker shade.\n\n**Usage:**\n\nThis CSS class can be used to style any HTML element that should represent a button. In an HTML document, the following code can be used to create a button with the `.button` class:\n\n```html\n<button class=\"button\">Button</button>\n```",
    "input": "",
    "output": ".button {\n  display: flex;\n  width: 100%;\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-8));\n  border-radius: var(--mantine-radius-md);\n  padding: var(--mantine-spacing-lg);\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-9));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CheckboxCard.jsx\n\n**Purpose:**\n\nThe file is a React component that renders a checkbox card with customizable attributes.\n\n**Components and Functionality:**\n\n* **Import:**\n    * `StoryWrapper`: A component for displaying and testing React components with specific attributes.\n    * `attributes.json`: A JSON file containing the default attributes for the checkbox card.\n    * `CheckboxCard`: The component to be tested.\n\n* **Exports:**\n    * `title`: The title of the component, which is 'CheckboxCard'.\n    * `Usage`: A function that renders a `StoryWrapper` component with the following props:\n        * `attributes`: The default attributes specified in `attributes.json`.\n        * `component`: The `CheckboxCard` component.\n\n**How the File Works:**\n\n1. The `StoryWrapper` component is imported and used to render the `CheckboxCard` component with the given attributes.\n2. The `attributes.json` file contains the default values for the checkbox card's attributes, such as label, value, and checked state.\n3. The `CheckboxCard` component receives these attributes as props and renders a checkbox card with the specified configuration.\n\n**Purpose of the Usage Function:**\n\nThe `Usage` function provides a convenient way to test and preview the `CheckboxCard` component with the default attributes.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for automated testing and documentation purposes.\n* The `CheckboxCard` component can be customized by providing different attributes in the `attributes.json` file.\n* The `title` export is likely used for documentation or identification purposes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CheckboxCard } from './CheckboxCard';\n\nexport default { title: 'CheckboxCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CheckboxCard} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `CheckboxCard.js` file is a React component that renders a card-like layout with a checkbox, title, and description. It is used to represent a selectable option.\n\n**Functionality:**\n\n- **State Management:**\n    - Uses the `useState` hook to manage the state of a checkbox, initialized to `true`.\n    - The `value` state variable stores the checked state of the checkbox.\n    - The `onChange` function is called when the checkbox is toggled, updating the `value` state.\n\n- **Checkbox Component:**\n    - A `Checkbox` component is rendered with the following properties:\n        - `checked`: Set to the `value` state variable.\n        - `onChange`: An empty function that prevents the checkbox from being interacted with.\n        - `tabIndex`: Set to `-1` to disable keyboard focus.\n        - `size`: Medium\n        - `mr`: Extra large margin to the right.\n        - `styles`: Custom styles to set the cursor to `pointer`.\n        - `aria-hidden`: Set to `true` to prevent accessibility focus.\n\n- **Title and Description:**\n    - A `Text` component with `fw` (font weight) 500 and `mb` (margin bottom) 7px renders the title \"@mantine/core\".\n    - Another `Text` component with `fz` (font size) \"sm\" and `c` (color) \"dimmed\" provides a description.\n\n- **Button:**\n    - An `UnstyledButton` component with a `className` prop of `classes.button` is used as a container.\n    - It handles the click event to toggle the checkbox state.\n\n**CSS Classes:**\n\n- The `classes.button` class is likely defined in a separate CSS module and provides additional styling for the button element.\n\n**Usage:**\n\nThis component can be used in a React application to represent selectable options. It can be embedded within other components or used as a standalone element.\n\n**Additional Notes:**\n\n- The `@mantine/core` import likely refers to a Mantine UI library, providing access to the `Checkbox`, `Text`, and `UnstyledButton` components.\n- The `styles` prop on the `Checkbox` component allows for customization of the checkbox styles.\n- The `aria-hidden` attribute prevents the checkbox from being accessible through keyboard navigation.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { Checkbox, Text, UnstyledButton } from '@mantine/core';\nimport classes from './CheckboxCard.module.css';\n\nexport function CheckboxCard() {\n  const [value, onChange] = useState(true);\n\n  return (\n    <UnstyledButton onClick={() => onChange(!value)} className={classes.button}>\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        size=\"md\"\n        mr=\"xl\"\n        styles={{ input: { cursor: 'pointer' } }}\n        aria-hidden\n      />\n\n      <div>\n        <Text fw={500} mb={7} lh={1}>\n          @mantine/core\n        </Text>\n        <Text fz=\"sm\" c=\"dimmed\">\n          Core components library: inputs, buttons, overlays, etc.\n        </Text>\n      </div>\n    </UnstyledButton>\n  );\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided JSON file represents a metadata configuration for a comment within a canvas. It defines the comment's title, category, and canvas settings.\n\n**Comment Title:**\n- The `title` property specifies the title of the comment as \"Comment with html content\".\n\n**Comment Category:**\n- The `category` property identifies the comment as belonging to the \"comments\" category.\n\n**Canvas Settings:**\n- The `canvas` property contains configuration options for the comment's display within the canvas:\n    - `center`: If set to `true`, the comment will be centered within the canvas.\n    - `maxWidth`: Specifies the maximum width of the comment, in this case, 380 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to configure a comment with HTML content within a canvas. This allows users to add formatted text, images, or other interactive elements to their comments.\n\n**Usage:**\n\nThis JSON file can be used by applications or platforms that support comment and canvas features. It provides a standardized way to define comment metadata and settings.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Comment with html content\",\n  \"category\": \"comments\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 380\n  }\n}\n```\n\n**Additional Notes:**\n\n- The `canvas` property allows for further customization of the comment's appearance and positioning within the canvas.\n- The `title` and `category` properties help with organizing and searching for comments.\n- The specific implementation and usage of this file may vary depending on the application or platform where it is used.",
    "input": "",
    "output": "{\n  \"title\": \"Comment with html content\",\n  \"category\": \"comments\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 380\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS stylesheet that defines styles for HTML elements. It includes three CSS rules that apply to the following elements:\n\n**1. .comment**\n- Padding: `var(--mantine-spacing-lg)` top and bottom, `var(--mantine-spacing-xl)` left and right.\n- Variable `--mantine-spacing-lg` and `--mantine-spacing-xl` are assumed to be defined elsewhere in the CSS file or variables.\n\n**2. .body**\n- Padding-left: 54px.\n- Padding-top: `var(--mantine-spacing-sm)`.\n- Font-size: `var(--mantine-font-size-sm)`.\n- Variable `--mantine-spacing-sm` and `--mantine-font-size-sm` are assumed to be defined elsewhere in the CSS file or variables.\n\n**3. .content**\n- Selects all `p` elements that are direct children of the `.content` element.\n- Sets the `margin-bottom` property to 0 for the last `p` element.\n\n**Purpose:**\n\nThe CSS stylesheet is likely intended to style a comment section or section of text within a web page. It provides spacing, font size, and margin settings for different elements within the comment area.\n\n**Additional Notes:**\n\n- The `var()` function is used to reference CSS variables.\n- The variable names `--mantine-spacing-*` and `--mantine-font-size-*` suggest that these variables are defined elsewhere in the CSS file or variables.\n- The `&` symbol is used for nested selectors, allowing the style to be applied to elements within the `.content` element.\n- The `last-child` selector is used to target the last `p` element within the `.content` element.",
    "input": "",
    "output": ".comment {\n  padding: var(--mantine-spacing-lg) var(--mantine-spacing-xl);\n}\n\n.body {\n  padding-left: 54px;\n  padding-top: var(--mantine-spacing-sm);\n  font-size: var(--mantine-font-size-sm);\n}\n\n.content {\n  & > p:last-child {\n    margin-bottom: 0;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CommentHtml.jsx\n\n**Purpose:**\n\nThe `CommentHtml.jsx` file is a React component that displays a comment section in a story. It imports necessary components and data from other files to render the comment functionality.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the `CommentHtml` component and provides additional functionality, such as rendering attributes.\n* **CommentHtml:** The primary component responsible for rendering the comment section.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains attributes used to configure the comment section, such as the title and text.\n\n**Code Breakdown:**\n\n1. **Imports:**\n   - Imports the `StoryWrapper` component from `StoryWrapper.jsx`.\n   - Imports the `attributes.json` file for configuration data.\n   - Imports the `CommentHtml` component.\n\n2. **Default Export:**\n   - Exports an object with a `title` property set to `'CommentHtml'`.\n\n3. **Usage Function:**\n   - Returns a React component instance of the `StoryWrapper` component.\n   - Passes the `attributes` and `CommentHtml` components as props to the `StoryWrapper`.\n\n**Functionality:**\n\n* The `StoryWrapper` component provides a container for the `CommentHtml` component.\n* The `CommentHtml` component renders the comment section based on the configuration in `attributes.json`.\n* The comment section typically includes a title, text, and possibly additional elements, such as a timestamp or author.\n\n**Purpose of the File:**\n\nThe `CommentHtml.jsx` file is responsible for displaying a comment section in a story. It imports necessary components and data to render the comment functionality, allowing authors to add comments to their stories.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CommentHtml } from './CommentHtml';\n\nexport default { title: 'CommentHtml' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CommentHtml} />;\n}\n"
  },
  {
    "instruction": "**CommentHtml.js**\n\nThis file is a React component that displays a comment with the following features:\n\n**1. Avatar and User Information:**\n   - An avatar image of Jacob Warnhalter.\n   - User name: Jacob Warnhalter\n   - Timestamp: 10 minutes ago\n\n**2. Comment Content:**\n   - The comment is written in HTML and includes the following:\n     - A paragraph stating the author's use of Heroku for hosting their Node.js application.\n     - A link to the Heroku website.\n     - A statement about the MongoDB add-on being too expensive.\n     - A link to the Digital Ocean website.\n     - A strong tag indicating that the author is considering switching to Digital Ocean.\n\n**3. Presentation:**\n   - The comment is displayed within a Paper component with rounded corners and a border.\n   - The comment body is styled using the TypographyStylesProvider component.\n\n**Technical Details:**\n\n- **@mantine/core** is a React library that provides components and utilities for building user interfaces.\n- **classes.comment** is a CSS class used to style the comment container.\n- **dangerouslySetInnerHTML** is used to render the HTML content of the comment.\n\n**Purpose:**\n\nThe purpose of this component is to display a comment with user information, content, and presentation. It is likely used in a social media application, forum, or other online platform where users can leave comments.\n\n**Usage:**\n\nThe CommentHtml component can be used as follows:\n\n```\n<CommentHtml />\n```\n\n**Additional Notes:**\n\n- The avatar image and user name can be customized as needed.\n- The comment content can be modified to suit the specific context.\n- The CSS styles can be further adjusted to match the overall design of the application.",
    "input": "",
    "output": "import { Avatar, Group, Paper, Text, TypographyStylesProvider } from '@mantine/core';\nimport classes from './CommentHtml.module.css';\n\nexport function CommentHtml() {\n  return (\n    <Paper withBorder radius=\"md\" className={classes.comment}>\n      <Group>\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png\"\n          alt=\"Jacob Warnhalter\"\n          radius=\"xl\"\n        />\n        <div>\n          <Text fz=\"sm\">Jacob Warnhalter</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            10 minutes ago\n          </Text>\n        </div>\n      </Group>\n      <TypographyStylesProvider className={classes.body}>\n        <div\n          className={classes.content}\n          dangerouslySetInnerHTML={{\n            __html:\n              '<p>I use <a href=\"https://heroku.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Heroku</a> to host my Node.js application, but MongoDB add-on appears to be too <strong>expensive</strong>. I consider switching to <a href=\"https://www.digitalocean.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Digital Ocean</a> VPS to save some cash.</p>',\n          }}\n        />\n      </TypographyStylesProvider>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a comment object within a specific platform or application. It defines the properties and settings for a comment entity, including its title, category, and canvas configuration.\n\n**Properties:**\n\n* **title:** A string value that specifies the title of the comment. In this case, the title is \"Comment\".\n* **category:** A string value that categorizes the comment. In this case, the category is \"comments\".\n* **canvas:** An object that contains the canvas configuration for the comment.\n\n**Canvas Configuration:**\n\n* **center:** A boolean value that determines whether the comment should be centered within its container. In this case, the center property is set to true.\n* **maxWidth:** A number value that specifies the maximum width of the comment. In this case, the maxWidth property is set to 380.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the structure and layout of a comment object. It specifies the title, category, and canvas configuration, which determines how the comment will be displayed and interacted with within the platform or application.\n\n**Usage:**\n\nThis configuration file can be used to:\n\n* Create a new comment object.\n* Modify the properties of an existing comment object.\n* Configure the display and behavior of comments within the platform or application.\n\n**Additional Notes:**\n\n* The specific platform or application that uses this configuration file will determine how the comments are implemented and displayed.\n* The canvas configuration may vary depending on the platform or application.\n* The values for the title, category, and canvas configuration can be customized as needed.",
    "input": "",
    "output": "{\n  \"title\": \"Comment\",\n  \"category\": \"comments\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 380\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CommentSimple.jsx\n\n**Description:**\n\nThe file `CommentSimple.jsx` is a React component that represents a simple comment. It includes the following components and functionality:\n\n**Imports:**\n\n- `StoryWrapper`: A component that provides a wrapper for the comment component.\n- `attributes.json`: A JSON file containing the attributes for the comment component.\n- `CommentSimple`: The comment component itself.\n\n**Component Declaration:**\n\n- The file exports a default object with a `title` property set to `CommentSimple`.\n\n**Usage Function:**\n\n- The `Usage()` function renders the comment component using the `StoryWrapper` component.\n- It passes the `attributes` object and the `CommentSimple` component as props to the `StoryWrapper`.\n\n**Purpose:**\n\nThe purpose of the `CommentSimple.jsx` file is to create a simple comment component that can be used in a React application. The component includes the necessary attributes and functionality to render a comment with text and an author.\n\n**Key Features:**\n\n- The comment component is wrapped in the `StoryWrapper` component for testing purposes.\n- The `attributes.json` file defines the attributes of the comment, such as the text and author.\n- The `CommentSimple` component renders the comment with the specified attributes.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component is a React component that provides a convenient way to render components for testing purposes.\n- The `attributes.json` file can be used to customize the attributes of the comment component.\n- The `CommentSimple` component can be used as a standalone component or as part of a larger React application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CommentSimple } from './CommentSimple';\n\nexport default { title: 'CommentSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CommentSimple} />;\n}\n"
  },
  {
    "instruction": "**CommentSimple.js**\n\nThis file is a React functional component that displays a comment with an avatar, username, timestamp, and comment text.\n\n**Components Used:**\n\n* `Avatar`: A component that displays an avatar image.\n* `Group`: A component that groups other components horizontally or vertically.\n* `Text`: A component that displays text with different styles.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n```\nimport { Avatar, Group, Text } from '@mantine/core';\n```\n\nThese statements import the necessary components from the `@mantine/core` library.\n\n**2. Function Declaration:**\n\n```\nexport function CommentSimple() {\n  return (\n    // ...\n  );\n}\n```\n\n* The `CommentSimple()` function is an exported functional component.\n* It returns the JSX code that represents the comment.\n\n**3. JSX Code:**\n\n```\n<div>\n  <Group>\n    <Avatar\n      src=\"...\"\n      alt=\"...\"\n      radius=\"xl\"\n    />\n    <div>\n      <Text size=\"sm\">...</Text>\n      <Text size=\"xs\" c=\"dimmed\">...</Text>\n    </div>\n  </Group>\n  <Text pl={54} pt=\"sm\" size=\"sm\">...</Text>\n</div>\n```\n\n**Comment Structure:**\n\n* **Avatar:**\n    * Displays an avatar image with the following properties:\n        * `src`: The image source URL.\n        * `alt`: The alt text for the image.\n        * `radius`: Sets the avatar's radius to \"xl\".\n* **Username and Timestamp:**\n    * A `Group` component groups the username and timestamp vertically.\n    * `Text` component with `size=\"sm\"` for the username.\n    * `Text` component with `size=\"xs\" c=\"dimmed\"` for the timestamp.\n* **Comment Text:**\n    * A `Text` component with `pl={54} pt=\"sm\" size=\"sm\"` for the comment text.\n\n**Note:**\n\n* The `src`, `alt`, and comment text values are not included in the code snippet. They should be replaced with actual values for the specific comment.\n* The `c=\"dimmed\"` prop in the `Text` component sets the text color to a dimmed color.\n* The `pl={54}` prop in the `Text` component sets the left padding to 54 pixels.\n* The `pt=\"sm\"` prop in the `Text` component sets the top padding to a small size.",
    "input": "",
    "output": "import { Avatar, Group, Text } from '@mantine/core';\n\nexport function CommentSimple() {\n  return (\n    <div>\n      <Group>\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png\"\n          alt=\"Jacob Warnhalter\"\n          radius=\"xl\"\n        />\n        <div>\n          <Text size=\"sm\">Jacob Warnhalter</Text>\n          <Text size=\"xs\" c=\"dimmed\">\n            10 minutes ago\n          </Text>\n        </div>\n      </Group>\n      <Text pl={54} pt=\"sm\" size=\"sm\">\n        This Pokémon likes to lick its palms that are sweetened by being soaked in honey. Teddiursa\n        concocts its own honey by blending fruits and pollen collected by Beedrill. Blastoise has\n        water spouts that protrude from its shell. The water spouts are very accurate.\n      </Text>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** Contact us form.json\n\n**File Type:** JSON configuration file\n\n**Purpose:**\n\nThe contact us form.json file defines the configuration settings for a contact us form. It specifies the title, category, responsiveness, and layout of the form.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Contact us form\",\n  \"category\": \"contact\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1000\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the contact us form, which is displayed at the top of the form.\n* **category:** The category of the form, which is used for navigation and search purposes.\n* **responsive:** Whether the form is responsive to different screen sizes.\n* **canvas:** An object that defines the layout of the form.\n\n**canvas Properties:**\n\n* **center:** Whether the form should be centered on the page.\n* **maxWidth:** The maximum width of the form.\n\n**Purpose:**\n\n* To define the title, category, responsiveness, and layout of a contact us form.\n* To configure the form's canvas settings, such as centering and maximum width.\n* To provide users with a way to contact the organization through a designated form.\n\n**Usage:**\n\nThe contact us form.json file is typically used in conjunction with a content management system (CMS) or a website builder. The configuration settings specified in the file can be used to create and display a contact us form on a website or application.\n\n**Additional Notes:**\n\n* The file name should be unique and descriptive.\n* The values for the properties should be entered in quotes.\n* The canvas object can be further customized with additional layout options.\n* The specific functionality of the contact us form may vary depending on the CMS or website builder being used.",
    "input": "",
    "output": "{\n  \"title\": \"Contact us form\",\n  \"category\": \"contact\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1000\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS file defines a set of styles for an HTML element that is likely part of a user interface or website. The styles are specifically designed to create a card-like layout with a title, description, and an icon.\n\n**File Structure:**\n\nThe CSS file contains four CSS rules, each targeting a specific HTML element within the card layout:\n\n```css\n.wrapper {\n  display: flex;\n  align-items: center;\n  color: var(--mantine-color-white);\n}\n\n.icon {\n  margin-right: var(--mantine-spacing-md);\n  background-color: transparent;\n}\n\n.title {\n  color: var(--mantine-color-blue-0);\n}\n\n.description {\n  color: var(--mantine-color-white);\n}\n```\n\n**Explanation:**\n\n* **.wrapper:**\n    * Defines a CSS class named `wrapper`.\n    * Uses the `display: flex` property to create a flexbox layout.\n    * Sets the `align-items: center` property to vertically align the child elements within the flexbox container.\n    * Sets the `color` property to `var(--mantine-color-white)`, which likely refers to a predefined CSS variable for the white color.\n\n* **.icon:**\n    * Defines a CSS class named `icon`.\n    * Sets the `margin-right` property to `var(--mantine-spacing-md)`, which likely refers to a predefined CSS variable for the spacing of medium size.\n    * Sets the `background-color` property to `transparent`, making the background of the element transparent.\n\n* **.title:**\n    * Defines a CSS class named `title`.\n    * Sets the `color` property to `var(--mantine-color-blue-0)`, which likely refers to a predefined CSS variable for the blue color.\n\n* **.description:**\n    * Defines a CSS class named `description`.\n    * Sets the `color` property to `var(--mantine-color-white)`, which likely refers to a predefined CSS variable for the white color.\n\n**Overall Function:**\n\nThe CSS file styles a card layout with the following elements:\n\n* An icon\n* A title\n* A description\n\nThe card has a white background with a blue title and white description text. The icon is transparent and spaced from the title and description.",
    "input": "",
    "output": ".wrapper {\n  display: flex;\n  align-items: center;\n  color: var(--mantine-color-white);\n}\n\n.icon {\n  margin-right: var(--mantine-spacing-md);\n  background-color: transparent;\n}\n\n.title {\n  color: var(--mantine-color-blue-0);\n}\n\n.description {\n  color: var(--mantine-color-white);\n}\n"
  },
  {
    "instruction": "**ContactIcons.jsx**\n\nThis file creates a component called `ContactIconsList` that displays a list of contact information icons.\n\n**Components and Functionality:**\n\n- **ContactIcon:** A functional component that represents a single contact icon with title and description. It accepts props for icon, title, and description.\n- **ContactIconsList:** A functional component that renders a stack of `ContactIcon` components using mock data.\n\n**Data:**\n\n- The `MOCKDATA` array contains an object for each contact icon, including the title, description, and icon component.\n\n**Rendering:**\n\n- The `ContactIconsList` component iterates through the `MOCKDATA` array and renders a `ContactIcon` component for each item.\n- Each `ContactIcon` component displays the corresponding icon, title, and description.\n\n**Styling:**\n\n- The file uses the `@mantine/core` library for styling, including the `Box` and `Text` components.\n- A CSS module (`ContactIcons.module.css`) defines styles for the `wrapper`, `title`, and `description` classes.\n\n**Usage:**\n\n- The `ContactIconsList` component can be imported and rendered to display a list of contact icons with their corresponding information.\n\n**Purpose:**\n\nThe purpose of this file is to create a visually appealing and informative way to display contact information for a company or organization.\n\n**Key Features:**\n\n- Icons for different contact methods (email, phone, address, working hours)\n- Title and description for each icon\n- Stacked layout for easy readability\n\n**Benefits:**\n\n- Clear and concise way to communicate contact information\n- Visually appealing and engaging\n- Easy to navigate and find relevant information",
    "input": "",
    "output": "import { IconAt, IconMapPin, IconPhone, IconSun } from '@tabler/icons-react';\nimport { Box, Stack, Text } from '@mantine/core';\nimport classes from './ContactIcons.module.css';\n\ninterface ContactIconProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  icon: typeof IconSun;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nfunction ContactIcon({ icon: Icon, title, description, ...others }: ContactIconProps) {\n  return (\n    <div className={classes.wrapper} {...others}>\n      <Box mr=\"md\">\n        <Icon size={24} />\n      </Box>\n\n      <div>\n        <Text size=\"xs\" className={classes.title}>\n          {title}\n        </Text>\n        <Text className={classes.description}>{description}</Text>\n      </div>\n    </div>\n  );\n}\n\nconst MOCKDATA = [\n  { title: 'Email', description: 'hello@mantine.dev', icon: IconAt },\n  { title: 'Phone', description: '+49 (800) 335 35 35', icon: IconPhone },\n  { title: 'Address', description: '844 Morris Park avenue', icon: IconMapPin },\n  { title: 'Working hours', description: '8 a.m. – 11 p.m.', icon: IconSun },\n];\n\nexport function ContactIconsList() {\n  const items = MOCKDATA.map((item, index) => <ContactIcon key={index} {...item} />);\n  return <Stack>{items}</Stack>;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS code defines a set of styles for a user signup form. It is likely part of a web application or website that allows users to create new accounts.\n\n**Functionality:**\n\n**1. Wrapper:**\n- Has a minimum height of 400 pixels.\n- Uses a linear gradient background with colors transitioning from blue-4 to blue-7.\n- Has rounded corners and padding.\n- Media query adjusts padding for smaller screens.\n\n**2. Title:**\n- Uses the Outfit font family.\n- Has a white color with a font weight of 500 and line height of 1.\n\n**3. Description:**\n- Has a blue-0 color with a maximum width of 300 pixels.\n- Media query adjusts maximum width for smaller screens.\n\n**4. Form:**\n- Has a white background color, padding, rounded corners, and a box shadow.\n\n**5. Social Links:**\n- Have a white color.\n- Apply a hover effect that changes the color to blue-1.\n\n**6. Input Fields:**\n- Have a white background color, gray-4 border color, black text color, and gray-5 placeholder color.\n\n**7. Input Labels:**\n- Have a black text color.\n\n**8. Control Button:**\n- Has a blue-6 background color.\n\n**Target Audience:**\n\nThe signup form is likely designed for new users who want to create an account.\n\n**Benefits:**\n\n- Provides a visually appealing and user-friendly signup experience.\n- Collects necessary user information for account creation.\n- Offers social login options for convenience.\n\n**Additional Notes:**\n\n- The code uses variables from a CSS framework called Mantine.\n- Media queries ensure responsive design for different screen sizes.\n- The hover effect on social links is defined using a mixin.",
    "input": "",
    "output": ".wrapper {\n  min-height: 400px;\n  background-image: linear-gradient(\n    -60deg,\n    var(--mantine-color-blue-4) 0%,\n    var(--mantine-color-blue-7) 100%\n  );\n  border-radius: var(--mantine-radius-md);\n  padding: calc(var(--mantine-spacing-xl) * 2.5);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding: calc(var(--mantine-spacing-xl) * 1.5);\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  color: var(--mantine-color-white);\n  font-weight: 500;\n  line-height: 1;\n}\n\n.description {\n  color: var(--mantine-color-blue-0);\n  max-width: 300px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    max-width: 100%;\n  }\n}\n\n.form {\n  background-color: var(--mantine-color-white);\n  padding: var(--mantine-spacing-xl);\n  border-radius: var(--mantine-radius-md);\n  box-shadow: var(--mantine-shadow-lg);\n}\n\n.social {\n  color: var(--mantine-color-white);\n\n  @mixin hover {\n    color: var(--mantine-color-blue-1);\n  }\n}\n\n.input {\n  background-color: var(--mantine-color-white);\n  border-color: var(--mantine-color-gray-4);\n  color: var(--mantine-color-black);\n\n  &::placeholder {\n    color: var(--mantine-color-gray-5);\n  }\n}\n\n.inputLabel {\n  color: var(--mantine-color-black);\n}\n\n.control {\n  background-color: var(--mantine-color-blue-6);\n}\n"
  },
  {
    "instruction": "**File Name:** ContactUs.jsx\n\n**Purpose:**\n\nThe ContactUs.jsx file is a React component that provides a contact form for users to reach out to the organization.\n\n**Components:**\n\n* **StoryWrapper:** A reusable component that wraps the ContactUs component and provides additional functionalities, such as rendering attributes and handling user interactions.\n* **ContactUs:** A form component that collects user information, including name, email, message, and a submission button.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains attributes for the ContactUs form, such as input labels, placeholder text, and button labels.\n\n**Code Functionality:**\n\n* The file imports the necessary components and data.\n* It defines the `Usage()` function, which renders the ContactUs component wrapped in the StoryWrapper component.\n* The `StoryWrapper` component receives the `attributes` and `component` props.\n* The `attributes` prop provides the configuration for the ContactUs form.\n* The `component` prop specifies the ContactUs component to render.\n\n**Usage:**\n\nThe ContactUs component can be used by rendering the `Usage()` function. This will display the contact form with the attributes specified in the `attributes.json` file.\n\n**Additional Features:**\n\n* The StoryWrapper component provides additional functionalities, such as:\n    * Handling user input changes.\n    * Displaying validation errors.\n    * Submitting form data to a server.\n* The ContactUs component includes input fields for name, email, message, and a submit button.\n* The attributes.json file allows for easy customization of the form labels, placeholders, and button labels.\n\n**Overall Function:**\n\nThe ContactUs.jsx file provides a complete solution for a user contact form, including the necessary components, data, and code functionalities. It allows users to easily contact the organization by providing their information and submitting a message.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ContactUs } from './ContactUs';\n\nexport default { title: 'ContactUs' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ContactUs} />;\n}\n"
  },
  {
    "instruction": "**ContactUs.js** is a React functional component that renders a contact form and social media icons.\n\n**Purpose:**\n\nThe purpose of this component is to allow users to contact the website by providing their email address, name, and a message. Users can also connect with the website on social media by clicking on the corresponding icons.\n\n**Components:**\n\n- **Title:** \"Contact us\"\n- **Text:** \"Leave your email and we will get back to you within 24 hours\"\n- **ContactIconsList:** A component that displays a list of social media icons.\n- **TextInput:** For entering email and name.\n- **Textarea:** For entering a message.\n- **Button:** \"Send message\"\n\n**Social Media Icons:**\n\nThe component uses the following social media icons from the '@tabler/icons-react' library:\n\n- Twitter\n- YouTube\n- Instagram\n\n**Rendering Logic:**\n\n- The `ContactIconsList` component is rendered to display the social media icons.\n- A `SimpleGrid` component is used to layout the form and icons in two columns.\n- The `TextInput` and `Textarea` components are used to gather user input.\n- The `Button` component submits the form.\n\n**CSS:**\n\n- The `ContactUs.module.css` file contains styles for the component, such as font sizes, margins, and padding.\n\n**Usage:**\n\nThis component can be used on any page of the website where users need to contact the website.\n\n**Functionality:**\n\n- When the user submits the form, the email address, name, and message are sent to the website's email address.\n- The user is notified that their message has been sent.\n\n**Additional Notes:**\n\n- The `start_of_turn` tag in the prompt suggests that this is the start of a code block.\n- The code is written in JavaScript and uses the React framework.\n- The `@tabler/icons-react` and `@mantine/core` libraries are used for the icons and form components.",
    "input": "",
    "output": "import { IconBrandInstagram, IconBrandTwitter, IconBrandYoutube } from '@tabler/icons-react';\nimport {\n  ActionIcon,\n  Button,\n  Group,\n  SimpleGrid,\n  Text,\n  Textarea,\n  TextInput,\n  Title,\n} from '@mantine/core';\nimport { ContactIconsList } from './ContactIcons';\nimport classes from './ContactUs.module.css';\n\nconst social = [IconBrandTwitter, IconBrandYoutube, IconBrandInstagram];\n\nexport function ContactUs() {\n  const icons = social.map((Icon, index) => (\n    <ActionIcon key={index} size={28} className={classes.social} variant=\"transparent\">\n      <Icon size={22} stroke={1.5} />\n    </ActionIcon>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <SimpleGrid cols={{ base: 1, sm: 2 }} spacing={50}>\n        <div>\n          <Title className={classes.title}>Contact us</Title>\n          <Text className={classes.description} mt=\"sm\" mb={30}>\n            Leave your email and we will get back to you within 24 hours\n          </Text>\n\n          <ContactIconsList />\n\n          <Group mt=\"xl\">{icons}</Group>\n        </div>\n\n        <div className={classes.form}>\n          <TextInput\n            label=\"Email\"\n            placeholder=\"your@email.com\"\n            required\n            radius=\"md\"\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n          <TextInput\n            label=\"Name\"\n            placeholder=\"John Doe\"\n            mt=\"md\"\n            radius=\"md\"\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n          <Textarea\n            required\n            label=\"Your message\"\n            placeholder=\"I want to order your goods\"\n            minRows={4}\n            mt=\"md\"\n            radius=\"md\"\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n\n          <Group justify=\"flex-end\" mt=\"md\">\n            <Button className={classes.control} radius=\"md\">\n              Send message\n            </Button>\n          </Group>\n        </div>\n      </SimpleGrid>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe JSON file describes a user interface element titled \"Inputs with label inside input\". It defines the layout, style, and functionality of the element.\n\n**File Structure:**\n\nThe JSON object contains the following key-value pairs:\n\n- **title:** The title of the element, which is \"Inputs with label inside input\".\n- **category:** The category of the element, which is \"inputs\".\n- **canvas:** An object that defines the layout and style of the element.\n\n**Canvas Object:**\n\nThe \"canvas\" object contains the following key-value pairs:\n\n- **center:** A boolean value that specifies whether the element should be centered within its container. In this case, the value is set to \"true\".\n- **maxWidth:** An integer value that specifies the maximum width of the element. In this case, the value is set to 420.\n\n**Functionality:**\n\nThe element is a set of input fields where the label is placed inside the input field. This can improve the user experience by providing clear and concise labels.\n\n**Additional Notes:**\n\n- The \"title\" and \"category\" values are used for metadata purposes.\n- The \"canvas\" object defines the visual and functional characteristics of the element.\n- The \"center\" and \"maxWidth\" values influence the layout of the element.",
    "input": "",
    "output": "{\n  \"title\": \"Inputs with label inside input\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines styles for a form input element. It includes three main CSS classes:\n\n- `.root`\n- `.input`\n- `.label`\n\n**Purpose:**\n\nThe purpose of this CSS file is to style the input field and its label, providing visual cues and accessibility features.\n\n**Class Descriptions:**\n\n**`.root`:**\n- Sets the `position` property to `relative`. This establishes a relative positioning context for the child elements within the `.input` element.\n\n**`.input`:**\n- Sets the `height` to `54px`.\n- Adds a `padding-top` of `18px`.\n\n**`.label`:**\n- Sets the `position` property to `absolute`. This positions the label absolutely within the `.input` element.\n- Sets `pointer-events: none`. This ensures that the label does not interfere with mouse events on the input field.\n- Sets the `font-size` to `var(--mantine-font-size-xs)`.\n- Adds a `padding-left` of `var(--mantine-spacing-sm)`.\n- Adds a `padding-top` of `calc(var(--mantine-spacing-sm) / 2)`.\n- Sets the `z-index` to `1`. This ensures that the label appears above any other elements within the `.input` element.\n\n**Additional Notes:**\n\n- The CSS variables `--mantine-font-size-xs` and `--mantine-spacing-sm` are assumed to be defined elsewhere in the CSS file or stylesheet.\n- The `.label` element is positioned absolutely within the `.input` element, allowing it to be placed anywhere within the input field.\n- The `pointer-events: none` property ensures that the label does not interfere with mouse interactions with the input field.\n- The `z-index` property ensures that the label remains visible above any other elements within the `.input` element.",
    "input": "",
    "output": ".root {\n  position: relative;\n}\n\n.input {\n  height: 54px;\n  padding-top: 18px;\n}\n\n.label {\n  position: absolute;\n  pointer-events: none;\n  font-size: var(--mantine-font-size-xs);\n  padding-left: var(--mantine-spacing-sm);\n  padding-top: calc(var(--mantine-spacing-sm) / 2);\n  z-index: 1;\n}\n"
  },
  {
    "instruction": "**File Name:** ContainedInputs.jsx\n\n**Purpose:**\n\nThe `ContainedInputs.jsx` file is a React component that provides a set of input fields within a container. It utilizes the `StoryWrapper` component from another module to render the input fields with specific attributes.\n\n**Components:**\n\n- **StoryWrapper:** A component that wraps the `ContainedInputs` component and provides additional attributes and styling.\n- **ContainedInputs:** The main component that contains the input fields.\n\n**File Structure:**\n\n```\nContainedInputs.jsx\nattributes.json\nContainedInputs.stories.jsx\n```\n\n**Key Points:**\n\n- The `ContainedInputs.jsx` file imports the `StoryWrapper` component from the `StoryWrapper` module.\n- It also imports a JSON file named `attributes.json` that provides default attributes for the input fields.\n- The `Usage()` function renders the `ContainedInputs` component within the `StoryWrapper` with the attributes specified in `attributes.json`.\n\n**Workflow:**\n\n- The `StoryWrapper` component receives the `attributes` prop, which contains the default input attributes.\n- The `ContainedInputs` component renders the input fields with the attributes specified in `attributes.json`.\n- The `Usage()` function provides a convenient way to display the `ContainedInputs` component with the specified attributes.\n\n**Purpose:**\n\nThe `ContainedInputs.jsx` file is likely used to create a form or input section with a set of pre-configured input fields. The `attributes.json` file allows for easy customization of the input attributes, such as placeholder text, input types, and validation rules.\n\n**Additional Notes:**\n\n- The `ContainedInputs.stories.jsx` file likely contains additional code for creating and configuring stories for the `ContainedInputs` component.\n- The specific functionality of the input fields may vary depending on the implementation of the `ContainedInputs` component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ContainedInputs } from './ContainedInputs';\n\nexport default { title: 'ContainedInputs' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ContainedInputs} />;\n}\n"
  },
  {
    "instruction": "**ContainedInputs.js**\n\nThis file is a React component that uses the Mantine library to create two input fields: a text input field and a select dropdown.\n\n**Imports:**\n\n* **Select, TextInput:** These are components from the Mantine library.\n* **classes:** This is an object containing CSS classes defined in the ContainedInput.module.css file.\n\n**Component Definition:**\n\n* **ContainedInputs():** This is the main function that renders the component.\n\n**Component Output:**\n\nThe component renders two input fields:\n\n* **TextInput:** This is a text input field with the following properties:\n    * **label:** \"Shipping address\"\n    * **placeholder:** \"15329 Huston 21st\"\n    * **classNames:** This prop applies the CSS classes defined in the ContainedInput.module.css file.\n* **Select:** This is a select dropdown with the following properties:\n    * **mt:** \"md\" (margin top)\n    * **comboboxProps:** This prop sets the `withinPortal` prop to `true`.\n    * **data:** This prop specifies the options for the dropdown, which are \"React\", \"Angular\", \"Svelte\", and \"Vue\".\n    * **placeholder:** \"Pick one\"\n    * **label:** \"Your favorite library/framework\"\n    * **classNames:** This prop applies the CSS classes defined in the ContainedInput.module.css file.\n\n**Purpose:**\n\nThe purpose of this component is to provide a simple form with two input fields. The text input field is used to collect the user's shipping address, while the select dropdown allows the user to choose their favorite library or framework.\n\n**Additional Notes:**\n\n* The `ContainedInput.module.css` file is likely responsible for styling the input fields.\n* The `withinPortal` prop is used to prevent the dropdown from being positioned outside of the viewport.\n* The component is rendered within an empty fragment (`<>`), which allows for nested elements without causing unnecessary rendering overhead.",
    "input": "",
    "output": "import { Select, TextInput } from '@mantine/core';\nimport classes from './ContainedInput.module.css';\n\nexport function ContainedInputs() {\n  return (\n    <>\n      <TextInput label=\"Shipping address\" placeholder=\"15329 Huston 21st\" classNames={classes} />\n\n      <Select\n        mt=\"md\"\n        comboboxProps={{ withinPortal: true }}\n        data={['React', 'Angular', 'Svelte', 'Vue']}\n        placeholder=\"Pick one\"\n        label=\"Your favorite library/framework\"\n        classNames={classes}\n      />\n    </>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration for a \"Cookies banner\" component. It is part of a user interface framework and specifies the visual and functional properties of the banner.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Cookies banner\",\n  \"category\": \"banners\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n- **title:** The title of the banner, which is displayed as a heading. In this case, it is \"Cookies banner\".\n- **category:** The category of the banner, which is \"banners\".\n- **dimmed:** Whether the banner should have a dimmed background. In this case, it is set to `true`.\n- **canvas:** An object that defines the layout of the banner.\n    - **center:** Whether the banner should be centered horizontally. In this case, it is set to `true`.\n    - **maxWidth:** The maximum width of the banner in pixels. In this case, it is set to 420 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to configure a Cookies banner component. The banner is typically used to inform users about the use of cookies on a website and provide them with an opportunity to accept or reject cookies.\n\n**Additional Notes:**\n\n- The `category` property is used for organizational purposes and can be used to group similar banners together.\n- The `dimmed` property is used to visually distinguish the banner from other content on the page.\n- The `canvas` object is used to specify the layout of the banner, including its position and size.",
    "input": "",
    "output": "{\n  \"title\": \"Cookies banner\",\n  \"category\": \"banners\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CookiesBanner.js\n\n**Purpose:**\n\nThe file defines a React component named `CookiesBanner`. This component is responsible for displaying a banner that informs users about the use of cookies on a website.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that wraps the `CookiesBanner` component and provides additional functionality.\n- **CookiesBanner:** The main component that displays the cookie banner.\n\n**Data:**\n\n- **attributes.json:** A JSON file that contains attributes for the `CookiesBanner` component, such as the text to be displayed and the button label.\n\n**Code Overview:**\n\n- The file imports the necessary components and data.\n- It exports a `title` object with the value `\"CookiesBanner\"`.\n- It exports a `Usage` function that renders the `StoryWrapper` component with the `CookiesBanner` component and the `attributes` data.\n\n**How the File Works:**\n\n1. The `StoryWrapper` component receives the `attributes` data and the `CookiesBanner` component as props.\n2. The `StoryWrapper` component renders the `CookiesBanner` component with the provided attributes.\n3. The `CookiesBanner` component displays a banner with the text and button label specified in the `attributes` data.\n\n**Usage:**\n\nThe `CookiesBanner.js` file can be used to display a cookie banner on a website. It can be imported into any React component and rendered to display the banner.\n\n**Additional Notes:**\n\n- The `attributes.json` file can be customized to change the text and button label of the banner.\n- The `StoryWrapper` component provides additional functionality that may be useful for testing or development purposes.\n- The `title` object is used to identify the component for documentation or other purposes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CookiesBanner } from './CookiesBanner';\n\nexport default { title: 'CookiesBanner' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CookiesBanner} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `CookiesBanner.jsx` file is a React component that displays a banner prompting users to allow cookies on a website.\n\n**Function:**\n\nThe `CookiesBanner` function renders a `Paper` component with the following content:\n\n**1. Header:**\n- A title \"Allow cookies\" displayed in a `Text` component with medium font size and bold weight.\n- A close button to dismiss the banner.\n\n**2. Information Text:**\n- A paragraph of text explaining that the website wants to collect various personal information through cookies.\n- The text emphasizes that accepting all cookies is mandatory to access the landing page and that the website is watching user activity.\n\n**3. Buttons:**\n- A \"Cookies preferences\" button that allows users to customize their cookie settings.\n- An \"Accept all\" button that automatically grants consent for all cookies.\n\n**Appearance:**\n\n- The banner is styled with a border, shadow, and rounded corners.\n- The text is in a dimmed color and has a small font size.\n- The buttons are in a default and outline style with small size.\n\n**Usage:**\n\nThe `CookiesBanner` component can be used to inform users about cookie usage and obtain their consent. It is typically displayed as a pop-up or banner on the website.\n\n**Benefits:**\n\n- Complies with privacy regulations and user expectations regarding cookie consent.\n- Provides transparency about the types of data being collected through cookies.\n- Allows users to make informed decisions about their privacy settings.\n\n**Potential Concerns:**\n\n- Some users may be hesitant to grant consent for all cookies.\n- The banner could be intrusive or annoying.\n- The website may not function properly without cookies enabled.\n\n**Overall, the `CookiesBanner.jsx` file plays a crucial role in user privacy by facilitating consent-based cookie management.**",
    "input": "",
    "output": "import { Button, CloseButton, Group, Paper, Text } from '@mantine/core';\n\nexport function CookiesBanner() {\n  return (\n    <Paper withBorder p=\"lg\" radius=\"md\" shadow=\"md\">\n      <Group justify=\"space-between\" mb=\"xs\">\n        <Text fz=\"md\" fw={500}>\n          Allow cookies\n        </Text>\n        <CloseButton mr={-9} mt={-9} />\n      </Group>\n      <Text c=\"dimmed\" fz=\"xs\">\n        So the deal is, we want to spy on you. We would like to know what did you have for todays\n        breakfast, where do you live, how much do you earn and like 50 other things. To view our\n        landing page you will have to accept all cookies. That&apos;s all, and remember that we are\n        watching...\n      </Text>\n      <Group justify=\"flex-end\" mt=\"md\">\n        <Button variant=\"default\" size=\"xs\">\n          Cookies preferences\n        </Button>\n        <Button variant=\"outline\" size=\"xs\">\n          Accept all\n        </Button>\n      </Group>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines a user interface element called a \"Number input with currency select.\"\n\n**Purpose:**\n\nThe purpose of this file is to configure a specific user interface element with the following characteristics:\n\n* **Title:** Number input with currency select\n* **Category:** Inputs\n* **Layout:**\n    * Centers the element on the screen.\n    * Sets the maximum width of the element to 420 pixels.\n\n**Properties:**\n\n* **title:** This property specifies the title of the element, which is displayed above the element.\n* **category:** This property defines the category of the element, which is used for organizational purposes.\n* **canvas:** This property contains configuration options for the element's layout.\n    * **center:** This option specifies that the element should be centered on the screen.\n    * **maxWidth:** This option sets the maximum width of the element to 420 pixels.\n\n**Usage:**\n\nThis configuration file can be used to create a user interface element with the specified characteristics in a specific application or software. The element can be used to input numerical values with the option to select a currency.\n\n**Additional Notes:**\n\n* The file is written in JSON format.\n* The specific features and functionality of the element may vary depending on the application or software in which it is used.\n* The configuration options may differ depending on the specific framework or library used to implement the user interface.",
    "input": "",
    "output": "{\n  \"title\": \"Number input with currency select\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CurrencyInput.jsx\n\n**Purpose:**\n\nThe `CurrencyInput.jsx` file is a React component that represents a currency input field. It is part of a storybook application.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `CurrencyInput` component and provides additional rendering context.\n* **CurrencyInput:** The main component that handles the currency input functionality.\n* **attributes.json:** A JSON file that defines the attributes and options for the `CurrencyInput` component.\n\n**Functionality:**\n\nThe `CurrencyInput` component:\n\n* Imports the necessary components and data from other files.\n* Sets the title of the component to \"CurrencyInput\".\n* Defines a `Usage()` function that renders the `StoryWrapper` component with the following props:\n    * `attributes`: The attributes defined in `attributes.json`.\n    * `component`: The `CurrencyInput` component.\n\n**Storybook Usage:**\n\nThe `Usage()` function is used to create a story within the storybook application. When the story is rendered, the `StoryWrapper` component wraps the `CurrencyInput` component with the specified attributes.\n\n**Attributes:**\n\nThe `attributes.json` file defines the attributes and options for the `CurrencyInput` component, such as:\n\n* Currency symbol\n* Input mask\n* Minimum and maximum values\n\n**Usage:**\n\nThe `CurrencyInput` component can be used in a React application to allow users to input currency values. The attributes defined in `attributes.json` can be used to customize the input field and its behavior.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component provides additional rendering context, such as styling and event handling.\n* The `CurrencyInput` component is likely part of a larger application or library.\n* The specific functionality of the `CurrencyInput` component may vary depending on the implementation.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CurrencyInput } from './CurrencyInput';\n\nexport default { title: 'CurrencyInput' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CurrencyInput} />;\n}\n"
  },
  {
    "instruction": "**CurrencyInput.jsx**\n\nThis file is a React component that allows users to input a transfer amount and select a currency. It uses the `@mantine/core` library to create a `TextInput` field and a `NativeSelect` dropdown.\n\n**Components:**\n\n* **TextInput:** A text input field where users can enter the transfer amount.\n* **NativeSelect:** A dropdown menu where users can select the currency.\n\n**Data:**\n\n* The `data` variable is an array of objects that represents the available currencies. Each object has a `value` property (the currency code) and a `label` property (the currency symbol and name).\n\n**Functionality:**\n\n* The `CurrencyInput` function renders a `TextInput` field and a `NativeSelect` dropdown.\n* The `NativeSelect` dropdown displays a list of currencies from the `data` array.\n* The `rightSectionWidth` prop is set to `28` to ensure that the dropdown and input field align properly.\n* The `styles` prop is used to customize the `input` element, including the font weight, border radius, and width.\n\n**Usage:**\n\n* The `CurrencyInput` component can be used to allow users to input transfer amounts and select currencies.\n* The entered data can be accessed through the state of the component.\n\n**Example:**\n\n```\n<CurrencyInput />\n```\n\n**Purpose:**\n\nThe purpose of this component is to provide a convenient way for users to input currency-related data, such as transfer amounts and exchange rates.\n\n**Additional Notes:**\n\n* The `@mantine/core` library provides a variety of other components that can be used to create interactive and responsive web interfaces.\n* The `start_of_turn` tag in the prompt suggests that this is the beginning of a new topic or discussion.",
    "input": "",
    "output": "import { NativeSelect, TextInput } from '@mantine/core';\n\nconst data = [\n  { value: 'eur', label: '🇪🇺 EUR' },\n  { value: 'usd', label: '🇺🇸 USD' },\n  { value: 'cad', label: '🇨🇦 CAD' },\n  { value: 'gbp', label: '🇬🇧 GBP' },\n  { value: 'aud', label: '🇦🇺 AUD' },\n];\n\nexport function CurrencyInput() {\n  const select = (\n    <NativeSelect\n      data={data}\n      rightSectionWidth={28}\n      styles={{\n        input: {\n          fontWeight: 500,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n          width: 92,\n          marginRight: -2,\n        },\n      }}\n    />\n  );\n\n  return (\n    <TextInput\n      type=\"number\"\n      placeholder=\"1000\"\n      label=\"Transfer amount\"\n      rightSection={select}\n      rightSectionWidth={92}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file describes a custom switch component. It defines the following properties:\n\n**1. Title:**\n- The title of the switch is \"Custom switch\".\n\n**2. Category:**\n- The category of the switch is \"inputs\".\n\n**3. Changelog:**\n- The changelog specifies that the component was last updated in September 2022.\n\n**4. Canvas:**\n- The \"canvas\" object contains a single property called \"center\".\n- This property is set to \"true\", indicating that the switch should be centered within its container.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a custom switch component with the following characteristics:\n\n- Title: Custom switch\n- Category: Inputs\n- Centered within its container\n\n**Usage:**\n\nThis JSON file can be used to create a custom switch component in a graphical user interface (GUI) or other application that supports JSON configuration files. The specific use case for this component is not explicitly stated in the provided file.\n\n**Additional Notes:**\n\n- The \"title\" property is used to display the name of the switch in the user interface.\n- The \"category\" property is used to categorize the switch for organizational purposes.\n- The \"changelog\" property is used to record the date and version of the component's last update.\n- The \"canvas\" object is used to specify the layout and positioning of the switch within its container.",
    "input": "",
    "output": "{\n  \"title\": \"Custom switch\",\n  \"category\": \"inputs\",\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": true\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines the styles for a user interface element that represents a toggle switch. It is responsible for creating a visually appealing and interactive switch that can be used to toggle between two states.\n\n**File Structure:**\n\nThe file consists of three CSS classes:\n\n- `.body`: Defines the layout of the toggle switch.\n- `.track`: Represents the track of the switch.\n- `.thumb`: Represents the thumb of the switch.\n\n**`.body` Class:**\n\n- Sets the `display` property to `flex`. This ensures that the child elements are aligned in a horizontal line.\n- Sets the `align-items` property to `center`. This vertically centers the child elements.\n\n**`.track` Class:**\n\n- Sets the `width` property to `40px`.\n- Sets the `height` property to `6px`.\n- Sets the `overflow` property to `visible`. This ensures that the thumb extends beyond the track.\n\n**`.thumb` Class:**\n\n- Sets the `width` property to `20px`.\n- Sets the `height` property to `20px`.\n- Sets the `left` property to `-2px`. This positions the thumb slightly outside the track.\n- Sets a border with a color that is determined by the `light-dark()` function.\n- Defines a transition for the `background-color` and `left` properties. This creates a smooth animation when the switch is toggled.\n\n**Input Element:**\n\nThe `.thumb` class uses a CSS selector to style the thumb based on an input element. When the input element is checked, the following styles are applied:\n\n- Sets the `background-color` to the `--mantine-color-blue-filled` variable.\n- Sets the `left` property to `calc(100% - 12px)`. This moves the thumb to the right end of the track.\n- Changes the `border-color` to a color determined by the `light-dark()` function.\n\n**Purpose:**\n\nThe CSS file provides the styling for a toggle switch, which can be used to control a binary state or setting. When the user clicks or taps the thumb, it is toggled between two states, represented by the different colors and positions.",
    "input": "",
    "output": ".body {\n  display: flex;\n  align-items: center;\n}\n\n.track {\n  width: 40px;\n  height: 6px;\n  overflow: visible;\n}\n\n.thumb {\n  width: 20px;\n  height: 20px;\n  left: -2px;\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n  transition:\n    background-color 100ms ease,\n    left 100ms ease;\n\n  input:checked + * > & {\n    background-color: var(--mantine-color-blue-filled);\n    left: calc(100% - 12px);\n    border-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** CustomSwitch.jsx\n\n**Purpose:**\n\nThe `CustomSwitch.jsx` file appears to be a React component that represents a custom switch control. It is responsible for rendering and handling interactions with a switch element.\n\n**Components:**\n\n* **StoryWrapper:** A React component that provides a convenient way to render and test the `CustomSwitch` component with specific attributes.\n* **CustomSwitch:** The main component that represents the custom switch.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n* `StoryWrapper` component is imported from the `StoryWrapper` module.\n* `attributes.json` file is imported, likely containing the default attributes for the switch.\n* `CustomSwitch` component is imported from the current file.\n\n**2. Component Export:**\n\n* The file exports an object with a `title` property set to `'CustomSwitch'`. This title is likely used for documentation or identification purposes.\n\n**3. Usage Function:**\n\n* The `Usage()` function is exported and returns a `StoryWrapper` component.\n* The `attributes` prop of the `StoryWrapper` is set to the imported `attributes` object.\n* The `component` prop of the `StoryWrapper` is set to the `CustomSwitch` component.\n\n**Usage:**\n\nThe `Usage()` function can be used to render the `CustomSwitch` component with the specified attributes in a testing environment.\n\n**Expected Functionality:**\n\n* The `CustomSwitch` component will render a switch element with the attributes specified in the `attributes.json` file.\n* The switch element will handle user interactions, such as toggling its state.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for testing and documentation purposes.\n* The `attributes.json` file likely contains default configuration options for the switch.\n* The specific functionality of the `CustomSwitch` component may be further defined in the code not shown here.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { CustomSwitch } from './CustomSwitch';\n\nexport default { title: 'CustomSwitch' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={CustomSwitch} />;\n}\n"
  },
  {
    "instruction": "**File Name:** CustomSwitch.jsx\n\n**File Description:**\n\nThe `CustomSwitch.jsx` file creates a custom switch component using the Mantine UI library.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n- `import { Group, Switch } from '@mantine/core';`: Imports the `Group` and `Switch` components from the Mantine UI library.\n- `import classes from './CustomSwitch.module.css';`: Imports the CSS classes defined in the `CustomSwitch.module.css` file.\n\n**2. Component Function:**\n\n- `export function CustomSwitch() {}`: Defines a React functional component named `CustomSwitch`.\n\n**3. Component Code:**\n\n- `<Group justify=\"center\" p=\"md\">`: Creates a `Group` component with the following props:\n    - `justify=\"center\"`: Centers the children horizontally.\n    - `p=\"md\"`: Adds medium padding around the group.\n- `<Switch label=\"Custom Switch\" classNames={classes} withThumbIndicator={false} />`: Creates a `Switch` component with the following props:\n    - `label=\"Custom Switch\"`: Sets the label for the switch.\n    - `classNames={classes}`: Applies the CSS classes defined in the `CustomSwitch.module.css` file.\n    - `withThumbIndicator={false}`: Disables the default thumb indicator for the switch.\n\n**4. Purpose:**\n\nThe `CustomSwitch.jsx` file creates a custom switch component with the following features:\n\n- A centered label.\n- A custom CSS style applied through the `classNames` prop.\n- A disabled thumb indicator.\n\n**Usage:**\n\nThis component can be used to add a custom switch element to a React application using the Mantine UI library.\n\n**Example:**\n\n```\n<CustomSwitch />\n```\n\n**Note:**\n\n- The `CustomSwitch.module.css` file should contain CSS styles for the custom switch.\n- The `classNames` prop value in the `Switch` component should match the filename of the CSS file (without the extension).",
    "input": "",
    "output": "import { Group, Switch } from '@mantine/core';\nimport classes from './CustomSwitch.module.css';\n\nexport function CustomSwitch() {\n  return (\n    <Group justify=\"center\" p=\"md\">\n      <Switch label=\"Custom Switch\" classNames={classes} withThumbIndicator={false} />\n    </Group>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that describes a drag-and-drop list interface.\n\n**Contents:**\n\n* **title:** The title of the list, which is \"Drag'n'drop list\".\n* **category:** The category of the list, which is \"dnd\".\n* **canvas:** An object that specifies the canvas settings for the list.\n\n**Canvas Settings:**\n\n* **center:** A boolean value that specifies whether the list should be centered on the screen. The value is set to `true`.\n* **maxWidth:** The maximum width of the list in pixels. The value is set to `420`.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the layout and settings for a drag-and-drop list interface. The settings include:\n\n* The title of the list\n* The category of the list\n* The canvas size and position\n\n**Usage:**\n\nThis configuration file can be used by an application or framework that supports drag-and-drop interfaces. The file can be loaded and parsed to create a drag-and-drop list with the specified settings.\n\n**Additional Notes:**\n\n* The `title`, `category`, and `maxWidth` values can be customized as needed.\n* The `center` setting determines the positioning of the list on the screen.\n* The `canvas` object provides additional configuration options for the list's canvas, such as background color and padding.\n\n**Example Usage:**\n\n```\nconst config = require('./drag-and-drop-list.json');\n\n// Create a drag-and-drop list with the settings from the configuration file\nconst list = new DragAndDropList(config);\n```",
    "input": "",
    "output": "{\n  \"title\": \"Drag'n'drop list\",\n  \"category\": \"dnd\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** .item.css\n\n**Purpose:**\n\nThe .item.css file defines the styles for an HTML element with the class name \"item\". It styles various aspects of the element, including its layout, borders, padding, background color, margin, and shadow.\n\n**Description:**\n\n- **.item:**\n   - Displays the element as a flex container.\n   - Aligns its child elements vertically at the center.\n   - Sets a border radius of 8 pixels.\n   - Applies a 1px solid border with a light or dark color depending on the theme.\n   - Adds padding of 8 pixels at the top and 16 pixels at the left and right.\n   - Sets a background color of white or dark gray depending on the theme.\n   - Adds a margin of 8 pixels at the bottom.\n\n- **.itemDragging:**\n   - Adds a subtle shadow to the element, indicating that it is being dragged.\n\n- **.symbol:**\n   - Sets the font size to 30 pixels.\n   - Sets the font weight to bold.\n   - Sets a width of 60 pixels.\n\n**Key Features:**\n\n- Responsive design: The element adapts to different screen sizes.\n- Visual hierarchy: The shadow and border highlight the draggable element.\n- Clear layout: The flexbox layout ensures that the elements are aligned properly.\n- Theme support: The styles are adjusted based on the chosen theme (light or dark).\n\n**Usage:**\n\nThe .item.css file is likely used in a web application to style elements that represent items in a list. The \".itemDragging\" class can be added to an element to indicate that it is being dragged. The \".symbol\" class can be used to display an icon or symbol within the item.",
    "input": "",
    "output": ".item {\n  display: flex;\n  align-items: center;\n  border-radius: var(--mantine-radius-md);\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n  padding: var(--mantine-spacing-sm) var(--mantine-spacing-lg);\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-5));\n  margin-bottom: var(--mantine-spacing-sm);\n}\n\n.itemDragging {\n  box-shadow: var(--mantine-shadow-sm);\n}\n\n.symbol {\n  font-size: 30px;\n  font-weight: 700;\n  width: 60px;\n}\n"
  },
  {
    "instruction": "**File Name:** DndList.jsx\n\n**Purpose:**\n\nThe `DndList.jsx` file is a React component that uses the `StoryWrapper` component to render a list of Dungeons & Dragons (D&D) characters. It imports necessary components and data from other files.\n\n**Description:**\n\n- **Imports:**\n    - `StoryWrapper` from the `StoryWrapper` component directory.\n    - `attributes.json` file containing attributes for the D&D characters.\n    - `DndList` from the current file.\n\n- **Exports:**\n    - `title: 'DndList'` defines the title of the component.\n\n- **Usage Function:**\n    - Creates a React component using the `StoryWrapper` component.\n    - Passes the `attributes` and `DndList` components as props to the `StoryWrapper`.\n    - Renders the `StoryWrapper` component with the specified attributes and component.\n\n**Workflow:**\n\n1. The `DndList` component renders a list of characters using the `attributes.json` data.\n2. The `StoryWrapper` component provides additional styling and context for the list.\n3. The `Usage` function instantiates the `StoryWrapper` component with the `DndList` and `attributes`.\n\n**Additional Notes:**\n\n- `attributes.json` should contain an array of objects, each representing a D&D character with attributes such as name, race, class, etc.\n- The `StoryWrapper` component likely provides additional functionality, such as styling, spacing, and layout.\n- The `DndList` component may handle user interactions, such as selecting characters or adding new ones.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DndList } from './DndList';\n\nexport default { title: 'DndList' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DndList} />;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided file is a React functional component named `DndList`. It uses the `@dnd-kit/sortable` and `@dnd-kit/core` libraries to implement a drag-and-drop list of chemical elements.\n\n**Functionality:**\n\n- **Data:** The component defines an array of chemical elements with their position, mass, symbol, and name.\n\n- **Sortable Items:** Each element is represented by a `SortableItem` component, which renders the element's symbol, name, and additional information. It also uses the `useSortable` hook to enable drag-and-drop functionality for each item.\n\n- **Sortable Context:** The `SortableContext` component provides a context for the sortable items, defining the sorting strategy as vertical list sorting.\n\n- **DndContext:** The `DndContext` component sets up the drag-and-drop functionality, specifying the sensors (pointer and keyboard) and collision detection method.\n\n- **Drag End Handling:** When a drag ends, the `handleDragEnd` function checks if the dragged item was dropped over a valid target. If so, the position of the item is updated in the state using the `arrayMove` function.\n\n**Components:**\n\n- **SortableItem:**\n    - Uses the `useSortable` hook to provide drag-and-drop capabilities.\n    - Renders the symbol, name, and element information.\n- **DndList:**\n    - Initializes the state with the chemical elements data.\n    - Sets up the drag-and-drop context.\n    - Maps the elements to `SortableItem` components.\n\n**Purpose:**\n\nThe `DndList` component provides a visually appealing and interactive way to sort chemical elements based on their position or other criteria.\n\n**Additional Features:**\n\n- Collision detection using the `closestCenter` method.\n- Keyboard navigation support.\n- Mantine components for styling and layout.\n\n**Conclusion:**\n\nThe `DndList` file showcases a well-implemented drag-and-drop list using the `@dnd-kit` library. It provides a user-friendly interface for sorting chemical elements with interactive drag-and-drop functionality.",
    "input": "",
    "output": "import {\n  closestCenter,\n  DndContext,\n  DragEndEvent,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport cx from 'clsx';\nimport { Text } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport classes from './DndList.module.css';\n\nconst data = [\n  { position: 6, mass: 12.011, symbol: 'C', name: 'Carbon' },\n  { position: 7, mass: 14.007, symbol: 'N', name: 'Nitrogen' },\n  { position: 39, mass: 88.906, symbol: 'Y', name: 'Yttrium' },\n  { position: 56, mass: 137.33, symbol: 'Ba', name: 'Barium' },\n  { position: 58, mass: 140.12, symbol: 'Ce', name: 'Cerium' },\n];\n\ninterface ItemProps {\n  item: (typeof data)[number];\n  index: number; // kept if needed elsewhere\n}\n\nfunction SortableItem({ item }: ItemProps) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id: item.symbol,\n  });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={cx(classes.item, { [classes.itemDragging]: isDragging })}\n      {...attributes}\n      {...listeners}\n    >\n      <Text className={classes.symbol}>{item.symbol}</Text>\n      <div>\n        <Text>{item.name}</Text>\n        <Text c=\"dimmed\" size=\"sm\">\n          Position: {item.position} • Mass: {item.mass}\n        </Text>\n      </div>\n    </div>\n  );\n}\n\nexport function DndList() {\n  const [state, handlers] = useListState(data);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, { activationConstraint: { distance: 5 } }),\n    useSensor(KeyboardSensor)\n  );\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const oldIndex = state.findIndex((i) => i.symbol === active.id);\n    const newIndex = state.findIndex((i) => i.symbol === over.id);\n    handlers.setState(arrayMove(state, oldIndex, newIndex));\n  };\n\n  return (\n    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n      <SortableContext items={state.map((i) => i.symbol)} strategy={verticalListSortingStrategy}>\n        {state.map((item, index) => (\n          <SortableItem key={item.symbol} item={item} index={index} />\n        ))}\n      </SortableContext>\n    </DndContext>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** Drag'n'drop list with handle\n\n**Purpose:**\n\nThe JSON file defines the configuration for a drag-and-drop list with a handle. It specifies the title, category, and layout options for the list.\n\n**Content:**\n\n```json\n{\n  \"title\": \"Drag'n'drop list with handle\",\n  \"category\": \"dnd\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the list, displayed at the top of the list.\n* **category:** The category of the list, used for organizational purposes. In this case, the category is \"dnd\" (drag-and-drop).\n* **canvas:** An object that defines the layout options for the list.\n    * **center:** Whether to center the list horizontally within its container.\n    * **maxWidth:** The maximum width of the list.\n\n**Configuration:**\n\n* **Title:** Drag'n'drop list with handle\n* **Category:** dnd\n* **Center:** True\n* **Max Width:** 420\n\n**Purpose:**\n\nThe purpose of this file is to define the configuration for a drag-and-drop list with a handle. The configuration includes the title, category, and layout options for the list. This information can be used to create a visual element that can be dragged and dropped, with a handle for easy manipulation.\n\n**Usage:**\n\nThis JSON file can be used to configure a drag-and-drop list with a handle in a web application or other interactive environment. The configuration can be loaded and applied to create the desired list element.",
    "input": "",
    "output": "{\n  \"title\": \"Drag'n'drop list with handle\",\n  \"category\": \"dnd\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThis file defines the CSS styles for an HTML element with the class name `item`.\n\n**Purpose:**\n\nThe `item` class is used to style a single item in a list or collection. It includes various properties such as:\n\n- Border style and color\n- Padding and margin\n- Background color\n- Display and alignment properties\n\n**CSS Code:**\n\n```css\n.item {\n  display: flex;\n  align-items: center;\n  border-radius: var(--mantine-radius-md);\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n  padding: var(--mantine-spacing-sm) var(--mantine-spacing-lg);\n  padding-left: calc(var(--mantine-spacing-xl) - var(--mantine-spacing-md));\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-5));\n  margin-bottom: var(--mantine-spacing-sm);\n}\n\n.itemDragging {\n  box-shadow: var(--mantine-shadow-sm);\n}\n\n.symbol {\n  font-size: 30px;\n  font-weight: 700;\n  width: 60px;\n}\n\n.dragHandle {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n  margin-right: var(--mantine-spacing-lg);\n}\n```\n\n**Key CSS Properties:**\n\n- **display:** Flexbox\n- **align-items:** Center\n- **border-radius:** Medium radius\n- **border:** 1px solid light or dark gray\n- **padding:** Small top/bottom and large left/right\n- **padding-left:** Extra large left padding with offset\n- **background-color:** Light or dark background based on theme\n- **margin-bottom:** Small margin bottom\n- **box-shadow:** Shadow on dragging state\n- **font-size:** 30px for symbol\n- **font-weight:** Bold for symbol\n- **width:** 60px for symbol\n- **color:** Light or dark gray for drag handle icon\n- **margin-right:** Large margin right for drag handle\n\n**Purpose of Each Class:**\n\n- `.item`: Styles the base item element.\n- `.itemDragging`: Adds a shadow to the item when it is being dragged.\n- `.symbol`: Styles the symbol within the item.\n- `.dragHandle`: Styles the drag handle element.\n\n**Usage:**\n\nThis CSS file is likely included in an HTML document that uses the `item` class to style individual list items. The specific HTML structure and content of these items are not included in the provided code snippet.",
    "input": "",
    "output": ".item {\n  display: flex;\n  align-items: center;\n  border-radius: var(--mantine-radius-md);\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n  padding: var(--mantine-spacing-sm) var(--mantine-spacing-lg);\n  padding-left: calc(var(--mantine-spacing-xl) - var(--mantine-spacing-md));\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-5));\n  margin-bottom: var(--mantine-spacing-sm);\n}\n\n.itemDragging {\n  box-shadow: var(--mantine-shadow-sm);\n}\n\n.symbol {\n  font-size: 30px;\n  font-weight: 700;\n  width: 60px;\n}\n\n.dragHandle {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n  margin-right: var(--mantine-spacing-lg);\n}\n"
  },
  {
    "instruction": "**DndListHandle.js**\n\nThis file is a React component that handles the functionality of a list of items in a Dungeons & Dragons game.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the DndListHandle component and provides additional functionality.\n* **DndListHandle:** The main component responsible for displaying and handling the list of items.\n\n**Importing Data:**\n\n* The `attributes.json` file contains the initial attributes and settings for the list.\n* The `StoryWrapper` component imports this file to pass the attributes to the `DndListHandle` component.\n\n**Usage:**\n\n* The `Usage()` function creates an instance of the `StoryWrapper` component.\n* The `StoryWrapper` component receives the `attributes` and `DndListHandle` components as props.\n* The `DndListHandle` component renders the list of items based on the `attributes` prop.\n\n**Functionality:**\n\n* The `DndListHandle` component likely includes the following functionality:\n    * Displaying the list of items.\n    * Handling drag-and-drop interactions.\n    * Updating the list based on user actions.\n    * Persisting the list state to the `attributes.json` file.\n\n**Purpose:**\n\nThe purpose of this file is to provide a user interface for managing a list of items in a Dungeons & Dragons game. The list can be used for various purposes, such as:\n\n* Inventory management\n* Spellcasting\n* Character equipment\n\n**Additional Notes:**\n\n* The `StoryWrapper` component may provide additional functionality, such as rendering a title or handling user interactions.\n* The `DndListHandle` component is likely customized to suit the specific needs of the game and the user interface design.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DndListHandle } from './DndListHandle';\n\nexport default { title: 'DndListHandle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DndListHandle} />;\n}\n"
  },
  {
    "instruction": "**File Name:** DndListHandle.js\n\n**Purpose:**\n\nThe file creates a sortable list of elements using the `@dnd-kit/sortable` library. Users can drag and drop elements within the list to change their order.\n\n**Components:**\n\n* **SortableItem:** Represents a single item in the list. It includes a drag handle, symbol, name, and mass information.\n* **DndListHandle:** The main component that renders the sortable list.\n\n**Functionality:**\n\n* **Data:** The file defines an array of data objects representing the elements in the list. Each object contains information about the element's position, mass, symbol, and name.\n* **SortableContext:** Creates a sortable context for the list of elements.\n* **SortableItem:** Each item in the list is a sortable element with a drag handle.\n* **DragEndEvent:** When a drag operation ends, the `handleDragEnd()` function is called. It checks if the dragged element was dropped on a valid target and updates the list state accordingly.\n* **DndContext:** Provides the necessary configuration for the sortable list, including collision detection and drag end event handling.\n\n**Features:**\n\n* Drag and drop functionality\n* Sortable elements\n* Drag handle for each element\n* Display of element information (symbol, name, mass)\n* Item positioning based on a vertical list sorting strategy\n\n**Usage:**\n\nThe `DndListHandle` component can be used to create a sortable list of elements. The list items can be dragged and dropped to change their order.\n\n**Additional Notes:**\n\n* The `@dnd-kit/sortable` library provides the necessary functionality for sortable lists.\n* The `@tabler/icons-react` library provides the drag handle icon.\n* The `@mantine/core` and `@mantine/hooks` libraries are used for styling and state management.\n* The `closestCenter()` collision detection method is used to determine if two elements collide.",
    "input": "",
    "output": "import {\n  closestCenter,\n  DndContext,\n  DragEndEvent,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { IconGripVertical } from '@tabler/icons-react';\nimport cx from 'clsx';\nimport { Text } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport classes from './DndListHandle.module.css';\n\nconst data = [\n  { position: 6, mass: 12.011, symbol: 'C', name: 'Carbon' },\n  { position: 7, mass: 14.007, symbol: 'N', name: 'Nitrogen' },\n  { position: 39, mass: 88.906, symbol: 'Y', name: 'Yttrium' },\n  { position: 56, mass: 137.33, symbol: 'Ba', name: 'Barium' },\n  { position: 58, mass: 140.12, symbol: 'Ce', name: 'Cerium' },\n];\n\ninterface ItemProps {\n  item: (typeof data)[number];\n}\n\nfunction SortableItem({ item }: ItemProps) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id: item.symbol,\n  });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div\n      className={cx(classes.item, { [classes.itemDragging]: isDragging })}\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n    >\n      <div className={classes.dragHandle} {...listeners}>\n        <IconGripVertical size={18} stroke={1.5} />\n      </div>\n      <Text className={classes.symbol}>{item.symbol}</Text>\n      <div>\n        <Text>{item.name}</Text>\n        <Text c=\"dimmed\" size=\"sm\">\n          Position: {item.position} • Mass: {item.mass}\n        </Text>\n      </div>\n    </div>\n  );\n}\n\nexport function DndListHandle() {\n  const [state, handlers] = useListState(data);\n  const sensors = useSensors(\n    useSensor(PointerSensor, { activationConstraint: { distance: 5 } }),\n    useSensor(KeyboardSensor)\n  );\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const oldIndex = state.findIndex((i) => i.symbol === active.id);\n    const newIndex = state.findIndex((i) => i.symbol === over.id);\n    handlers.setState(arrayMove(state, oldIndex, newIndex));\n  };\n\n  return (\n    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n      <SortableContext items={state.map((i) => i.symbol)} strategy={verticalListSortingStrategy}>\n        {state.map((item) => (\n          <SortableItem key={item.symbol} item={item} />\n        ))}\n      </SortableContext>\n    </DndContext>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration for a drag-and-drop table.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Drag'n'drop table\",\n  \"category\": \"dnd\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** This property specifies the title of the drag-and-drop table. In this case, it is \"Drag'n'drop table\".\n* **category:** This property defines the category of the table. In this case, it is \"dnd\" (drag-and-drop).\n* **canvas:** This property contains configuration options for the table's canvas.\n    * **center:** If set to `true`, the table will be centered within its container.\n    * **maxWidth:** This property specifies the maximum width of the table canvas. In this case, it is 420.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a drag-and-drop table with the following characteristics:\n\n* Title: Drag'n'drop table\n* Category: drag-and-drop\n* Canvas configuration:\n    * Centered within its container\n    * Maximum width of 420\n\n**Usage:**\n\nThis JSON file can be used to initialize and configure a drag-and-drop table in a web application or software program. It can be loaded and parsed by JavaScript code to extract the configuration options and use them to create and configure the table accordingly.\n\n**Example:**\n\n```javascript\nconst config = JSON.parse('{ \"title\": \"Drag\\'n\\'drop table\", \"category\": \"dnd\", \"canvas\": { \"center\": true, \"maxWidth\": 420 } }');\n\n// Create a new drag-and-drop table with the specified configuration\nconst table = new DragAndDropTable(config);\n```",
    "input": "",
    "output": "{\n  \"title\": \"Drag'n'drop table\",\n  \"category\": \"dnd\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines styles for two HTML elements:\n\n- `.item`: Represents an individual item in a list.\n- `.dragHandle`: Represents a drag handle element within each item.\n\n**Purpose:**\n\nThe primary purpose of this CSS file is to style the appearance of list items and their drag handles.\n\n**Styles for `.item` Element:**\n\n- `background-color`: Sets the background color of each list item to the value of the `--mantine-color-body` CSS variable. This variable typically represents the background color of the entire page or container.\n- `--mantine-color-body`: Represents the background color of the page or container, defined elsewhere in the CSS code.\n\n**Styles for `.dragHandle` Element:**\n\n- `width`: Sets the width of the drag handle to 40 pixels.\n- `display: flex`: Makes the drag handle a flex container, allowing its child elements to be aligned and positioned within it.\n- `align-items: center`: Centers the child elements vertically within the drag handle.\n- `justify-content: center`: Centers the child elements horizontally within the drag handle.\n- `height: 100%`: Sets the height of the drag handle to 100% of the height of its parent item.\n- `color`: Sets the color of the drag handle to a light or dark version of the `--mantine-color-gray-6` CSS variable, depending on the theme mode (light or dark).\n- `--mantine-color-gray-6`: Represents a specific gray color, defined elsewhere in the CSS code.\n- `--mantine-color-dark-1`: Represents a specific dark color, defined elsewhere in the CSS code.\n\n**Conclusion:**\n\nThe CSS file defines styles for list items and their drag handles, primarily to enhance the user interface by providing a visually distinct and user-friendly drag and drop experience.",
    "input": "",
    "output": ".item {\n  background-color: var(--mantine-color-body);\n}\n\n.dragHandle {\n  width: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n}\n"
  },
  {
    "instruction": "**File Name:** DndTable.jsx\n\n**Purpose:**\n\nThe DndTable.jsx file is a React component that serves as a table for displaying data related to Dungeons & Dragons (D&D). It utilizes the StoryWrapper component and an external JSON file named attributes.json to provide dynamic content and attributes.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that provides a wrapper for the DndTable component.\n- **DndTable:** The main component that displays the D&D table.\n\n**Data:**\n\n- **attributes.json:** A JSON file that contains the attributes and their values for the D&D table.\n\n**Functionality:**\n\n1. **Import:**\n   - Imports the necessary components and data from other files.\n2. **Default Export:**\n   - Exports a title object for the component.\n3. **Usage Function:**\n   - Creates a StoryWrapper component with the following props:\n     - `attributes`: The attributes data from the attributes.json file.\n     - `component`: The DndTable component.\n4. **StoryWrapper:**\n   - Provides a wrapper for the DndTable component.\n5. **DndTable:**\n   - Renders the D&D table based on the attributes specified in attributes.json.\n\n**Usage:**\n\nThe DndTable component can be used to display a D&D table by importing it into another React component and calling the Usage function.\n\n**Example:**\n\n```\nimport DndTable from './DndTable';\n\nconst MyComponent = () => {\n  return <Usage />;\n};\n```\n\n**Conclusion:**\n\nThe DndTable.jsx file is a React component that provides a dynamic and interactive D&D table. It utilizes the StoryWrapper component and external JSON data to create a versatile and reusable table for D&D campaigns.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DndTable } from './DndTable';\n\nexport default { title: 'DndTable' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DndTable} />;\n}\n"
  },
  {
    "instruction": "**DndTable.js** is a React component that implements a sortable table using the `@dnd-kit/sortable` and `@dnd-kit/core` libraries. It allows users to drag and drop table rows to rearrange their order.\n\n**Features:**\n\n- Sortable table rows\n- Drag and drop functionality\n- Collision detection using `closestCenter`\n- Keyboard navigation\n- Drag handle for each row\n\n**How it Works:**\n\n- The `SortableContext` component wraps the table body and provides a list of item IDs.\n- Each table row is wrapped in a `SortableRow` component, which uses the `useSortable` hook to handle drag and drop events.\n- The `handleDragEnd` function is called when a drag operation ends. It checks if the dragged row is over another row and updates the state accordingly.\n- The `SortableRow` component renders a drag handle, which triggers the drag operation.\n\n**Code Breakdown:**\n\n- The component imports necessary libraries and defines an initial data set.\n- It defines a `SortableRow` component that represents a single table row.\n- The `DndTable` component uses the `useListState` hook to manage the state of the data.\n- It uses the `useSensors` hook to enable keyboard and pointer sensors.\n- The `SortableContext` component provides the sortable context.\n- The `Table` component displays the table with sortable rows.\n- The `handleDragEnd` function handles drag-and-drop events.\n\n**Usage:**\n\nTo use the `DndTable` component, simply import it into your React application and render it.\n\n**Example:**\n\n```\n<DndTable />\n```\n\n**Benefits:**\n\n- Improved user experience through drag-and-drop functionality.\n- Enhanced data organization and management.\n- Easy integration with other React components.\n\n**Note:**\n\n- The `classes.item` class is used for styling the sortable rows.\n- The `IconGripVertical` component from the `@tabler/icons-react` library provides the drag handle.\n- The `Table` component from the `@mantine/core` library is used for table rendering.",
    "input": "",
    "output": "import {\n  closestCenter,\n  DndContext,\n  DragEndEvent,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { IconGripVertical } from '@tabler/icons-react';\nimport { Table } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport classes from './DndTable.module.css';\n\nconst data = [\n  { position: 6, mass: 12.011, symbol: 'C', name: 'Carbon' },\n  { position: 7, mass: 14.007, symbol: 'N', name: 'Nitrogen' },\n  { position: 39, mass: 88.906, symbol: 'Y', name: 'Yttrium' },\n  { position: 56, mass: 137.33, symbol: 'Ba', name: 'Barium' },\n  { position: 58, mass: 140.12, symbol: 'Ce', name: 'Cerium' },\n];\n\ninterface RowProps {\n  item: (typeof data)[number];\n}\n\nfunction SortableRow({ item }: RowProps) {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({\n    id: item.symbol,\n  });\n\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <Table.Tr ref={setNodeRef} style={style} className={classes.item} {...attributes}>\n      <Table.Td>\n        <div className={classes.dragHandle} {...listeners}>\n          <IconGripVertical size={18} stroke={1.5} />\n        </div>\n      </Table.Td>\n      <Table.Td w={80}>{item.position}</Table.Td>\n      <Table.Td w={120}>{item.name}</Table.Td>\n      <Table.Td w={80}>{item.symbol}</Table.Td>\n      <Table.Td>{item.mass}</Table.Td>\n    </Table.Tr>\n  );\n}\n\nexport function DndTable() {\n  const [state, handlers] = useListState(data);\n  const sensors = useSensors(\n    useSensor(PointerSensor, { activationConstraint: { distance: 5 } }),\n    useSensor(KeyboardSensor)\n  );\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (!over || active.id === over.id) {\n      return;\n    }\n    const oldIndex = state.findIndex((i) => i.symbol === active.id);\n    const newIndex = state.findIndex((i) => i.symbol === over.id);\n    handlers.setState(arrayMove(state, oldIndex, newIndex));\n  };\n\n  return (\n    <Table.ScrollContainer minWidth={420}>\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <Table>\n          <Table.Thead>\n            <Table.Tr>\n              <Table.Th w={40} />\n              <Table.Th w={80}>Position</Table.Th>\n              <Table.Th w={120}>Name</Table.Th>\n              <Table.Th w={40}>Symbol</Table.Th>\n              <Table.Th>Mass</Table.Th>\n            </Table.Tr>\n          </Table.Thead>\n          <SortableContext\n            items={state.map((i) => i.symbol)}\n            strategy={verticalListSortingStrategy}\n          >\n            <Table.Tbody>\n              {state.map((item) => (\n                <SortableRow key={item.symbol} item={item} />\n              ))}\n            </Table.Tbody>\n          </SortableContext>\n        </Table>\n      </DndContext>\n    </Table.ScrollContainer>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file provided is a JSON configuration file that defines a header with multiple layers. It specifies the title, category, responsiveness, and canvas configuration for this header.\n\n**Header Title:**\n\n* `title`: The title of the header is set to \"Header with multiple layers\".\n\n**Header Category:**\n\n* `category`: The category of the header is set to \"headers\".\n\n**Responsive Header:**\n\n* `responsive`: The header is set to be responsive, meaning it will adjust its layout automatically based on the screen size.\n\n**Canvas Configuration:**\n\n* `canvas`: An object that specifies the canvas configuration.\n    * `center`: The center property is set to false. This indicates that the header content should not be centered within the canvas.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define a header with the following characteristics:\n\n* A title of \"Header with multiple layers\".\n* Categorized as a header.\n* Responsive layout.\n* Non-centered content.\n\n**Usage:**\n\nThis configuration file can be used in a header component or template to render the header with the specified title, category, responsiveness, and canvas configuration. The header can then be used in a web application or website to provide a visually appealing and informative header.",
    "input": "",
    "output": "{\n  \"title\": \"Header with multiple layers\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a header section of a web page. It provides the visual layout, colors, fonts, and animations for the header elements.\n\n**Header Section:**\n\nThe header section consists of the following elements:\n\n- **.header:** The outer container of the header, with a fixed height of 84px and a bottom margin of 120px.\n- **.inner:** The inner content area within the header, which includes the logo, navigation links, and social media icons.\n- **.links:** A container for the navigation links, displayed as a column with space between the elements.\n- **.mainLinks:** A group of main navigation links with uppercase text and a blue border on the active link.\n- **.secondaryLink:** A group of secondary navigation links with uppercase text.\n\n**Styles:**\n\n- The header background color matches the body background color.\n- The links are displayed in uppercase with a smaller font size.\n- The main navigation links have a blue border on the active link.\n- The secondary navigation links are less prominent.\n- The header uses a light-dark color scheme based on the user's theme preference.\n\n**Animations:**\n\n- The main navigation links have a smooth transition for border color and color changes.\n- The secondary navigation links also have a smooth transition for color changes.\n\n**Additional Features:**\n\n- The header uses the `light-dark()` function to automatically adjust the colors based on the user's theme preference.\n- The `@mixin hover` rule defines a common hover effect for both main and secondary navigation links.\n\n**Purpose:**\n\nThe header section of the web page serves as the main navigation area, providing users with access to important pages and sections of the website. The header style sheet ensures a visually appealing and consistent header experience across different devices and browsers.",
    "input": "",
    "output": ".header {\n  height: 84px;\n  margin-bottom: 120px;\n  background-color: var(--mantine-color-body);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.inner {\n  height: 84px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.links {\n  padding-top: var(--mantine-spacing-lg);\n  height: 84px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.mainLinks {\n  margin-right: calc(var(--mantine-spacing-sm) * -1);\n}\n\n.mainLink {\n  text-transform: uppercase;\n  font-size: var(--mantine-font-size-xs);\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n  padding: 7px var(--mantine-spacing-sm);\n  font-weight: 700;\n  border-bottom: 2px solid transparent;\n  transition:\n    border-color 100ms ease,\n    color 100ms ease;\n\n  @mixin hover {\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n    text-decoration: none;\n  }\n\n  &[data-active] {\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n    border-bottom-color: var(--mantine-color-blue-6);\n  }\n}\n\n.secondaryLink {\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n  font-size: var(--mantine-font-size-xs);\n  text-transform: uppercase;\n  transition: color 100ms ease;\n\n  @mixin hover {\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n    text-decoration: none;\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file `DoubleHeader.jsx` is a React component that renders a double header with title and subtitle. It utilizes the `StoryWrapper` component to provide a structured testing environment.\n\n**Components:**\n\n- **StoryWrapper:** A component that wraps the `DoubleHeader` component and provides additional testing functionality.\n- **DoubleHeader:** The main component responsible for rendering the double header.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DoubleHeader } from './DoubleHeader';\n\nexport default { title: 'DoubleHeader' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DoubleHeader} />;\n}\n```\n\n**Explanation:**\n\n- The file starts with the necessary imports, including the `StoryWrapper` component, `attributes.json`, and the `DoubleHeader` component.\n- It exports an object with the title `DoubleHeader`.\n- The `Usage` function is responsible for rendering the `DoubleHeader` component within the `StoryWrapper` component.\n- The `attributes.json` file likely contains attributes or options that can be passed to the `DoubleHeader` component.\n\n**Testing and Usage:**\n\n- The `StoryWrapper` component provides a testing environment where the `DoubleHeader` component can be tested with different attributes.\n- The `Usage` function shows how to use the `DoubleHeader` component by passing the `attributes` and `component` props to the `StoryWrapper`.\n\n**Additional Notes:**\n\n- The `DoubleHeader` component likely renders two headers, one with the title and another with the subtitle.\n- The `attributes.json` file can be used to customize the title, subtitle, and other attributes of the double header.\n- The `StoryWrapper` component is likely responsible for rendering the double header with the specified attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DoubleHeader } from './DoubleHeader';\n\nexport default { title: 'DoubleHeader' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DoubleHeader} />;\n}\n"
  },
  {
    "instruction": "**DoubleHeader.js** is a React functional component that renders a double header navigation bar with two sets of links:\n\n**Primary Links:**\n- Book a demo\n- Documentation\n- Community\n- Academy\n- Forums\n\n**Secondary Links:**\n- Privacy & Security\n- Account settings\n- Support options\n\n**Features:**\n\n- **Responsive Design:** The header adjusts its layout based on the screen size, displaying the navigation links in a horizontal row for larger screens and a hamburger menu for smaller screens.\n- **Active Link Indicator:** The `active` state variable is used to highlight the currently selected primary link.\n- **Disclosure Hook:** The `useDisclosure` hook manages the state of the hamburger menu.\n- **Mantine Components:** The header uses Mantine components for layout and styling.\n\n**Code Breakdown:**\n\n- The component imports necessary Mantine and React components.\n- It defines two sets of links for primary and secondary navigation.\n- It uses `useDisclosure` to handle the hamburger menu state.\n- It renders the header with the logo, navigation links, and hamburger menu.\n- It sets the `active` state based on the clicked primary link.\n- It uses CSS classes for styling and layout.\n\n**Usage:**\n\nThis component can be used to provide a consistent and user-friendly navigation experience for the website. It can be integrated into any React application.\n\n**Benefits:**\n\n- Improved navigation usability\n- Enhanced user experience\n- Consistent branding\n\n**Additional Notes:**\n\n- The CSS file (`DoubleHeader.module.css`) contains the styles for the header and its components.\n- The `data-active` attribute is used to highlight the active primary link.\n- The `hiddenFrom` and `visibleFrom` props are used for responsive design.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { Anchor, Box, Burger, Container, Group } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './DoubleHeader.module.css';\n\nconst userLinks = [\n  { link: '#', label: 'Privacy & Security' },\n  { link: '#', label: 'Account settings' },\n  { link: '#', label: 'Support options' },\n];\n\nconst mainLinks = [\n  { link: '#', label: 'Book a demo' },\n  { link: '#', label: 'Documentation' },\n  { link: '#', label: 'Community' },\n  { link: '#', label: 'Academy' },\n  { link: '#', label: 'Forums' },\n];\n\nexport function DoubleHeader() {\n  const [opened, { toggle }] = useDisclosure(false);\n  const [active, setActive] = useState(0);\n\n  const mainItems = mainLinks.map((item, index) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      className={classes.mainLink}\n      data-active={index === active || undefined}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  const secondaryItems = userLinks.map((item) => (\n    <Anchor\n      href={item.link}\n      key={item.label}\n      onClick={(event) => event.preventDefault()}\n      className={classes.secondaryLink}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  return (\n    <header className={classes.header}>\n      <Container className={classes.inner}>\n        <MantineLogo size={34} />\n        <Box className={classes.links} visibleFrom=\"sm\">\n          <Group justify=\"flex-end\">{secondaryItems}</Group>\n          <Group gap={0} justify=\"flex-end\" className={classes.mainLinks}>\n            {mainItems}\n          </Group>\n        </Box>\n        <Burger\n          opened={opened}\n          onClick={toggle}\n          className={classes.burger}\n          size=\"sm\"\n          hiddenFrom=\"sm\"\n        />\n      </Container>\n    </header>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the layout and properties of a user interface component called a \"Navbar\".\n\n**Key Features:**\n\n- **Title:** \"Navbar with 2 sections\"\n- **Category:** \"navbars\"\n- **Canvas:**\n    - **center:** false\n\n**Canvas Properties:**\n\n- **center:** This property specifies whether the navbar should be centered on the screen. In this case, it is set to false, indicating that the navbar will be aligned to the left side of the screen.\n\n**Purpose:**\n\nThe purpose of this file is to configure a navbar component with two sections. The navbar will typically contain navigation links or buttons that allow users to navigate between different parts of the application.\n\n**Usage:**\n\nThis configuration file can be used to create a navbar component in a user interface framework. The specific framework or tool used may vary depending on the project.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Navbar with 2 sections\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Additional Notes:**\n\n- The `title` property provides a descriptive label for the navbar.\n- The `category` property specifies the category or type of the navbar.\n- The `canvas` property contains the configuration options for the navbar's layout and positioning.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with 2 sections\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file provides the styling for a multi-page application with a sidebar navigation layout. It defines the visual elements and their properties for various components, including the navigation bar, aside section, main content area, and links.\n\n**Key Features:**\n\n* **Responsive Navigation Layout:**\n    - The sidebar (navbar) has a fixed height and width.\n    - The aside section provides a fixed-width navigation pane.\n    - The main content area takes up the remaining space.\n\n* **Navigation Links:**\n    - The `mainLink` class styles links within the sidebar, including the logo and title.\n    - The `link` class styles navigation links in the aside section.\n    - Active links are highlighted with a different background color and color.\n\n* **Visual Design:**\n    - The background color of the navbar, aside, and main content area can be customized based on the user's theme.\n    - The sidebar links and aside navigation links have specific dimensions, border radius, padding, and hover effects.\n    - The title and logo are styled with different fonts, padding, and borders.\n\n**Components:**\n\n* **Navbar:**\n    - Contains the logo and title.\n    - Houses the main navigation links.\n\n* **Aside Section:**\n    - Provides additional navigation links.\n\n* **Main Content Area:**\n    - Where the application's content is displayed.\n\n**Styling Rules:**\n\n* **light-dark() Function:** Used to set background and border colors based on the user's theme.\n* **Flexbox:** Enables flexible layout and positioning of elements.\n* **Border Radius:** Creates rounded corners for navigation links.\n* **Hover Effects:** Adds visual feedback on mouse hover over navigation links.\n* **Font Styling:** Sets fonts for the title, logo, and navigation links.\n\n**Purpose:**\n\nThe CSS file provides a visually appealing and functional navigation layout for a multi-page application. It ensures that the user can easily navigate between different sections of the application and find the information they need.",
    "input": "",
    "output": ".navbar {\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-6));\n  height: 750px;\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.wrapper {\n  display: flex;\n  flex: 1;\n}\n\n.aside {\n  flex: 0 0 60px;\n  background-color: var(--mantine-color-body);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-7));\n}\n\n.main {\n  flex: 1;\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n}\n\n.mainLink {\n  width: 44px;\n  height: 44px;\n  border-radius: var(--mantine-radius-md);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      background-color: var(--mantine-color-blue-light);\n      color: var(--mantine-color-blue-light-color);\n    }\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  margin-bottom: var(--mantine-spacing-xl);\n  background-color: var(--mantine-color-body);\n  padding: var(--mantine-spacing-md);\n  font-weight: 500;\n  padding-top: 18px;\n  height: 60px;\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-7));\n}\n\n.logo {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  height: 60px;\n  padding-top: var(--mantine-spacing-md);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-7));\n  margin-bottom: var(--mantine-spacing-xl);\n}\n\n.link {\n  display: block;\n  text-decoration: none;\n  border-top-right-radius: var(--mantine-radius-md);\n  border-bottom-right-radius: var(--mantine-radius-md);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  padding: 0 var(--mantine-spacing-md);\n  font-size: var(--mantine-font-size-sm);\n  margin-right: var(--mantine-spacing-md);\n  font-weight: 500;\n  height: 44px;\n  line-height: 44px;\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n    color: light-dark(var(--mantine-color-dark), var(--mantine-color-light));\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      border-left-color: var(--mantine-color-blue-filled);\n      background-color: var(--mantine-color-blue-filled);\n      color: var(--mantine-color-white);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** DoubleNavbar.jsx\n\n**Purpose:**\n\nThe DoubleNavbar.jsx file is a React component that uses a StoryWrapper component to display a double navigation bar. It imports necessary components, data, and styles from other files.\n\n**Components:**\n\n* **StoryWrapper:** A component that renders a story with customizable attributes and a component.\n* **DoubleNavbar:** The component that represents the double navigation bar.\n\n**Data:**\n\n* **attributes.json:** A JSON file containing attributes that will be passed to the DoubleNavbar component.\n\n**Code Explanation:**\n\n1. **Import Statements:**\n   - Imports the StoryWrapper component from the '../../components/StoryWrapper/StoryWrapper' module.\n   - Imports the attributes object from the './attributes.json' file.\n   - Imports the DoubleNavbar component from the './DoubleNavbar' file.\n\n2. **Default Export:**\n   - Exports an object with a 'title' property set to 'DoubleNavbar'. This likely represents the title of the component or story.\n\n3. **Usage Function:**\n   - Creates a function named 'Usage'.\n   - Returns a JSX element that wraps the DoubleNavbar component with the attributes specified in the attributes.json file.\n\n**Usage:**\n\nThe DoubleNavbar.jsx file can be used to create a double navigation bar with the attributes specified in the attributes.json file.\n\n**Example:**\n\n```\n<StoryWrapper attributes={attributes} component={DoubleNavbar} />\n```\n\n**Additional Notes:**\n\n* The StoryWrapper component is likely used to render a story with different attributes and components.\n* The DoubleNavbar component likely handles the rendering and functionality of the double navigation bar.\n* The attributes.json file likely contains configuration options for the DoubleNavbar component, such as navigation links or styles.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DoubleNavbar } from './DoubleNavbar';\n\nexport default { title: 'DoubleNavbar' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DoubleNavbar} />;\n}\n"
  },
  {
    "instruction": "**DoubleNavbar.js** is a React component that represents a double navigation bar. It consists of two sections:\n\n**1. Main Navigation:**\n- Displays a set of icons and labels representing different navigation options.\n- Uses the `Tooltip` component to provide hover-over tooltips for each option.\n- Sets the `active` state based on the user's selection.\n\n**2. Secondary Navigation:**\n- Lists a set of links related to the currently selected main navigation option.\n- Changes the `activeLink` state based on the user's click.\n\n**Features:**\n\n- **Icons:** The main navigation options are represented by icons from the `@tabler/icons-react` library.\n- **Tooltips:** Hovering over each main navigation option displays a tooltip with the corresponding label.\n- **Dynamic Links:** The secondary navigation links change based on the selected main navigation option.\n- **Active State:** The active navigation option and link are highlighted visually.\n\n**Data:**\n\n- `mainLinksMockdata`: An array of objects representing the main navigation options, including the icon and label.\n- `linksMockdata`: An array of strings representing the secondary navigation links.\n\n**State:**\n\n- `active`: The currently selected main navigation option.\n- `activeLink`: The currently selected secondary navigation link.\n\n**Usage:**\n\nThe `DoubleNavbar` component can be used to provide a two-level navigation structure for a web application. By selecting a main navigation option, the user can access a set of related secondary navigation links.\n\n**Styling:**\n\nThe component uses CSS classes from the `DoubleNavbar.module.css` file to style the navigation bar.\n\n**Example Usage:**\n\n```\n<DoubleNavbar />\n```\n\n**Note:**\n\n- The `MantineLogo` component is assumed to be imported from the `@mantinex/mantine-logo` library.\n- The specific CSS styles used in the `DoubleNavbar.module.css` file can be customized to match the desired design.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  IconCalendarStats,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconGauge,\n  IconHome2,\n  IconSettings,\n  IconUser,\n} from '@tabler/icons-react';\nimport { Title, Tooltip, UnstyledButton } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './DoubleNavbar.module.css';\n\nconst mainLinksMockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nconst linksMockdata = [\n  'Security',\n  'Settings',\n  'Dashboard',\n  'Releases',\n  'Account',\n  'Orders',\n  'Clients',\n  'Databases',\n  'Pull Requests',\n  'Open Issues',\n  'Wiki pages',\n];\n\nexport function DoubleNavbar() {\n  const [active, setActive] = useState('Releases');\n  const [activeLink, setActiveLink] = useState('Settings');\n\n  const mainLinks = mainLinksMockdata.map((link) => (\n    <Tooltip\n      label={link.label}\n      position=\"right\"\n      withArrow\n      transitionProps={{ duration: 0 }}\n      key={link.label}\n    >\n      <UnstyledButton\n        onClick={() => setActive(link.label)}\n        className={classes.mainLink}\n        data-active={link.label === active || undefined}\n      >\n        <link.icon size={22} stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  ));\n\n  const links = linksMockdata.map((link) => (\n    <a\n      className={classes.link}\n      data-active={activeLink === link || undefined}\n      href=\"#\"\n      onClick={(event) => {\n        event.preventDefault();\n        setActiveLink(link);\n      }}\n      key={link}\n    >\n      {link}\n    </a>\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.wrapper}>\n        <div className={classes.aside}>\n          <div className={classes.logo}>\n            <MantineLogo type=\"mark\" size={30} />\n          </div>\n          {mainLinks}\n        </div>\n        <div className={classes.main}>\n          <Title order={4} className={classes.title}>\n            {active}\n          </Title>\n\n          {links}\n        </div>\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** dropzone_with_button.json\n\n**Purpose:**\n\nThis JSON file defines a dropzone with a button. It specifies the title, category, and layout of a user interface element.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Dropzone with button\",\n  \"category\": \"dropzones\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the dropzone, which is displayed as a label.\n* **category:** The category of the dropzone, which is used for organizational purposes.\n* **canvas:** An object that defines the layout of the dropzone.\n\n**canvas Properties:**\n\n* **center:** Whether the dropzone should be centered horizontally.\n* **maxWidth:** The maximum width of the dropzone in pixels.\n\n**Description:**\n\n* The file defines a dropzone with the title \"Dropzone with button\".\n* The category is set to \"dropzones\".\n* The dropzone is centered horizontally with a maximum width of 420 pixels.\n\n**Usage:**\n\nThis file can be used to create a dropzone with a button in a user interface. The title and category can be used to label and categorize the dropzone. The canvas properties specify the layout and size of the dropzone.\n\n**Additional Notes:**\n\n* The file name should match the title of the dropzone.\n* The category and canvas properties can be customized to suit the specific requirements of the application.\n* This file is typically used in conjunction with a JavaScript library or framework that provides support for creating interactive user interfaces.",
    "input": "",
    "output": "{\n  \"title\": \"Dropzone with button\",\n  \"category\": \"dropzones\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file describes the styling for a wrapper element and its child elements. The purpose of this file is to provide a visually appealing and functional interface for users to interact with a dropzone.\n\n**Elements and Styles:**\n\n**1. .wrapper**\n- Positioned relatively to allow for absolute positioning of child elements.\n- Margin-bottom set to 30px for spacing.\n\n**2. .dropzone**\n- Border width set to 1px.\n- Padding-bottom set to 50px for spacing.\n- Color set to the `--mantine-color-bright` variable, which likely represents a light color.\n\n**3. .icon**\n- Color set to the `--mantine-color-gray-4` variable or the `--mantine-color-white` variable depending on the theme.\n\n**4. .control**\n- Positioned absolutely at the bottom of the .wrapper with a left offset of 50% minus 125px.\n- Width set to 250px.\n\n**5. .description**\n- Text-aligned to the center.\n- Font size set to the `--mantine-font-size-sm` variable.\n- Color set to the `--mantine-color-dimmed` variable, which likely represents a dimmed or less prominent color.\n- Margin-top set to the `--mantine-spacing-xs` variable.\n\n**Purpose:**\n\nThe CSS file defines the visual layout of a dropzone, including its border, padding, and positioning. It also styles the icon, control, and description elements within the dropzone.\n\n**Usage:**\n\nThis CSS file is likely included in a web page or application to provide the necessary styling for a dropzone interface. The dropzone can be used to allow users to upload files by dragging and dropping them onto the specified area.",
    "input": "",
    "output": ".wrapper {\n  position: relative;\n  margin-bottom: 30px;\n}\n\n.dropzone {\n  border-width: 1px;\n  padding-bottom: 50px;\n  color: var(--mantine-color-bright);\n}\n\n.icon {\n  color: light-dark(var(--mantine-color-gray-4), var(--mantine-color-white));\n}\n\n.control {\n  position: absolute;\n  width: 250px;\n  left: calc(50% - 125px);\n  bottom: -20px;\n}\n\n.description {\n  text-align: center;\n  font-size: var(--mantine-font-size-sm);\n  color: var(--mantine-color-dimmed);\n  margin-top: var(--mantine-spacing-xs);\n}\n"
  },
  {
    "instruction": "**File Name:** DropzoneButton.js\n\n**Purpose:**\n\nThe `DropzoneButton.js` file is a React component that provides a dropzone button. It is part of a storybook application.\n\n**Components Used:**\n\n- `StoryWrapper`: A custom component that wraps the `DropzoneButton` component and provides additional functionality for storybook.\n- `DropzoneButton`: The component itself, responsible for creating the dropzone button.\n- `attributes.json`: A JSON file containing attributes and configurations for the `DropzoneButton` component.\n\n**Code Breakdown:**\n\n- **Import Statements:**\n   - Imports the necessary components and modules.\n- **Default Export:**\n   - Exports an object with the title `DropzoneButton`.\n- **Usage Function:**\n   - Creates a `StoryWrapper` component with the following props:\n     - `attributes`: The contents of the `attributes.json` file.\n     - `component`: The `DropzoneButton` component.\n   - Returns the `StoryWrapper` component.\n\n**Usage:**\n\nThe `Usage()` function is used to render the `DropzoneButton` component within a `StoryWrapper`. The `attributes.json` file provides the necessary configuration for the button, such as its label and styles.\n\n**Purpose of `StoryWrapper`:**\n\nThe `StoryWrapper` component is likely used to provide additional functionality for storybook, such as:\n\n- Rendering the component with different attributes.\n- Creating different stories for the component.\n- Providing interactive components for users to explore the component's functionality.\n\n**Overall Function:**\n\nThe `DropzoneButton.js` file is responsible for creating a dropzone button component with configurable attributes. It is used within a storybook application to allow users to interact with and explore the component's functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { DropzoneButton } from './DropzoneButton';\n\nexport default { title: 'DropzoneButton' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={DropzoneButton} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `DropzoneButton.jsx` file is a React component that provides a user interface for uploading a PDF resume. It utilizes the `@mantine/dropzone` library to create a drag-and-drop zone where users can select or drop their resume file.\n\n**Functionality:**\n\n- **Dropzone:**\n    - The component renders a dropzone area with an upload icon, text prompts, and a description.\n    - It accepts only PDF files with a maximum size of 30MB.\n    - It provides visual feedback based on the user's actions:\n        - Accepted: Green checkmark icon and message.\n        - Rejected: Red X icon and message.\n        - Idle: Upload icon and message.\n- **Button:**\n    - A button labeled \"Select files\" allows users to manually browse for their resume file.\n- **Theme:**\n    - The component utilizes the `useMantineTheme()` hook to access the current theme and styles.\n\n**Components:**\n\n- **Mantine:**\n    - Button\n    - Group\n    - Text\n- **Dropzone:**\n    - Accept\n    - Reject\n    - Idle\n\n**Usage:**\n\nThe `DropzoneButton` component can be used to collect user resumes as part of an application form or other scenarios where users need to upload PDF files.\n\n**Code Explanation:**\n\n- **Import Statements:** Import necessary components and icons from the `@mantine/core` and `@mantine/dropzone` libraries.\n- **Ref:** The `openRef` is used to control the visibility of the dropzone.\n- **Return Statement:**\n    - The component renders a `div` containing the dropzone and button.\n    - The dropzone area displays the upload icon, text prompts, and description.\n    - The button triggers the `openRef` function to reveal the dropzone.\n\n**Additional Notes:**\n\n- The `classes.wrapper`, `classes.dropzone`, and `classes.control` classes are likely defined in a CSS module named `DropzoneButton.module.css`.\n- The `MIME_TYPES.pdf` constant represents the MIME type for PDF files.\n- The `fz` prop in the `Text` component sets the font size to \"lg\".\n- The `fw` prop sets the font weight to 700.",
    "input": "",
    "output": "import { useRef } from 'react';\nimport { IconCloudUpload, IconDownload, IconX } from '@tabler/icons-react';\nimport { Button, Group, Text, useMantineTheme } from '@mantine/core';\nimport { Dropzone, MIME_TYPES } from '@mantine/dropzone';\nimport classes from './DropzoneButton.module.css';\n\nexport function DropzoneButton() {\n  const theme = useMantineTheme();\n  const openRef = useRef<() => void>(null);\n\n  return (\n    <div className={classes.wrapper}>\n      <Dropzone\n        openRef={openRef}\n        onDrop={() => {}}\n        className={classes.dropzone}\n        radius=\"md\"\n        accept={[MIME_TYPES.pdf]}\n        maxSize={30 * 1024 ** 2}\n      >\n        <div style={{ pointerEvents: 'none' }}>\n          <Group justify=\"center\">\n            <Dropzone.Accept>\n              <IconDownload size={50} color={theme.colors.blue[6]} stroke={1.5} />\n            </Dropzone.Accept>\n            <Dropzone.Reject>\n              <IconX size={50} color={theme.colors.red[6]} stroke={1.5} />\n            </Dropzone.Reject>\n            <Dropzone.Idle>\n              <IconCloudUpload size={50} stroke={1.5} className={classes.icon} />\n            </Dropzone.Idle>\n          </Group>\n\n          <Text ta=\"center\" fw={700} fz=\"lg\" mt=\"xl\">\n            <Dropzone.Accept>Drop files here</Dropzone.Accept>\n            <Dropzone.Reject>Pdf file less than 30mb</Dropzone.Reject>\n            <Dropzone.Idle>Upload resume</Dropzone.Idle>\n          </Text>\n\n          <Text className={classes.description}>\n            Drag&apos;n&apos;drop files here to upload. We can accept only <i>.pdf</i> files that\n            are less than 30mb in size.\n          </Text>\n        </div>\n      </Dropzone>\n\n      <Button className={classes.control} size=\"md\" radius=\"xl\" onClick={() => openRef.current?.()}>\n        Select files\n      </Button>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe provided JSON object describes a configuration file for an email banner.\n\n**Properties:**\n\n**1. title:**\n- String value: \"Email banner\"\n- Represents the title of the banner.\n\n**2. category:**\n- String value: \"banners\"\n- Specifies the category or type of the banner. In this case, it is \"banners\".\n\n**3. responsive:**\n- Boolean value: true\n- Indicates whether the banner is responsive and adjusts its size to different screen sizes.\n\n**4. dimmed:**\n- Boolean value: true\n- Determines whether the banner should have a dimmed effect. A dimmed effect typically reduces the opacity of the background content behind the banner.\n\n**5. canvas:**\n- Object containing configuration for the banner's canvas:\n    - **center:** Boolean value: true\n        - Specifies whether the banner should be centered within the canvas.\n    - **maxWidth:** Integer value: 980\n        - Sets the maximum width of the banner canvas.\n\n**Purpose:**\n\nThe configuration file defines the settings for an email banner, including its title, category, responsiveness, dimming effect, and canvas configuration. The banner can be used as a visual element within an email or other digital communications.\n\n**Usage:**\n\nThis configuration file can be used to create and display an email banner using a content management system or other email design tools. The settings specified in the file will determine the appearance, layout, and functionality of the banner.\n\n**Additional Notes:**\n\n- The `maxWidth` property ensures that the banner does not exceed a certain width on different devices.\n- The `dimmed` property creates a visually appealing effect by reducing the opacity of the background content behind the banner.\n- The `center` property ensures that the banner is positioned correctly within the canvas.",
    "input": "",
    "output": "{\n  \"title\": \"Email banner\",\n  \"category\": \"banners\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 980\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a user interface component called a \"wrapper.\" It is used to encapsulate and style various elements within a single container.\n\n**Components:**\n\n- **.wrapper:** The outermost container element that wraps the entire component.\n- **.image:** An element that displays an image.\n- **.body:** A section that contains the title, description, and controls.\n- **.title:** The title of the component.\n- **.controls:** A section that includes input and control elements.\n- **.inputWrapper:** A wrapper for the input element.\n- **.input:** The input field.\n- **.control:** A button or other control.\n\n**Style Properties:**\n\n- **Flexbox layout:** The `.wrapper` element uses flexbox to align its child elements vertically.\n- **Padding:** The `.wrapper` and `.body` elements have padding for spacing.\n- **Border radius:** The `.wrapper` and `.control` elements have border radius for rounded corners.\n- **Background color:** The `.wrapper` element has a background color based on the theme's light or dark mode.\n- **Border:** The `.wrapper` element has a border with a color that matches the background.\n- **Media queries:** The styles are adjusted for different screen sizes using media queries.\n\n**Key Features:**\n\n- **Responsive design:** The layout adapts to different screen sizes.\n- **Clean and visually appealing:** The styles create a visually cohesive and well-structured component.\n- **Customization:** The colors, fonts, and spacing can be customized using CSS variables.\n\n**Usage:**\n\nThe CSS file can be included in a HTML document to style the `wrapper` component. The HTML markup would typically include the necessary elements and their corresponding classes.\n\n**Additional Notes:**\n\n- The `$mantine-breakpoint-sm` variable represents the screen size breakpoint for mobile devices.\n- The `light-dark()` function is used to set the background and text colors based on the theme's light or dark mode.\n- The `Outfit` font is used for the title, but other fonts can be used if desired.",
    "input": "",
    "output": ".wrapper {\n  display: flex;\n  align-items: center;\n  padding: calc(var(--mantine-spacing-xl) * 2);\n  border-radius: var(--mantine-radius-md);\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-8));\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column-reverse;\n    padding: var(--mantine-spacing-xl);\n  }\n}\n\n.image {\n  max-width: 40%;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    max-width: 100%;\n  }\n}\n\n.body {\n  padding-right: calc(var(--mantine-spacing-xl) * 4);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding-right: 0;\n    margin-top: var(--mantine-spacing-xl);\n  }\n}\n\n.title {\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  line-height: 1;\n  margin-bottom: var(--mantine-spacing-md);\n}\n\n.controls {\n  display: flex;\n  margin-top: var(--mantine-spacing-xl);\n}\n\n.inputWrapper {\n  width: 100%;\n  flex: 1;\n}\n\n.input {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border-right: 0;\n}\n\n.control {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n"
  },
  {
    "instruction": "**File Name:** EmailBanner.jsx\n\n**Purpose:**\n\nThe file is a React component that renders an email banner. It is part of a storybook application, which is used to showcase and document user interfaces.\n\n**Components:**\n\n* **StoryWrapper:** A React component that provides a convenient way to render and display components with specific attributes.\n* **EmailBanner:** The main component that displays the email banner.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains the attributes and their values for the EmailBanner component.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * Imports the `StoryWrapper` and `EmailBanner` components.\n    * Imports the `attributes.json` file.\n\n* **Default Export:**\n    * Exports an object with the title `EmailBanner`.\n\n* **Usage Function:**\n    * Renders the `StoryWrapper` component with the following props:\n        * `attributes`: The attributes specified in `attributes.json`.\n        * `component`: The `EmailBanner` component.\n\n**Workflow:**\n\n1. The `StoryWrapper` component renders the `EmailBanner` component with the specified attributes.\n2. The `EmailBanner` component displays the email banner with the attributes provided in `attributes.json`.\n\n**Usage:**\n\nThe component can be used in a storybook environment to display the email banner with the specified attributes.\n\n**Example:**\n\n```\n<StoryWrapper attributes={attributes} component={EmailBanner} />\n```\n\n**Note:**\n\n* The `attributes.json` file should contain valid JSON data in the following format:\n```json\n{\n  \"email\": \"example@example.com\",\n  \"subject\": \"Test Email\",\n  \"body\": \"This is a test email.\"\n}\n```\n* The `EmailBanner` component should be configured to display the email banner with the attributes specified in `attributes.json`.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { EmailBanner } from './EmailBanner';\n\nexport default { title: 'EmailBanner' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={EmailBanner} />;\n}\n"
  },
  {
    "instruction": "**File Name:** EmailBanner.js\n\n**Purpose:**\n\nThe EmailBanner.js file is a React functional component that creates an email subscription banner. It is designed to encourage users to subscribe to a newsletter and stay informed about product updates, news, and community events.\n\n**Functionality:**\n\n* **Imports:**\n    * `Button`, `Image`, `Text`, `TextInput`, `Title` components from the `@mantine/core` library.\n    * `image.svg` file for the banner image.\n    * `EmailBanner.module.css` for styling.\n\n* **Component Definition:**\n    * The `EmailBanner()` function renders the banner.\n\n* **Banner Content:**\n    * A title with the text \"Wait a minute...\".\n    * A subtitle with the text \"Subscribe to our newsletter!\".\n    * A description that provides more information about the newsletter, including the frequency of emails and the content they will cover.\n    * A text input field where users can enter their email address.\n    * A button labeled \"Subscribe\".\n    * An image that is displayed in the banner.\n\n**Styling:**\n\nThe `EmailBanner.module.css` file contains CSS styles that are applied to the banner elements, such as:\n\n* The background color and font size of the title.\n* The font weight and size of the subtitle.\n* The color and size of the description text.\n* The style of the text input field and button.\n\n**Usage:**\n\nThe `EmailBanner()` component can be used in any React application to display the subscription form.\n\n**Example:**\n\n```\n<EmailBanner />\n```\n\n**Additional Notes:**\n\n* The `image.svg` file should contain an image that is suitable for use as a banner.\n* The `classes.wrapper`, `classes.body`, `classes.title`, and other classes in the `EmailBanner.module.css` file can be customized to match the desired design.\n* The email subscription form can be implemented using an email marketing service or a third-party API.",
    "input": "",
    "output": "import { Button, Image, Text, TextInput, Title } from '@mantine/core';\nimport image from './image.svg';\nimport classes from './EmailBanner.module.css';\n\nexport function EmailBanner() {\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.body}>\n        <Title className={classes.title}>Wait a minute...</Title>\n        <Text fw={500} fz=\"lg\" mb={5}>\n          Subscribe to our newsletter!\n        </Text>\n        <Text fz=\"sm\" c=\"dimmed\">\n          You will never miss important product updates, latest news and community QA sessions. Our\n          newsletter is once a week, every Sunday.\n        </Text>\n\n        <div className={classes.controls}>\n          <TextInput\n            placeholder=\"Your email\"\n            classNames={{ input: classes.input, root: classes.inputWrapper }}\n            radius=\"md\"\n            size=\"md\"\n          />\n          <Button className={classes.control} radius=\"md\" size=\"md\">\n            Subscribe\n          </Button>\n        </div>\n      </div>\n      <Image src={image.src} className={classes.image} />\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Purpose:**\n\nThe file you provided is a JSON object that defines a knowledge base article in the Confluence Cloud platform. It serves as a FAQ (Frequently Asked Question) article.\n\n**File Structure:**\n\nThe JSON object contains the following key-value pairs:\n\n- **title:** The title of the FAQ article, which is \"FAQ simple\" in this case.\n- **category:** The category of the article, which is set to \"faq\".\n- **canvas:** An object that specifies the layout of the article.\n\n**canvas Object:**\n\nThe canvas object contains a single key-value pair:\n\n- **center:** A boolean value that indicates whether the content should be centered within the article. In this case, the value is set to `false`, indicating that the content should not be centered.\n\n**Purpose of the File:**\n\nThe purpose of this JSON file is to:\n\n- Create a new FAQ article in Confluence Cloud.\n- Set the title and category of the article.\n- Specify the layout of the article by indicating whether the content should be centered.\n\n**Additional Notes:**\n\n- The file name does not matter and can be any valid filename.\n- The file should be saved in the Confluence Cloud file system with a `.json` extension.\n- The `title` and `category` values can be customized to match the specific FAQ topic and category.\n- The `center` value can be set to `true` to center the content within the article.",
    "input": "",
    "output": "{\n  \"title\": \"FAQ simple\",\n  \"category\": \"faq\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file appears to be a CSS stylesheet used to define the visual appearance of elements within a web application. It contains CSS rules for three main classes:\n\n**1. .wrapper:**\n\n- **padding-top:** Calculates the top padding based on the `--mantine-spacing-xl` variable, multiplied by 2.\n- **padding-bottom:** Calculates the bottom padding based on the `--mantine-spacing-xl` variable, multiplied by 2.\n- **min-height:** Sets a minimum height of 650 pixels.\n\n**2. .title:**\n\n- **margin-bottom:** Calculates the margin-bottom based on the `--mantine-spacing-xl` variable, multiplied by 1.5.\n\n**3. .item:**\n\n- **border-radius:** Sets the border-radius to the value of the `--mantine-radius-md` variable.\n- **margin-bottom:** Sets the margin-bottom based on the `--mantine-spacing-lg` variable.\n- **border:** Defines a 1px solid border with a color determined by the `--mantine-color-gray-3` variable for light themes and `--mantine-color-dark-4` for dark themes.\n\n**Purpose:**\n\nThe CSS stylesheet defines a consistent visual layout for elements within a web application, including:\n\n- A wrapper element with appropriate padding and minimum height.\n- A title element with spacing below.\n- Individual items with rounded borders, spacing, and borders.\n\n**Target Audience:**\n\nWeb developers and designers responsible for the visual design of a web application.\n\n**Usage:**\n\nThe CSS stylesheet can be included in the HTML file or linked to it in the `<head>` section. It will then apply the specified styles to the corresponding HTML elements with the specified classes.",
    "input": "",
    "output": ".wrapper {\n  padding-top: calc(var(--mantine-spacing-xl) * 2);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 2);\n  min-height: 650px;\n}\n\n.title {\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n}\n\n.item {\n  border-radius: var(--mantine-radius-md);\n  margin-bottom: var(--mantine-spacing-lg);\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file you provided is a React component called `Usage`. It is responsible for rendering a story that showcases the usage of the `FaqSimple` component.\n\n**Functionality:**\n\n- **Imports:**\n    - `StoryWrapper` component from the `StoryWrapper` module.\n    - `attributes.json` file containing attributes for the `StoryWrapper`.\n    - `FaqSimple` component from the current directory.\n\n- **Default Export:**\n    - An object with a `title` property set to `'FaqSimple'`. This likely serves as a title for the component.\n\n- **Usage Function:**\n    - A function that renders the `StoryWrapper` component with the following props:\n        - `attributes`: Import from `attributes.json`.\n        - `component`: `FaqSimple` component.\n\n**Steps of Usage:**\n\n1. Import the `Usage` component into another React component.\n2. Render the `Usage` component to display the story of the `FaqSimple` component.\n\n**Purpose of `StoryWrapper`:**\n\nThe `StoryWrapper` component likely provides a way to showcase different components with their respective attributes. It may render a preview of the component with the specified attributes, allowing developers to see how it behaves and looks.\n\n**Purpose of `attributes.json`:**\n\nThe `attributes.json` file likely contains a set of attributes that will be passed to the `StoryWrapper` component. These attributes will be used to configure the `FaqSimple` component.\n\n**Purpose of `FaqSimple`:**\n\nThe `FaqSimple` component is likely a component that represents a simple FAQ (Frequently Asked Question) section. It may include a question and answer, or a list of FAQs.\n\n**Conclusion:**\n\nThe file you provided is a React component that is used to render a story that showcases the usage of the `FaqSimple` component. It imports necessary components and provides a function to render the story.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FaqSimple } from './FaqSimple';\n\nexport default { title: 'FaqSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FaqSimple} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `faq-simple.js` file is a React component that implements a simple FAQ section with five questions and answers. It uses the `@mantine/core` library to provide an accordion-style interface for displaying the FAQs.\n\n**Functionality:**\n\n- **Container:** The component uses a `Container` component to wrap the content and set a fixed width.\n- **Title:** A `Title` component displays the title \"Frequently Asked Questions\" in a centered manner.\n- **Accordion:** An `Accordion` component provides a vertically stacked list of expandable questions and answers.\n- **Accordion.Item:** Each FAQ is represented by an `Accordion.Item` component with a unique `value` prop.\n- **Accordion.Control:** Each question is displayed within an `Accordion.Control` component, which acts as the trigger for expanding the corresponding answer.\n- **Accordion.Panel:** The answer is displayed within an `Accordion.Panel` component, which is hidden by default.\n- **Placeholder Text:** The `placeholder` variable contains a common text snippet that is used as the answer for each FAQ.\n\n**Style:**\n\n- The component uses a CSS module named `faq-simple.module.css` to provide styling for the different components.\n- The styles include class names for the container, title, accordion items, and other elements.\n\n**Usage:**\n\nTo use the `faq-simple.js` component, simply import it into a React application and render it within a `<Container>` component.\n\n**Example:**\n\n```\n<Container size=\"sm\">\n  <FaqSimple />\n</Container>\n```\n\n**Output:**\n\nThe component will render a FAQ section with five questions and answers, each with the placeholder text as the answer.\n\n**Additional Notes:**\n\n- The `placeholder` text can be replaced with actual content for the FAQ answers.\n- The `value` props of the `Accordion.Item` components can be used to identify the active FAQ.\n- The `@mantine/core` library provides a variety of other components and features that can be used to enhance the FAQ section.",
    "input": "",
    "output": "import { Accordion, Container, Title } from '@mantine/core';\nimport classes from './FaqSimple.module.css';\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqSimple() {\n  return (\n    <Container size=\"sm\" className={classes.wrapper}>\n      <Title ta=\"center\" className={classes.title}>\n        Frequently Asked Questions\n      </Title>\n\n      <Accordion variant=\"separated\">\n        <Accordion.Item className={classes.item} value=\"reset-password\">\n          <Accordion.Control>How can I reset my password?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"another-account\">\n          <Accordion.Control>Can I create more that one account?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"newsletter\">\n          <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"credit-card\">\n          <Accordion.Control>Do you store credit card information securely?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"payment\">\n          <Accordion.Control>What payment systems to you work with?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a content block in a website or online platform. It defines the title, category, responsiveness, and layout of a frequently asked questions (FAQ) section.\n\n**Key Properties:**\n\n- **title:** The title of the FAQ section, which is displayed as a heading. In this case, the title is \"Faq with background\".\n- **category:** The category of the FAQ section, which is set to \"faq\". This could be used to group related FAQs or filter content.\n- **responsive:** A boolean value that specifies whether the FAQ section is responsive and adjusts its layout for different screen sizes. In this case, the value is set to \"true\", indicating responsiveness.\n- **canvas:** An object that defines the layout of the FAQ section.\n    - **center:** A boolean value that specifies whether the FAQ section should be centered horizontally. In this case, the value is set to \"false\", indicating that the section should not be centered.\n\n**Purpose:**\n\nThe purpose of this configuration file is to provide instructions for rendering an FAQ section on a website or online platform. It defines the title, category, responsiveness, and layout of the section, including whether it should be centered horizontally.\n\n**Usage:**\n\nThis configuration file is typically used in a content management system (CMS) or website builder to create and manage FAQ sections. The file is typically placed in a specific directory or folder within the platform. When the page or section that uses this configuration file is loaded, the platform will automatically render the FAQ section with the specified title, category, responsiveness, and layout.\n\n**Additional Notes:**\n\n- The values of these properties can be customized to suit the specific requirements of the website or platform.\n- The layout of the FAQ section can be further customized by adding additional CSS or JavaScript code.\n- The specific platform or system where this configuration file is used may have additional features or capabilities that are not included in this file.",
    "input": "",
    "output": "{\n  \"title\": \"Faq with background\",\n  \"category\": \"faq\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** .wrapper.css\n\n**Description:**\n\nThis CSS file styles a webpage with the following elements:\n\n**1. Wrapper**\n\n- Padding-top: 2 * the spacing unit (xl)\n- Minimum height: 820px\n- Background image: A radial gradient with blue colors from 0% to 100%\n- No-repeat background image\n- Top-left background position\n- Relative position\n- Text color: Black\n\n**2. Title**\n\n- Text color: White\n- Font size: 52px\n- Font family: Outfit, default font family\n- Font weight: 500\n- Margin-bottom: 1.5 * the spacing unit (xl)\n\n**3. Item**\n\n- Background color: White\n- No border-bottom\n- Border radius: Medium\n- Box shadow: Large shadow\n- Overflow: Hidden\n\n**4. Control**\n\n- Font size: Large\n- Padding: Large spacing unit in both left and right directions, and XL spacing unit in top and bottom\n- Text color: Black\n- Hover state: No background color change\n\n**5. Content**\n\n- Padding-left: XL spacing unit\n- Line height: 1.6\n- Text color: Black\n\n**6. Icon**\n\n- Margin-left: Medium spacing unit\n\n**7. Gradient**\n\n- Background image: A radial gradient with slightly darker blue colors from 0% to 100%\n\n**8. ItemOpened**\n\n- Rotates the icon by 45 degrees when the item is opened\n\n**9. Button**\n\n- Display: block\n- Margin-top: Medium spacing unit\n- Responsive design:\n    - Width: 100% on screens with a maximum width of the small breakpoint\n\n**Purpose:**\n\nThe purpose of this CSS file is to style a webpage with a specific layout and design, including a title, items with content, a button, and a gradient background. It is intended to create a visually appealing and functional user interface.",
    "input": "",
    "output": ".wrapper {\n  padding-top: calc(var(--mantine-spacing-xl) * 2);\n  min-height: 820px;\n  background-image: radial-gradient(\n    var(--mantine-color-blue-6) 0%,\n    var(--mantine-color-blue-4) 100%\n  );\n  background-repeat: no-repeat;\n  background-position: top left;\n  position: relative;\n  color: var(--mantine-color-black);\n}\n\n.title {\n  color: var(--mantine-color-white);\n  font-size: 52px;\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n}\n\n.item {\n  background-color: var(--mantine-color-white) !important;\n  border-bottom: 0;\n  border-radius: var(--mantine-radius-md);\n  box-shadow: var(--mantine-shadow-lg);\n  overflow: hidden;\n}\n\n.control {\n  font-size: var(--mantine-font-size-lg);\n  padding: var(--mantine-spacing-lg) var(--mantine-spacing-xl);\n  color: var(--mantine-color-black);\n\n  @mixin hover {\n    background-color: transparent;\n  }\n}\n\n.content {\n  padding-left: var(--mantine-spacing-xl);\n  line-height: 1.6;\n  color: var(--mantine-color-black);\n}\n\n.icon {\n  margin-left: var(--mantine-spacing-md);\n}\n\n.gradient {\n  background-image: radial-gradient(\n    var(--mantine-color-blue-6) 0%,\n    var(--mantine-color-blue-5) 100%\n  );\n}\n\n.itemOpened {\n  & .icon {\n    transform: rotate(45deg);\n  }\n}\n\n.button {\n  display: block;\n  margin-top: var(--mantine-spacing-md);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    display: block;\n    width: 100%;\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided file is a React functional component named `Usage` that is used to render the `FaqWithBg` component within a `StoryWrapper` component. It is part of a React application and is likely used for testing or documentation purposes.\n\n**File Components:**\n\n- **StoryWrapper:** A custom React component that wraps the `FaqWithBg` component and provides additional functionality or styling.\n- **attributes.json:** A JSON file that likely contains configuration attributes for the `FaqWithBg` component.\n- **FaqWithBg:** A React component that likely displays a set of frequently asked questions (FAQs) with a background.\n\n**File Structure:**\n\n- **Import Statements:**\n    - Import the `StoryWrapper` component from the `../../components/StoryWrapper/StoryWrapper` module.\n    - Import the `attributes.json` file containing configuration attributes.\n    - Import the `FaqWithBg` component.\n- **Default Export:**\n    - An object with a `title` property set to `'FaqWithBg'`. This likely defines the title of the component for documentation purposes.\n- **Usage Function:**\n    - Returns a React component that renders the `StoryWrapper` with the following props:\n        - `attributes`: The configuration attributes from `attributes.json`.\n        - `component`: The `FaqWithBg` component.\n\n**Purpose:**\n\nThe purpose of this file is to demonstrate how to use the `StoryWrapper` component to render the `FaqWithBg` component with specific configuration attributes. This is likely used for internal testing, documentation, or showcasing the component's functionality.\n\n**Additional Notes:**\n\n- The `attributes.json` file may contain properties such as FAQ questions, answers, background color, and other styling options.\n- The `StoryWrapper` component may provide additional features, such as styling, debugging tools, or interactive elements.\n- The `title` property in the default export is likely used for documentation purposes within the React application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FaqWithBg } from './FaqWithBg';\n\nexport default { title: 'FaqWithBg' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FaqWithBg} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FaqWithBg.jsx\n\n**Purpose:**\n\nThe `FaqWithBg.jsx` file is a React component that renders a set of frequently asked questions (FAQs) with a background image.\n\n**Components:**\n\n* **Tabler Icons:**\n    * `IconPlus` icon is used as the expansion indicator.\n* **Mantine Core:**\n    * `Accordion` component for displaying the FAQs.\n    * `Container` component for centering the content.\n    * `ThemeIcon` component for the expansion indicator.\n    * `Title` component for the title.\n* **CSS:**\n    * `FaqWithBg.module.css` provides styles for the component.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n- Imports necessary components and icons from the `@tabler/icons-react`, `@mantine/core`, and `react` libraries.\n\n**2. Placeholder Text:**\n\n- Defines a placeholder text that will be displayed as the answer for each FAQ.\n\n**3. FaqWithBg Function:**\n\n- Renders the component layout:\n    * A `div` element with a CSS class `wrapper`.\n        * A `Container` with a `size` of \"sm\" to center the content.\n            * A `Title` with the text \"Frequently Asked Questions\" centered and styled.\n            * An `Accordion` with:\n                * `chevronPosition` set to \"right\".\n                * `defaultValue` set to \"reset-password\".\n                * `chevronSize` set to 26.\n                * `variant` set to \"separated\".\n                * `disableChevronRotation` set to prevent automatic rotation.\n                * `styles` to customize the label and item styles.\n                * A custom `chevron` icon using `ThemeIcon`.\n            * Five `Accordion.Item`s, each with:\n                * A `Accordion.Control` with the question.\n                * An `Accordion.Panel` with the placeholder text as the answer.\n\n**4. CSS Styles:**\n\n- The `classes.wrapper`, `classes.title`, `classes.item`, and `classes.gradient` classes are used to apply specific styles to the components.\n\n**Overall Functionality:**\n\nThe component renders a set of FAQs with a background image. Each FAQ has a question and a placeholder answer. Clicking on the expansion indicator will reveal the answer.\n\n**Additional Notes:**\n\n- The background image is not explicitly defined in the code.\n- The placeholder text can be replaced with actual answers.\n- The styles can be further customized as needed.",
    "input": "",
    "output": "import { IconPlus } from '@tabler/icons-react';\nimport { Accordion, Container, ThemeIcon, Title } from '@mantine/core';\nimport classes from './FaqWithBg.module.css';\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqWithBg() {\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"sm\">\n        <Title ta=\"center\" className={classes.title}>\n          Frequently Asked Questions\n        </Title>\n\n        <Accordion\n          chevronPosition=\"right\"\n          defaultValue=\"reset-password\"\n          chevronSize={26}\n          variant=\"separated\"\n          disableChevronRotation\n          styles={{ label: { color: 'var(--mantine-color-black)' }, item: { border: 0 } }}\n          chevron={\n            <ThemeIcon radius=\"xl\" className={classes.gradient} size={26}>\n              <IconPlus size={18} stroke={1.5} />\n            </ThemeIcon>\n          }\n        >\n          <Accordion.Item className={classes.item} value=\"reset-password\">\n            <Accordion.Control>How can I reset my password?</Accordion.Control>\n            <Accordion.Panel>{placeholder}</Accordion.Panel>\n          </Accordion.Item>\n\n          <Accordion.Item className={classes.item} value=\"another-account\">\n            <Accordion.Control>Can I create more that one account?</Accordion.Control>\n            <Accordion.Panel>{placeholder}</Accordion.Panel>\n          </Accordion.Item>\n\n          <Accordion.Item className={classes.item} value=\"newsletter\">\n            <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n            <Accordion.Panel>{placeholder}</Accordion.Panel>\n          </Accordion.Item>\n\n          <Accordion.Item className={classes.item} value=\"credit-card\">\n            <Accordion.Control>Do you store credit card information securely?</Accordion.Control>\n            <Accordion.Panel>{placeholder}</Accordion.Panel>\n          </Accordion.Item>\n\n          <Accordion.Item className={classes.item} value=\"payment\">\n            <Accordion.Control>What payment systems to you work with?</Accordion.Control>\n            <Accordion.Panel>{placeholder}</Accordion.Panel>\n          </Accordion.Item>\n        </Accordion>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines the header configuration for a FAQ page. It specifies the title, category, responsiveness, and canvas settings for the page.\n\n**Title:**\n\n- **Value:** \"Faq page header\"\n- **Purpose:** Sets the title of the FAQ page header. This title is displayed on the page and can be used for navigation or identification purposes.\n\n**Category:**\n\n- **Value:** \"faq\"\n- **Purpose:** Specifies the category of the FAQ page header. This category is used for organizational purposes and can be used for filtering or searching.\n\n**Responsive:**\n\n- **Value:** true\n- **Purpose:** Indicates that the page header should be responsive. This means that the header will automatically adjust its size and layout to fit different screen sizes and devices.\n\n**Canvas:**\n\n- **Value:** { \"center\": false }\n- **Purpose:** Specifies the canvas settings for the header.\n    - **center:** false\n        - This property sets the alignment of the header content. A value of false indicates that the content will be left-aligned.\n\n**Summary:**\n\nThe JSON file you provided defines the header configuration for a FAQ page with the following settings:\n\n- Title: FAQ Page Header\n- Category: FAQ\n- Responsiveness: Enabled\n- Canvas: Left-aligned\n\n**Usage:**\n\nThis file is typically used in a content management system (CMS) or other web development platform to configure the header of an FAQ page. The header settings can be customized to include additional elements such as a logo, navigation menu, and search bar.",
    "input": "",
    "output": "{\n  \"title\": \"Faq page header\",\n  \"category\": \"faq\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines the styles for a user interface element with the following structure:\n\n```\n.wrapper\n  .icon\n  .title\n  .description\n```\n\n**Purpose:**\n\nThe purpose of this file is to style the elements within the `.wrapper` element, including an icon, title, and description.\n\n**Styles:**\n\n**`.wrapper`:**\n- Displayed as a flex container.\n- Aligned vertically with the `align-items: center` property.\n- Uses the `--mantine-color-white` CSS variable for the text color.\n\n**`.icon`:**\n- Margins right with the `--mantine-spacing-md` CSS variable.\n- Background image created using a linear gradient with the following colors:\n  - `--mantine-color-blue-4` at 0%\n  - `--mantine-color-blue-6` at 100%\n\n**`.title`:**\n- Uses the `--mantine-color-gray-6` CSS variable for the text color.\n\n**`.description`:**\n- Uses the `--mantine-color-black` CSS variable for the text color.\n\n**Usage:**\n\nThis CSS file can be linked to an HTML document to style the elements within the `.wrapper` element. The styles defined in the file will apply to the corresponding elements in the HTML code.\n\n**Example HTML Code:**\n\n```html\n<div class=\"wrapper\">\n  <div class=\"icon\"></div>\n  <h2 class=\"title\">Title</h2>\n  <p class=\"description\">Description</p>\n</div>\n```\n\n**Note:**\n\n- The `--mantine-color-*` and `--mantine-spacing-*` CSS variables are assumed to be defined elsewhere in the project.\n- The specific values of these variables may vary depending on the project's design and configuration.",
    "input": "",
    "output": ".wrapper {\n  display: flex;\n  align-items: center;\n  color: var(--mantine-color-white);\n}\n\n.icon {\n  margin-right: var(--mantine-spacing-md);\n  background-image: linear-gradient(\n    135deg,\n    var(--mantine-color-blue-4) 0%,\n    var(--mantine-color-blue-6) 100%\n  );\n}\n\n.title {\n  color: var(--mantine-color-gray-6);\n}\n\n.description {\n  color: var(--mantine-color-black);\n}\n"
  },
  {
    "instruction": "**ContactIcons.tsx**\n\n**Purpose:**\n\nThe `ContactIcons.tsx` file is a React component that renders a list of contact information icons. Each icon represents a different contact detail, such as email, phone number, address, and working hours.\n\n**Description:**\n\n**Components:**\n\n- `ContactIcon`: A functional component that represents a single contact icon. It receives props for the icon, title, and description.\n- `ContactIconsList`: A functional component that renders a list of `ContactIcon` components. It uses mock data to populate the icons.\n\n**Key Features:**\n\n- Uses the `@tabler/icons-react` and `@mantine/core` libraries for icon rendering and styling.\n- Defines an interface `ContactIconProps` to specify the props for the `ContactIcon` component.\n- Implements a mock data array `MOCKDATA` with contact information details.\n- Renders a list of contact icons based on the mock data.\n\n**Implementation:**\n\n- The `ContactIcon` component renders an icon, title, and description within a `div` element.\n- The `ContactIconsList` component iterates over the `MOCKDATA` array and maps each item to a `ContactIcon` component.\n- The `Stack` component from `@mantine/core` is used to vertically stack the contact icons.\n\n**Usage:**\n\nTo use the `ContactIconsList` component, simply import it into your React application and render it within a component.\n\n**Example:**\n\n```\n<ContactIconsList />\n```\n\n**Output:**\n\nThe component will render a list of contact icons, each with its corresponding title, description, and icon.\n\n**Conclusion:**\n\nThe `ContactIcons.tsx` file provides a convenient way to display a list of contact information icons in a React application. It simplifies the process of representing contact details with icons, making it easier for users to interact with the contact information.",
    "input": "",
    "output": "import { IconAt, IconMapPin, IconPhone, IconSun } from '@tabler/icons-react';\nimport { Stack, Text, ThemeIcon } from '@mantine/core';\nimport classes from './ContactIcons.module.css';\n\ninterface ContactIconProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  icon: typeof IconSun;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nfunction ContactIcon({ icon: Icon, title, description, ...others }: ContactIconProps) {\n  return (\n    <div className={classes.wrapper} {...others}>\n      <ThemeIcon size={40} radius=\"md\" className={classes.icon}>\n        <Icon size={24} />\n      </ThemeIcon>\n\n      <div>\n        <Text size=\"xs\" className={classes.title}>\n          {title}\n        </Text>\n        <Text className={classes.description}>{description}</Text>\n      </div>\n    </div>\n  );\n}\n\nconst MOCKDATA = [\n  { title: 'Email', description: 'hello@mantine.dev', icon: IconAt },\n  { title: 'Phone', description: '+49 (800) 335 35 35', icon: IconPhone },\n  { title: 'Address', description: '844 Morris Park avenue', icon: IconMapPin },\n  { title: 'Working hours', description: '8 a.m. – 11 p.m.', icon: IconSun },\n];\n\nexport function ContactIconsList() {\n  const items = MOCKDATA.map((item, index) => <ContactIcon key={index} {...item} />);\n  return <Stack>{items}</Stack>;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file contains styling rules for a web page layout. It defines styles for various elements, including:\n\n- Wrapper\n- Header\n- Title\n- Title Overlay\n- Contact Section\n- Category Card\n- Category Label\n\n**Purpose:**\n\nThe purpose of this CSS file is to style a section of a web page with a header, a contact section, and a list of category cards.\n\n**Key Features:**\n\n- **Header:**\n    - Background image with gradient\n    - Flexbox layout for alignment and positioning\n    - Title with large font size and bold font weight\n    - Title overlay with semi-transparent text\n- **Contact Section:**\n    - White background with rounded corners and shadow\n    - Title with black text\n- **Category Cards:**\n    - Background images with responsiveness\n    - Hover effect to enlarge background image\n    - Category label with white text\n\n**Media Queries:**\n\nThe CSS includes media queries to adjust the styles for different screen sizes, ensuring optimal viewing on various devices.\n\n**Variables:**\n\nThe CSS utilizes Mantine variables for spacing, colors, and font styles.\n\n**Structure:**\n\nThe CSS is organized into separate sections for each element, making it easy to find and understand the styles.\n\n**Key Classes:**\n\n- `.wrapper`\n- `.header`\n- `.title`\n- `.titleOverlay`\n- `.contact`\n- `.categoryCard`\n- `.categoryLabel`\n\n**Usage:**\n\nThis CSS file can be linked to a HTML document to apply the specified styles to the corresponding elements.\n\n**Additional Notes:**\n\n- The font-family used is \"Outfit\".\n- The line height is set to 1 for titles.\n- The spacing is consistent throughout the layout.\n- The use of media queries ensures responsiveness across different devices.",
    "input": "",
    "output": ".wrapper {\n  padding-top: var(--mantine-spacing-md);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 2);\n}\n\n.header {\n  height: 400px;\n  padding-top: var(--mantine-spacing-md);\n  background-image: linear-gradient(\n    135deg,\n    var(--mantine-color-blue-4) 0%,\n    var(--mantine-color-blue-6) 100%\n  );\n  background-size: cover;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  position: relative;\n  padding: calc(var(--mantine-spacing-xl) * 1.5) calc(var(--mantine-spacing-xl) * 2);\n  border-radius: var(--mantine-radius-lg);\n  margin-bottom: var(--mantine-spacing-lg);\n\n  @media (max-width: em(1080px)) {\n    height: auto;\n    flex-direction: column-reverse;\n    align-items: initial;\n    padding: var(--mantine-spacing-xl);\n  }\n}\n\n.title {\n  color: var(--mantine-color-white);\n  position: relative;\n  z-index: 1;\n  font-size: 46px;\n  font-weight: 800;\n  letter-spacing: -0.5px;\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: em(1080px)) {\n    font-size: 22px;\n    text-align: center;\n    margin-top: var(--mantine-spacing-xl);\n  }\n}\n\n.titleOverlay {\n  z-index: 0;\n  position: absolute;\n  color: var(--mantine-color-white);\n  font-weight: 500;\n  opacity: 0.1;\n  font-size: 320px;\n  line-height: 1;\n  top: 10px;\n  left: 45px;\n  pointer-events: none;\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: em(1080px)) {\n    display: none;\n  }\n}\n\n.contact {\n  padding: calc(var(--mantine-spacing-xl) * 1.5);\n  background-color: var(--mantine-color-white);\n  border-radius: var(--mantine-radius-lg);\n  box-shadow: var(--mantine-shadow-md);\n  align-self: center;\n\n  @media (max-width: em(1080px)) {\n    padding: var(--mantine-spacing-xl);\n  }\n}\n\n.contactTitle {\n  color: var(--mantine-color-black);\n  margin-bottom: var(--mantine-spacing-xl);\n  line-height: 1;\n}\n\n.categoryCard {\n  height: 160px;\n  position: relative;\n  background-size: 100%;\n  background-position: center;\n  color: var(--mantine-color-white);\n  border-radius: var(--mantine-radius-lg);\n  padding: var(--mantine-spacing-xl);\n  overflow: hidden;\n  transition: background-size 300ms ease;\n\n  @mixin hover {\n    background-size: 105%;\n  }\n}\n\n.categoryLabel {\n  color: var(--mantine-color-white);\n  z-index: 2;\n  position: relative;\n}\n"
  },
  {
    "instruction": "**File Name:** FaqWithHeader.jsx\n\n**Purpose:**\n\nThe FaqWithHeader.jsx file is a React component that renders a Frequently Asked Questions (FAQ) section with a header. It utilizes the StoryWrapper component to provide a structured way to display the FAQ content.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the FAQ component and provides additional functionality, such as rendering the attributes.\n* **attributes.json:** A JSON file that contains the FAQ content and configuration.\n* **FaqWithHeader:** The actual FAQ component that displays the questions and answers.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * Import the StoryWrapper component from the '../../components/StoryWrapper/StoryWrapper' module.\n    * Import the attributes from the './attributes.json' file.\n    * Import the FaqWithHeader component from the current file.\n* **Default Export:**\n    * Export an object with the title 'FaqWithHeader'. This likely serves as a configuration for the Storybook framework.\n* **Usage Function:**\n    * Define a Usage function that returns a JSX element.\n    * Pass the attributes and FaqWithHeader component to the StoryWrapper component.\n    * This configuration ensures that the FAQ content is rendered within a structured and formatted manner.\n\n**Function of the File:**\n\nThe FaqWithHeader.jsx file is responsible for:\n\n* Importing the necessary components and data.\n* Defining the Usage function to render the FAQ section.\n* Utilizing the StoryWrapper component to provide additional functionality and render the FAQ content in a structured manner.\n\n**Conclusion:**\n\nThe FaqWithHeader.jsx file is a React component that facilitates the rendering of a FAQ section with a header. It leverages the StoryWrapper component to provide a comprehensive solution for displaying and interacting with FAQ content.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FaqWithHeader } from './FaqWithHeader';\n\nexport default { title: 'FaqWithHeader' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FaqWithHeader} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `FaqWithHeader.tsx` file is a React component that displays a frequently asked questions (FAQ) section with a header and category cards.\n\n**Functionality:**\n\n- **Header:**\n    - A title that reads \"Frequently Asked Questions\"\n    - A smaller title that reads \"FAQ\" as an overlay\n    - A contact section with a title \"Contact us\" and a list of contact icons\n\n- **Category Cards:**\n    - Three category cards, each with a title and an image.\n    - The images are fetched from Unsplash.\n    - The cards are styled using the `classes.categoryCard` class.\n\n- **Grid Layout:**\n    - The category cards are displayed in a 3-column grid using the `SimpleGrid` component.\n\n**Components:**\n\n- `Container`: The main container that wraps the entire component.\n- `Title`: Component for the header titles.\n- `Text`: Component for the contact title.\n- `UnstyledButton`: Component for the category cards.\n- `Overlay`: Component for the overlay on the category cards.\n- `ContactIconsList`: A separate component that displays the contact icons.\n\n**Data:**\n\n- The `categories` array contains the data for the three category cards.\n\n**Styling:**\n\n- The component uses CSS classes from the `classes.module.css` file to style the various elements.\n\n**Usage:**\n\nThis component can be used to provide a FAQ section for a website or application.\n\n**Key Features:**\n\n- Clear and concise header.\n- Informative category cards.\n- Easy navigation between categories.\n- Contact information for further inquiries.\n\n**Note:**\n\n- The `ContactIconsList` component is not included in this code snippet.\n- The `classes.module.css` file is assumed to be available in the same directory as the `FaqWithHeader.tsx` file.",
    "input": "",
    "output": "import { Container, Overlay, SimpleGrid, Text, Title, UnstyledButton } from '@mantine/core';\nimport { ContactIconsList } from './ContactIcons';\nimport classes from './FaqWithHeader.module.css';\n\nconst categories = [\n  {\n    label: 'Customer Support',\n    image:\n      'https://images.unsplash.com/photo-1508780709619-79562169bc64?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80',\n  },\n  {\n    label: 'User Guides',\n    image:\n      'https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80',\n  },\n  {\n    label: 'Sales Questions',\n    image:\n      'https://images.unsplash.com/photo-1543286386-713bdd548da4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80',\n  },\n];\n\nexport function FaqWithHeader() {\n  const items = categories.map((category) => (\n    <UnstyledButton\n      style={{ backgroundImage: `url(${category.image})` }}\n      className={classes.categoryCard}\n      key={category.label}\n    >\n      <Overlay color=\"#000\" opacity={0.6} zIndex={1} />\n      <Text size=\"xl\" ta=\"center\" fw={700} className={classes.categoryLabel}>\n        {category.label}\n      </Text>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Container className={classes.wrapper} size=\"lg\">\n      <div className={classes.header}>\n        <div>\n          <Title className={classes.title}>Frequently Asked Questions</Title>\n          <Title className={classes.titleOverlay} role=\"presentation\">\n            FAQ\n          </Title>\n        </div>\n\n        <div className={classes.contact}>\n          <Text size=\"xl\" fw={500} className={classes.contactTitle}>\n            Contact us\n          </Text>\n\n          <ContactIconsList />\n        </div>\n      </div>\n\n      <SimpleGrid cols={{ base: 1, sm: 3 }}>{items}</SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON object that defines a content block for a website or application. It represents a FAQ (Frequently Asked Question) with an image.\n\n**Object Structure:**\n\n```json\n{\n  \"title\": \"Faq with image\",\n  \"category\": \"faq\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties:**\n\n- **title:** The title of the FAQ, which is \"Faq with image\" in this case.\n- **category:** The category of the FAQ, which is \"faq\".\n- **responsive:** A boolean value indicating whether the content block is responsive, which is set to true.\n- **canvas:** An object that defines the layout of the content block.\n\n**canvas Object:**\n\n- **center:** A boolean value indicating whether the content should be centered within the canvas, which is set to false.\n\n**Purpose:**\n\nThe purpose of this JSON object is to represent a FAQ with an image that can be displayed on a website or application. The FAQ title is \"Faq with image\", and it is categorized as a FAQ. The content block is responsive and can be positioned within the canvas according to the specified layout.\n\n**Usage:**\n\nThis JSON object can be used to configure a content block for a content management system (CMS) or application. The block can be used to display an FAQ with an image on a webpage or other interface.\n\n**Additional Notes:**\n\n- The \"title\" and \"category\" properties can be customized to reflect the specific FAQ being represented.\n- The \"responsive\" property ensures that the content block adjusts its layout to different screen sizes.\n- The \"canvas.center\" property controls the horizontal alignment of the content within the canvas.",
    "input": "",
    "output": "{\n  \"title\": \"Faq with image\",\n  \"category\": \"faq\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** style.css\n\n**Purpose:**\n\nThe style.css file defines the visual styles for a web page or application. It contains CSS rules that specify the font, spacing, color, and other visual properties of elements on the page.\n\n**Content:**\n\nThe CSS code in the file defines three classes:\n\n**1. .wrapper:**\n- Padding-top and padding-bottom are set to twice the value of the `--mantine-spacing-xl` variable.\n- The `calc()` function is used to calculate the padding values dynamically.\n\n**2. .title:**\n- Margin-bottom is set to the value of the `--mantine-spacing-md` variable.\n- Padding-left is set to the value of the `--mantine-spacing-md` variable.\n- Color is set to a light or dark variant of the `--mantine-color-black` or `--mantine-color-white` variables based on the theme.\n- Font-family is set to `Outfit`, with a fallback font of `--mantine-font-family`.\n- Font-weight is set to 500.\n\n**3. .item:**\n- Font-size is set to `--mantine-font-size-sm`.\n- Color is set to a light or dark variant of the `--mantine-color-gray-7` or `--mantine-color-dark-1` variables based on the theme.\n\n**Usage:**\n\nThese classes can be used to style elements in a HTML document as follows:\n\n```html\n<div class=\"wrapper\">\n  <h2 class=\"title\">Title</h2>\n  <p class=\"item\">Item 1</p>\n  <p class=\"item\">Item 2</p>\n</div>\n```\n\n**Conclusion:**\n\nThe style.css file defines a set of CSS rules that provide a consistent and visually appealing style for a web page or application. By using these classes, developers can easily apply the desired font, spacing, color, and other visual properties to their elements.",
    "input": "",
    "output": ".wrapper {\n  padding-top: calc(var(--mantine-spacing-xl) * 2);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 2);\n}\n\n.title {\n  margin-bottom: var(--mantine-spacing-md);\n  padding-left: var(--mantine-spacing-md);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n}\n\n.item {\n  font-size: var(--mantine-font-size-sm);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1));\n}\n"
  },
  {
    "instruction": "**File Name:** FaqWithImage.jsx\n\n**Purpose:**\n\nThe `FaqWithImage.jsx` file is a React component that renders a Frequently Asked Questions (FAQ) section with an associated image.\n\n**Components:**\n\n* **StoryWrapper:** A custom React component that provides a common structure and attributes for stories.\n* **attributes.json:** A JSON file that contains the attributes for the FAQ section.\n* **FaqWithImage:** The main component that renders the FAQ with an image.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FaqWithImage } from './FaqWithImage';\n\nexport default { title: 'FaqWithImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FaqWithImage} />;\n}\n```\n\n**Explanation:**\n\n* **Import Statements:**\n    * Imports the necessary components and files.\n* **Default Export:**\n    * Defines the title of the story as 'FaqWithImage'.\n* **Usage Function:**\n    * Creates an instance of the `StoryWrapper` component with the following props:\n        * `attributes`: The attributes from the `attributes.json` file.\n        * `component`: The `FaqWithImage` component.\n\n**Usage:**\n\nThe `Usage()` function is called when the component is rendered. It instantiates the `StoryWrapper` component with the specified attributes and component.\n\n**Attributes.json:**\n\nThe `attributes.json` file contains the attributes for the FAQ section, such as:\n\n```json\n{\n  \"title\": \"Frequently Asked Questions\",\n  \"faqs\": [\n    {\n      \"question\": \"What is the purpose of this product?\",\n      \"answer\": \"To provide solutions to common problems.\"\n    },\n    // Additional FAQ objects\n  ]\n}\n```\n\n**Summary:**\n\nThe `FaqWithImage.jsx` file is a React component that renders a FAQ section with an associated image. It uses the `StoryWrapper` component to provide a common structure and attributes for stories. The FAQ section is populated with attributes from the `attributes.json` file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FaqWithImage } from './FaqWithImage';\n\nexport default { title: 'FaqWithImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FaqWithImage} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FaqWithImage.js\n\n**Purpose:**\n\nThe FaqWithImage.js file is a React component that displays a set of frequently asked questions (FAQs) with an accompanying image. It uses the Mantine UI library for its layout and styling.\n\n**Components:**\n\n- **Container:** A container component that sets the width of the content.\n- **Grid:** A grid layout component that divides the content into two columns.\n- **Image:** An image component that displays an image of FAQs.\n- **Title:** A title component that displays the text \"Frequently Asked Questions\".\n- **Accordion:** An accordion component that contains the FAQ questions and answers.\n- **Accordion.Item:** An accordion item that represents a single FAQ question and answer.\n- **Accordion.Control:** A control component that displays the question of the FAQ.\n- **Accordion.Panel:** A panel component that displays the answer of the FAQ.\n\n**Features:**\n\n- The component displays four FAQ questions and answers.\n- Each FAQ question is a separate accordion item.\n- The questions and answers are placeholders and can be replaced with actual content.\n- The component is responsive and adjusts its layout based on the screen size.\n\n**Code Breakdown:**\n\nThe file starts by importing necessary components and styles from the Mantine library.\n\nThen, it defines a placeholder text for the FAQ answers.\n\nThe `FaqWithImage` function is exported as the main component.\n\nThe component returns JSX code that defines the layout of the FAQ section:\n\n- A container with a large size.\n- A grid with two columns.\n- An image in the first column.\n- A title in the second column.\n- An accordion with four FAQ items.\n\n**Conclusion:**\n\nThe FaqWithImage.js file is a React component that provides an interactive way to display FAQs with an image. It is a valuable tool for creating user-friendly content for websites and applications.",
    "input": "",
    "output": "import { Accordion, Container, Grid, Image, Title } from '@mantine/core';\nimport image from './image.svg';\nimport classes from './FaqWithImage.module.css';\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.';\n\nexport function FaqWithImage() {\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"lg\">\n        <Grid id=\"faq-grid\" gutter={50}>\n          <Grid.Col span={{ base: 12, md: 6 }}>\n            <Image src={image.src} alt=\"Frequently Asked Questions\" />\n          </Grid.Col>\n          <Grid.Col span={{ base: 12, md: 6 }}>\n            <Title order={2} ta=\"left\" className={classes.title}>\n              Frequently Asked Questions\n            </Title>\n\n            <Accordion chevronPosition=\"right\" defaultValue=\"reset-password\" variant=\"separated\">\n              <Accordion.Item className={classes.item} value=\"reset-password\">\n                <Accordion.Control>How can I reset my password?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"another-account\">\n                <Accordion.Control>Can I create more that one account?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"newsletter\">\n                <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"credit-card\">\n                <Accordion.Control>\n                  Do you store credit card information securely?\n                </Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n            </Accordion>\n          </Grid.Col>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration object for a web page element. This object contains settings related to the title, category, responsiveness, and layout of a section or component on the page.\n\n**Properties:**\n\n- **title:** This property specifies the title of the section or component. In this case, it is \"Features with icons\".\n- **category:** This property defines the category of the section or component. In this case, it is \"features\".\n- **responsive:** This property indicates whether the section or component is responsive to different screen sizes. The value is set to `true`, indicating that it is responsive.\n- **canvas:** This property contains further settings for the canvas where the section or component will be rendered.\n    - **center:** This property specifies whether the content within the canvas should be centered. In this case, it is set to `false`, indicating that the content should not be centered.\n\n**Overall Function:**\n\nThe JSON file defines a section or component with the following characteristics:\n\n- Title: Features with icons\n- Category: features\n- Responsiveness: Enabled\n- Canvas layout: Non-centered\n\nThis configuration object can be used by a web development framework or tool to dynamically generate the section or component on the web page.\n\n**Purpose:**\n\nThe purpose of this JSON file is to provide configuration settings for a specific web page element, such as a section or component. The settings include title, category, responsiveness, and layout, which determine the appearance and behavior of the element on the page.",
    "input": "",
    "output": "{\n  \"title\": \"Features with icons\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines a set of styles used to render a card-like element with an overlay and icon.\n\n**Structure:**\n\n- The file consists of four CSS classes: `feature`, `overlay`, `content`, and `icon`.\n\n**Styles:**\n\n**feature Class:**\n- Sets the position of the element to `relative`.\n- Adds padding to the top and left of the element.\n\n**overlay Class:**\n- Positions the element `absolute`.\n- Sets the height, width, and positioning of the overlay.\n- Sets the background color of the overlay.\n- Sets a higher `z-index` value than the `content` class.\n\n**content Class:**\n- Positions the element `relative`.\n- Sets a higher `z-index` value than the `overlay` class.\n\n**icon Class:**\n- Sets the color of the icon.\n\n**title Class:**\n- Sets the color of the title based on the theme's background color.\n\n**Purpose:**\n\nThe CSS file styles a card-like element with the following features:\n\n- An overlay with a blue background.\n- An icon.\n- A title.\n\n**Usage:**\n\nThese CSS classes can be used in a HTML document to create the card element:\n\n```html\n<div class=\"feature\">\n  <div class=\"overlay\"></div>\n  <div class=\"content\">\n    <i class=\"icon\"></i>\n    <h2 class=\"title\">Title</h2>\n  </div>\n</div>\n```\n\n**Benefits:**\n\n- Provides a visually appealing and consistent card design.\n- Allows for customization of the overlay, icon, and title.\n- Ensures that the content is displayed above the overlay.",
    "input": "",
    "output": ".feature {\n  position: relative;\n  padding-top: var(--mantine-spacing-xl);\n  padding-left: var(--mantine-spacing-xl);\n}\n\n.overlay {\n  position: absolute;\n  height: 100px;\n  width: 160px;\n  top: 0;\n  left: 0;\n  background-color: var(--mantine-color-blue-light);\n  z-index: 1;\n}\n\n.content {\n  position: relative;\n  z-index: 2;\n}\n\n.icon {\n  color: var(--mantine-color-blue-filled);\n}\n\n.title {\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file `FeaturesAsymmetrical.jsx` is a React component that renders a UI interface for displaying and interacting with asymmetric features. It uses the `StoryWrapper` component to provide a controlled environment for testing and demonstration purposes.\n\n**Components:**\n\n* **StoryWrapper:** This component receives the `attributes` and `component` props.\n* **FeaturesAsymmetrical:** This component represents the UI interface for displaying and interacting with asymmetric features.\n\n**Import Statements:**\n\n```jsx\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesAsymmetrical } from './FeaturesAsymmetrical';\n```\n\n* `StoryWrapper`: A custom component used for testing and demonstration.\n* `attributes.json`: A JSON file containing attributes used by the `FeaturesAsymmetrical` component.\n* `FeaturesAsymmetrical`: The main component responsible for rendering the UI.\n\n**Default Export:**\n\n```jsx\nexport default { title: 'FeaturesAsymmetrical' };\n```\n\n* This exports an object with a `title` property, which is used to generate a title for the component in the documentation or UI.\n\n**Usage Function:**\n\n```jsx\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesAsymmetrical} />;\n}\n```\n\n* This function creates an instance of the `StoryWrapper` component with the following props:\n    * `attributes`: The attributes defined in `attributes.json`.\n    * `component`: The `FeaturesAsymmetrical` component.\n\n**Purpose:**\n\nThe `FeaturesAsymmetrical.jsx` file serves as a demonstration of how to use the `StoryWrapper` component to render a UI interface for a specific component, such as the `FeaturesAsymmetrical` component. It provides a controlled environment for testing and demonstrating the component's functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesAsymmetrical } from './FeaturesAsymmetrical';\n\nexport default { title: 'FeaturesAsymmetrical' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesAsymmetrical} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesAsymmetrical.js\n\n**Purpose:**\n\nThe file creates a React component called `FeaturesAsymmetrical` that displays a grid of three features with icons, titles, and descriptions.\n\n**Key Features:**\n\n- **Asymmetrical Grid:** The features are arranged in a three-column grid, but the first column is wider than the other two columns.\n- **Icons:** Each feature has an icon displayed above the title.\n- **Titles:** The titles are bold and large, and they are spaced from the icons.\n- **Descriptions:** The descriptions are smaller and grayed-out.\n\n**Components:**\n\n- **Feature:** A reusable component that represents a single feature.\n    - **Props:**\n        - `icon`: The icon to display.\n        - `title`: The title of the feature.\n        - `description`: The description of the feature.\n\n- **FeaturesAsymmetrical:**\n    - **Data:** Uses a mock data array to define the features.\n    - **Map:** Maps the mock data array to `Feature` components.\n    - **Grid:** Displays the features in a three-column grid using `SimpleGrid`.\n\n**CSS:**\n\n- The `FeaturesAsymmetrical.module.css` file contains styles for the component.\n\n**Functionality:**\n\n- The `FeaturesAsymmetrical` component renders a grid of features based on the mock data.\n- Each feature displays its icon, title, and description.\n\n**Usage:**\n\nThe `FeaturesAsymmetrical` component can be used to showcase a set of features on a web page.\n\n**Example:**\n\n```\n<FeaturesAsymmetrical />\n```\n\n**Note:**\n\n- The icons used in the example are from the `@tabler/icons-react` library.\n- The component uses the `@mantine/core` library for styling.",
    "input": "",
    "output": "import { IconCertificate, IconCoin, IconTruck } from '@tabler/icons-react';\nimport { Container, SimpleGrid, Text } from '@mantine/core';\nimport classes from './FeaturesAsymmetrical.module.css';\n\ninterface FeatureProps extends React.ComponentPropsWithoutRef<'div'> {\n  icon: React.FC<any>;\n  title: string;\n  description: string;\n}\n\nfunction Feature({ icon: Icon, title, description, className, ...others }: FeatureProps) {\n  return (\n    <div className={classes.feature} {...others}>\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <Icon size={38} className={classes.icon} stroke={1.5} />\n        <Text fw={700} fz=\"lg\" mb=\"xs\" mt={5} className={classes.title}>\n          {title}\n        </Text>\n        <Text c=\"dimmed\" fz=\"sm\">\n          {description}\n        </Text>\n      </div>\n    </div>\n  );\n}\n\nconst mockdata = [\n  {\n    icon: IconTruck,\n    title: 'Free Worldwide shipping',\n    description:\n      'As electricity builds up inside its body, it becomes more aggressive. One theory is that the electricity.',\n  },\n  {\n    icon: IconCertificate,\n    title: 'Best Quality Product',\n    description:\n      'Slakoth’s heart beats just once a minute. Whatever happens, it is content to loaf around motionless.',\n  },\n  {\n    icon: IconCoin,\n    title: 'Very Affordable Pricing',\n    description:\n      'Thought to have gone extinct, Relicanth was given a name that is a variation of the name of the person who discovered.',\n  },\n];\n\nexport function FeaturesAsymmetrical() {\n  const items = mockdata.map((item) => <Feature {...item} key={item.title} />);\n\n  return (\n    <Container mt={30} mb={30} size=\"lg\">\n      <SimpleGrid cols={{ base: 1, sm: 3 }} spacing={50}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration object for an application card. It specifies the card's title, category, author, and other visual and behavioral properties.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with icon features\",\n  \"category\": \"app-cards\",\n  \"author\": \"rtivital\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the card, displayed as a heading.\n* **category:** The category of the card, used for organizational purposes.\n* **author:** The author of the card.\n* **dimmed:** Whether the card should be dimmed or not.\n* **canvas:** An object that defines the canvas properties of the card.\n    * **center:** Whether the card should be centered within the available space.\n    * **maxWidth:** The maximum width of the card in pixels.\n\n**Purpose:**\n\nThis JSON file is used to configure the appearance and behavior of an application card. The card can be used to display information, provide interactive elements, or perform specific actions.\n\n**Usage:**\n\nThe configuration object defined in this file can be used to create an instance of the card in an application. The card's title, category, author, dimmed state, and canvas settings can be customized as needed.\n\n**Example:**\n\nThe provided JSON object defines a card with the following properties:\n\n* Title: \"Card with icon features\"\n* Category: \"app-cards\"\n* Author: \"rtivital\"\n* Dimmed: True\n* Canvas:\n    * Centered: True\n    * Maximum width: 320 pixels\n\n**Note:**\n\nThe specific implementation of how the card is rendered and interacts with the user will depend on the application or framework in which it is used.",
    "input": "",
    "output": "{\n  \"title\": \"Card with icon features\",\n  \"category\": \"app-cards\",\n  \"author\": \"rtivital\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the visual style for a user interface or web page. It specifies the layout, colors, fonts, spacing, and other visual elements.\n\n**Key Elements:**\n\n- **.card:** Represents a container element with a background color set to the `--mantine-color-body` CSS variable.\n\n- **.imageSection:** A section that displays an image with padding, centering, and a border at the bottom.\n\n- **.label:** A label that provides additional information or context within the card.\n\n- **.section:** A section that contains content with padding and a border at the top.\n\n- **.icon:** An icon that is displayed alongside other text content.\n\n**CSS Properties:**\n\n- **background-color:** Sets the background color of the card.\n- **padding:** Specifies the spacing around the content within the sections.\n- **display:** Determines how elements are displayed within the flexbox layout.\n- **align-items:** Aligns elements vertically within the flexbox layout.\n- **justify-content:** Aligns elements horizontally within the flexbox layout.\n- **border:** Defines a border at the bottom and top of the sections.\n- **margin:** Sets the spacing around the icon.\n- **color:** Specifies the color of the icon.\n- **font-weight:** Sets the font weight of the label text.\n- **font-size:** Sets the font size of the label text.\n- **letter-spacing:** Adjusts the spacing between letters in the label text.\n- **text-transform:** Converts the label text to uppercase.\n\n**Purpose:**\n\nThe CSS file styles the user interface by defining the visual appearance of cards, sections, labels, icons, and other elements. The style includes padding, borders, colors, fonts, and spacing to create a consistent and visually appealing user interface.\n\n**Additional Notes:**\n\n- The `--mantine-color-body` and other CSS variables likely represent custom color definitions within the project.\n- The `light-dark()` function adjusts the color based on the user's dark mode preference.\n- The CSS code follows the principles of CSS cascading, where more specific selectors have higher priority.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.imageSection {\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.label {\n  margin-bottom: var(--mantine-spacing-xs);\n  line-height: 1;\n  font-weight: 700;\n  font-size: var(--mantine-font-size-xs);\n  letter-spacing: -0.25px;\n  text-transform: uppercase;\n}\n\n.section {\n  padding: var(--mantine-spacing-md);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.icon {\n  margin-right: 5px;\n  color: light-dark(var(--mantine-color-gray-5), var(--mantine-color-dark-2));\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesCard.jsx\n\n**Purpose:**\n\nThe `FeaturesCard.jsx` file is a React component that represents a card displaying features and attributes.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a context for rendering the `FeaturesCard` component with specific attributes.\n* **FeaturesCard:** The main component that displays the features and attributes.\n\n**Data:**\n\n* **attributes.json:** A JSON file containing the attributes for the `FeaturesCard`.\n\n**Code Breakdown:**\n\n**Import Statements:**\n\n* `StoryWrapper`: A custom component used to render the `FeaturesCard` with specific attributes.\n* `attributes.json`: A JSON file containing the attributes.\n* `FeaturesCard`: The main component.\n\n**Export Statements:**\n\n* `title: 'FeaturesCard'`: Exports the title of the component as 'FeaturesCard'.\n* `Usage()`: Exports a function that renders the `StoryWrapper` with the `FeaturesCard` and attributes.\n\n**Usage Function:**\n\n* Renders a `StoryWrapper` component.\n* Passes the `attributes` and `FeaturesCard` components as props.\n* Provides a context for rendering the `FeaturesCard` with the specified attributes.\n\n**Purpose of `StoryWrapper`:**\n\n* To provide a consistent environment for rendering the `FeaturesCard`.\n* To pass attributes to the `FeaturesCard` component.\n\n**Usage:**\n\nThe `FeaturesCard` component can be used to display a card with features and attributes. The `attributes.json` file provides the data for the card.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is a custom component that is not included in the standard React library.\n* The `features` and `attributes` keys in the `attributes.json` file are assumed to be present.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesCard } from './FeaturesCard';\n\nexport default { title: 'FeaturesCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesCard} />;\n}\n"
  },
  {
    "instruction": "**FeaturesCard.jsx**\n\nThis file renders a card component that displays the features of a Tesla Model S electric car.\n\n**File Structure:**\n\n* **Imports:** Import necessary components and icons from external libraries.\n* **Mock Data:** Defines an array of objects representing the car's features, including label and icon.\n* **Component Function:**\n    * Maps the mock data to render a list of features using the `map()` method.\n    * Creates a card with sections for:\n        * Image of the car\n        * Car details (name, price, discount)\n        * Basic configuration (list of features)\n        * Rent now button\n    * Returns the rendered card component.\n\n**Features:**\n\n* **4 passengers:** IconUsers component\n* **100 km/h in 4 seconds:** IconGauge component\n* **Automatic gearbox:** IconManualGearbox component\n* **Electric:** IconGasStation component\n\n**Components Used:**\n\n* **Card:** Mantine Card component for the overall card structure.\n* **Image:** Mantine Image component to display the car image.\n* **Text:** Mantine Text component for displaying text content.\n* **Badge:** Mantine Badge component for displaying the discount information.\n* **Center:** Mantine Center component for aligning content within the card.\n* **Group:** Mantine Group component for grouping elements.\n\n**Style Classes:**\n\nThe file imports a CSS module named `FeaturesCard.module.css` for styling the card elements.\n\n**Usage:**\n\nThis component can be used to display the features of the Tesla Model S car in a visually appealing and informative way.\n\n**Note:**\n\n* The image source and pricing information may need to be updated based on the latest data.\n* The `className` attribute in the `Card` component specifies the CSS class for styling.",
    "input": "",
    "output": "import { IconGasStation, IconGauge, IconManualGearbox, IconUsers } from '@tabler/icons-react';\nimport { Badge, Button, Card, Center, Group, Image, Text } from '@mantine/core';\nimport classes from './FeaturesCard.module.css';\n\nconst mockdata = [\n  { label: '4 passengers', icon: IconUsers },\n  { label: '100 km/h in 4 seconds', icon: IconGauge },\n  { label: 'Automatic gearbox', icon: IconManualGearbox },\n  { label: 'Electric', icon: IconGasStation },\n];\n\nexport function FeaturesCard() {\n  const features = mockdata.map((feature) => (\n    <Center key={feature.label}>\n      <feature.icon size={16} className={classes.icon} stroke={1.5} />\n      <Text size=\"xs\">{feature.label}</Text>\n    </Center>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" className={classes.card}>\n      <Card.Section className={classes.imageSection}>\n        <Image src=\"https://i.imgur.com/ZL52Q2D.png\" alt=\"Tesla Model S\" />\n      </Card.Section>\n\n      <Group justify=\"space-between\" mt=\"md\">\n        <div>\n          <Text fw={500}>Tesla Model S</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            Free recharge at any station\n          </Text>\n        </div>\n        <Badge variant=\"outline\">25% off</Badge>\n      </Group>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Text fz=\"sm\" c=\"dimmed\" className={classes.label}>\n          Basic configuration\n        </Text>\n\n        <Group gap={8} mb={-8}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Group gap={30}>\n          <div>\n            <Text fz=\"xl\" fw={700} style={{ lineHeight: 1 }}>\n              $168.00\n            </Text>\n            <Text fz=\"sm\" c=\"dimmed\" fw={500} style={{ lineHeight: 1 }} mt={3}>\n              per day\n            </Text>\n          </div>\n\n          <Button radius=\"xl\" style={{ flex: 1 }}>\n            Rent now\n          </Button>\n        </Group>\n      </Card.Section>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON configuration file. It defines metadata and settings for a content piece titled \"Features with cards\".\n\n**File Contents:**\n\n```json\n{\n  \"title\": \"Features with cards\",\n  \"category\": \"features\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**File Properties:**\n\n* **title:** The title of the content piece, which is \"Features with cards\".\n* **category:** The category of the content piece, which is \"features\".\n* **changelog:** The date of the last update to the content piece, which is \"september-2022\".\n* **responsive:** A boolean value that indicates whether the content piece is responsive, which is set to true.\n* **canvas:** An object that defines canvas settings, including:\n    * **center:** A boolean value that indicates whether the canvas should be centered, which is set to false.\n\n**Purpose:**\n\nThe purpose of this file is to provide metadata and configuration options for a content piece titled \"Features with cards\". This information is used to display and manage the content piece in a content management system or website.\n\n**Additional Notes:**\n\n* The \"category\" property indicates that the content piece belongs to the \"features\" category.\n* The \"responsive\" property ensures that the content piece adapts to different screen sizes and devices.\n* The \"canvas\" property specifies the layout and settings of the content piece. In this case, the canvas is not centered.\n* The \"changelog\" property provides information about the last update to the content piece.",
    "input": "",
    "output": "{\n  \"title\": \"Features with cards\",\n  \"category\": \"features\",\n  \"changelog\": \"september-2022\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** styles.css\n\n**Purpose:**\n\nThe CSS file defines the styles for a web page or application. It specifies the font size, font weight, margin, padding, and other visual properties of HTML elements.\n\n**Structure:**\n\nThe file contains CSS rules that define styles for the following HTML elements:\n\n**1. Title**\n\n```css\n.title {\n  font-size: 34px;\n  font-weight: 500;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 24px;\n  }\n}\n```\n\n* Sets the font size to 34px.\n* Sets the font weight to 500.\n* Uses a media query to adjust the font size to 24px on screens with a maximum width of $mantine-breakpoint-sm.\n\n**2. Description**\n\n```css\n.description {\n  max-width: 600px;\n  margin: auto;\n\n  &::after {\n    content: '';\n    display: block;\n    background-color: var(--mantine-color-blue-filled);\n    width: 45px;\n    height: 2px;\n    margin-top: var(--mantine-spacing-sm);\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n```\n\n* Sets the maximum width to 600px.\n* Centers the element horizontally using the margin property.\n* Adds a decorative element after the description text using the ::after selector.\n\n**3. Card**\n\n```css\n.card {\n  border: 1px solid light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n}\n```\n\n* Sets a border around the card element.\n* Uses the light-dark() function to automatically adjust the border color based on the theme's light and dark modes.\n\n**4. Card Title**\n\n```css\n.cardTitle {\n  &::after {\n    content: '';\n    display: block;\n    background-color: var(--mantine-color-blue-filled);\n    width: 45px;\n    height: 2px;\n    margin-top: var(--mantine-spacing-sm);\n  }\n}\n```\n\n* Adds a decorative element after the card title using the ::after selector.\n\n**Purpose of Styles:**\n\nThe styles defined in this file are used to enhance the visual presentation of the web page or application. They set the font size, font weight, margin, padding, and other visual properties of HTML elements, such as the title, description, card, and card title.\n\n**Additional Notes:**\n\n* The file uses the Mantine CSS framework, which provides a set of pre-defined styles.\n* The media query adjusts the font size for different screen sizes.\n* The use of the ::after selector adds decorative elements to the title and card title.",
    "input": "",
    "output": ".title {\n  font-size: 34px;\n  font-weight: 500;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 24px;\n  }\n}\n\n.description {\n  max-width: 600px;\n  margin: auto;\n\n  &::after {\n    content: '';\n    display: block;\n    background-color: var(--mantine-color-blue-filled);\n    width: 45px;\n    height: 2px;\n    margin-top: var(--mantine-spacing-sm);\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n\n.card {\n  border: 1px solid light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n}\n\n.cardTitle {\n  &::after {\n    content: '';\n    display: block;\n    background-color: var(--mantine-color-blue-filled);\n    width: 45px;\n    height: 2px;\n    margin-top: var(--mantine-spacing-sm);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesCards.jsx\n\n**File Type:** JavaScript source file\n\n**Purpose:**\n\nThe `FeaturesCards.jsx` file is a React component that renders a set of cards showcasing features and their benefits.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a structured environment for rendering the `FeaturesCards` component with predefined attributes.\n* **FeaturesCards:** The main component that renders the cards.\n* **attributes.json:** A JSON file containing the attributes to be passed to the `StoryWrapper`.\n\n**Functionality:**\n\n* The file imports the necessary components and data from other files.\n* It exports a `Usage` function that renders the `StoryWrapper` component with the following configuration:\n    * `attributes`: The attributes defined in the `attributes.json` file.\n    * `component`: The `FeaturesCards` component.\n* The `StoryWrapper` component provides a context for rendering the `FeaturesCards` component with the specified attributes.\n* The `FeaturesCards` component renders a set of cards that display the features and their benefits based on the attributes provided.\n\n**Usage:**\n\nThe `FeaturesCards` component can be used to showcase the features of a product or service in a visually appealing and informative way.\n\n**Benefits:**\n\n* Enhanced user engagement with clear and concise information.\n* Improved product understanding and sales conversions.\n* Increased brand awareness and recognition.\n\n**Additional Notes:**\n\n* The `attributes.json` file defines the data for each card, including the feature name, description, and image.\n* The `StoryWrapper` component is a custom component that provides additional styling and functionality for the `FeaturesCards` component.\n* The `title` property in the export statement sets the title of the component to `FeaturesCards`.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesCards } from './FeaturesCards';\n\nexport default { title: 'FeaturesCards' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesCards} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesCards.jsx\n\n**Purpose:**\n\nThe `FeaturesCards.jsx` file is a React component that displays a set of cards, each representing a key feature of a product or service.\n\n**Components:**\n\n* **@tabler/icons-react:** This library provides pre-built icons, including `IconCookie`, `IconGauge`, and `IconUser`.\n* **@mantine/core:** This library provides Mantine UI components, such as `Badge`, `Card`, `Container`, `Group`, `SimpleGrid`, `Text`, and `Title`.\n\n**Data:**\n\nThe `mockdata` array defines an array of objects, each representing a feature:\n\n```\n[\n  { title: 'Extreme performance', description: ... },\n  { title: 'Privacy focused', description: ... },\n  { title: 'No third parties', description: ... },\n]\n```\n\n**Component Logic:**\n\n* The `FeaturesCards()` function renders the cards based on the `mockdata`.\n* For each feature, a `Card` component is created with the title, description, and icon.\n* The `useMantineTheme()` hook is used to access the theme colors.\n* The `SimpleGrid` component is used to display the cards in a grid layout.\n\n**Output:**\n\nThe component renders a set of cards with the following information:\n\n* Title\n* Description\n* Icon\n\n**Purpose:**\n\nThe purpose of this component is to provide a clear and concise overview of the product's or service's key features. It can be used on a product landing page, website, or other marketing materials.\n\n**Additional Notes:**\n\n* The `classes.card`, `classes.cardTitle`, and `classes.description` variables are used to style the cards using CSS.\n* The `py` prop on the `Container` component sets the padding for the component.\n* The `mt` prop sets the margin for the `SimpleGrid` component.",
    "input": "",
    "output": "import { IconCookie, IconGauge, IconUser } from '@tabler/icons-react';\nimport {\n  Badge,\n  Card,\n  Container,\n  Group,\n  SimpleGrid,\n  Text,\n  Title,\n  useMantineTheme,\n} from '@mantine/core';\nimport classes from './FeaturesCards.module.css';\n\nconst mockdata = [\n  {\n    title: 'Extreme performance',\n    description:\n      'This dust is actually a powerful poison that will even make a pro wrestler sick, Regice cloaks itself with frigid air of -328 degrees Fahrenheit',\n    icon: IconGauge,\n  },\n  {\n    title: 'Privacy focused',\n    description:\n      'People say it can run at the same speed as lightning striking, Its icy body is so cold, it will not melt even if it is immersed in magma',\n    icon: IconUser,\n  },\n  {\n    title: 'No third parties',\n    description:\n      'They’re popular, but they’re rare. Trainers who show them off recklessly may be targeted by thieves',\n    icon: IconCookie,\n  },\n];\n\nexport function FeaturesCards() {\n  const theme = useMantineTheme();\n  const features = mockdata.map((feature) => (\n    <Card key={feature.title} shadow=\"md\" radius=\"md\" className={classes.card} padding=\"xl\">\n      <feature.icon size={50} stroke={1.5} color={theme.colors.blue[6]} />\n      <Text fz=\"lg\" fw={500} className={classes.cardTitle} mt=\"md\">\n        {feature.title}\n      </Text>\n      <Text fz=\"sm\" c=\"dimmed\" mt=\"sm\">\n        {feature.description}\n      </Text>\n    </Card>\n  ));\n\n  return (\n    <Container size=\"lg\" py=\"xl\">\n      <Group justify=\"center\">\n        <Badge variant=\"filled\" size=\"lg\">\n          Best company ever\n        </Badge>\n      </Group>\n\n      <Title order={2} className={classes.title} ta=\"center\" mt=\"sm\">\n        Integrate effortlessly with any technology stack\n      </Title>\n\n      <Text c=\"dimmed\" className={classes.description} ta=\"center\" mt=\"md\">\n        Every once in a while, you’ll see a Golbat that’s missing some fangs. This happens when\n        hunger drives it to try biting a Steel-type Pokémon.\n      </Text>\n\n      <SimpleGrid cols={{ base: 1, md: 3 }} spacing=\"xl\" mt={50}>\n        {features}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided contains metadata for a user interface element called a \"feature\". It defines the following properties:\n\n**1. Title:**\n- The title of the feature, which is \"Features with monotone icons\".\n\n**2. Category:**\n- The category of the feature, which is \"features\".\n\n**3. Responsive:**\n- Whether the feature is responsive, which indicates that it should adjust its layout based on the screen size.\n\n**4. Canvas:**\n- An object that specifies the canvas settings for the feature.\n    - **center:** Whether the canvas should be centered. In this case, it is set to `false`.\n\n**Purpose:**\n\nThe purpose of this JSON file is to provide metadata for a specific feature in a user interface. This metadata is typically used by a content management system or framework to render the feature with the specified title, category, and canvas settings.\n\n**Additional Notes:**\n\n- The values for the `title` and `category` properties are strings.\n- The `responsive` property is a boolean value.\n- The `canvas` property is an object with a single property, `center`, which is a boolean value.\n- The `center` property specifies whether the canvas should be centered within the feature.\n\n**Usage:**\n\nThis JSON file can be used in conjunction with a user interface framework or content management system to display the \"Features with monotone icons\" feature. The framework or system would use the metadata to render the feature with the specified title, category, and canvas settings.",
    "input": "",
    "output": "{\n  \"title\": \"Features with monotone icons\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Purpose:**\n\nThe CSS file defines the styles for a section with a title, description, and padding.\n\n**CSS Code Breakdown:**\n\n**1. .wrapper {**\n\n- **padding-top:** Calculates the padding-top value based on four times the spacing unit (--mantine-spacing-xl).\n- **padding-bottom:** Calculates the padding-bottom value based on four times the spacing unit (--mantine-spacing-xl).\n\n**2. .title {**\n\n- **font-family:** Sets the font family to \"Outfit\" and falls back to the default font family (--mantine-font-family).\n- **font-weight:** Sets the font weight to 500 (medium).\n- **margin-bottom:** Sets the margin-bottom value to the spacing unit (--mantine-spacing-md).\n- **text-align:** Centers the text on large screens.\n\n**Media Query for Small Screens:**\n\n- **@media (max-width: $mantine-breakpoint-sm) {**\n    - **font-size:** Sets the font size to 28px.\n    - **text-align:** Aligns the text to the left.\n}\n\n**3. .description {**\n\n- **text-align:** Centers the text on large screens.\n\n**Media Query for Small Screens:**\n\n- **@media (max-width: $mantine-breakpoint-sm) {**\n    - **text-align:** Aligns the text to the left.\n}\n\n**Functionality:**\n\nThe CSS code styles a section with the following elements:\n\n- Title\n- Description\n- Padding\n\nThe padding is set based on the spacing unit (--mantine-spacing-xl), providing spacing between the section elements.\n\nThe title is centered on large screens and left-aligned on small screens.\n\nThe description is centered on large screens and left-aligned on small screens.\n\n**Usage:**\n\nThis CSS file can be included in an HTML document to style a section with a title, description, and padding. The specific HTML elements and content can be added as needed.",
    "input": "",
    "output": ".wrapper {\n  padding-top: calc(var(--mantine-spacing-xl) * 4);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 4);\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  margin-bottom: var(--mantine-spacing-md);\n  text-align: center;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 28px;\n    text-align: left;\n  }\n}\n\n.description {\n  text-align: center;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    text-align: left;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesGrid.jsx\n\n**File Purpose:**\n\nThe `FeaturesGrid.jsx` file is a React component that represents a features grid. It is responsible for displaying a grid of features, each with its own title, description, and icon.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A React component that wraps the features grid component.\n    * `attributes.json`: A JSON file containing the attributes for each feature.\n    * `FeaturesGrid`: The main component that renders the features grid.\n* **Component Export:**\n    * `title`: The title of the component.\n* **`Usage` Function:**\n    * Creates an instance of `StoryWrapper` with the following props:\n        * `attributes`: The attributes for each feature, imported from `attributes.json`.\n        * `component`: The `FeaturesGrid` component.\n\n**Functionality:**\n\nThe `FeaturesGrid` component receives an array of attributes, each representing a single feature. Each attribute includes the following properties:\n\n* `title`: The title of the feature.\n* `description`: A short description of the feature.\n* `icon`: The icon to be displayed for the feature.\n\nThe component iterates over these attributes and renders a grid of `FeatureItem` components, each representing a single feature.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for development purposes to render the `FeaturesGrid` component in a storybook environment.\n* The `attributes.json` file contains the actual data for the features, including their titles, descriptions, and icons.\n* The `FeaturesGrid` component can be customized to display the features in a different layout or style.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesGrid } from './FeaturesGrid';\n\nexport default { title: 'FeaturesGrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesGrid} />;\n}\n"
  },
  {
    "instruction": "**FeaturesGrid.js** is a React component that displays a grid of features with icons, titles, and descriptions.\n\n**Purpose:**\n\nThe component aims to provide an overview of key features and benefits of a product or service.\n\n**Components:**\n\n- **MOCKDATA:** An array of objects representing the features, each containing an icon, title, and description.\n- **Feature:** A functional component that renders a single feature with an icon, title, and description.\n- **FeaturesGrid:** The main component that renders the entire grid of features.\n\n**Key Features:**\n\n- **Grid Layout:** Features are displayed in a grid with three columns on medium-sized screens and two columns on smaller screens.\n- **Icon Visualization:** Each feature has an icon displayed in a themed circle.\n- **Descriptive Text:** Titles and descriptions provide additional information about each feature.\n- **Responsive Design:** The grid adjusts its layout to different screen sizes.\n\n**How it Works:**\n\n- The `MOCKDATA` array provides the data for the features.\n- The `Feature` component renders a single feature based on the data provided.\n- The `FeaturesGrid` component iterates through the `MOCKDATA` array, maps each feature to a `Feature` component, and displays them in a grid layout.\n\n**Usage:**\n\nThe `FeaturesGrid` component can be used to showcase the key features of a product or service. It can be embedded into any React application.\n\n**Example:**\n\n```\n<FeaturesGrid />\n```\n\n**Output:**\n\nThe component will render a grid of five features with icons, titles, and descriptions.\n\n**Additional Notes:**\n\n- The icons used in the features are from the Tabler Icons React library.\n- The component uses the Mantine Core library for styling.\n- The CSS file (`FeaturesGrid.module.css`) provides additional styling for the component.",
    "input": "",
    "output": "import { IconCookie, IconGauge, IconLock, IconMessage2, IconUser } from '@tabler/icons-react';\nimport { Container, SimpleGrid, Text, ThemeIcon, Title } from '@mantine/core';\nimport classes from './FeaturesGrid.module.css';\n\nexport const MOCKDATA = [\n  {\n    icon: IconGauge,\n    title: 'Extreme performance',\n    description:\n      'This dust is actually a powerful poison that will even make a pro wrestler sick, Regice cloaks itself with frigid air of -328 degrees Fahrenheit',\n  },\n  {\n    icon: IconUser,\n    title: 'Privacy focused',\n    description:\n      'People say it can run at the same speed as lightning striking, Its icy body is so cold, it will not melt even if it is immersed in magma',\n  },\n  {\n    icon: IconCookie,\n    title: 'No third parties',\n    description:\n      'They’re popular, but they’re rare. Trainers who show them off recklessly may be targeted by thieves',\n  },\n  {\n    icon: IconLock,\n    title: 'Secure by default',\n    description:\n      'Although it still can’t fly, its jumping power is outstanding, in Alola the mushrooms on Paras don’t grow up quite right',\n  },\n  {\n    icon: IconMessage2,\n    title: '24/7 Support',\n    description:\n      'Rapidash usually can be seen casually cantering in the fields and plains, Skitty is known to chase around after its own tail',\n  },\n];\n\ninterface FeatureProps {\n  icon: React.FC<any>;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nexport function Feature({ icon: Icon, title, description }: FeatureProps) {\n  return (\n    <div>\n      <ThemeIcon variant=\"light\" size={40} radius={40}>\n        <Icon size={18} stroke={1.5} />\n      </ThemeIcon>\n      <Text mt=\"sm\" mb={7}>\n        {title}\n      </Text>\n      <Text size=\"sm\" c=\"dimmed\" lh={1.6}>\n        {description}\n      </Text>\n    </div>\n  );\n}\n\nexport function FeaturesGrid() {\n  const features = MOCKDATA.map((feature, index) => <Feature {...feature} key={index} />);\n\n  return (\n    <Container className={classes.wrapper}>\n      <Title className={classes.title}>Integrate effortlessly with any technology stack</Title>\n\n      <Container size={560} p={0}>\n        <Text size=\"sm\" className={classes.description}>\n          Every once in a while, you’ll see a Golbat that’s missing some fangs. This happens when\n          hunger drives it to try biting a Steel-type Pokémon.\n        </Text>\n      </Container>\n\n      <SimpleGrid\n        mt={60}\n        cols={{ base: 1, sm: 2, md: 3 }}\n        spacing={{ base: 'xl', md: 50 }}\n        verticalSpacing={{ base: 'xl', md: 50 }}\n      >\n        {features}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the properties and settings for a page element. It describes a \"Features with image icons\" section within a website.\n\n**File Content:**\n\n```json\n{\n  \"title\": \"Features with image icons\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties:**\n\n* **title:** Specifies the title of the section, which is \"Features with image icons\".\n* **category:** Defines the category of the section, which is \"features\".\n* **responsive:** Indicates that the section is responsive and adjusts its layout based on different screen sizes.\n* **canvas:** Contains configuration options for the section's canvas, including:\n    * **center:** Specifies whether the section should be centered within the layout. In this case, it is set to `false`, indicating that it should not be centered.\n\n**Purpose:**\n\nThe purpose of this file is to configure a specific section of a website with the following characteristics:\n\n* A title that reads \"Features with image icons\".\n* A category of \"features\".\n* A responsive layout.\n* No centering within the layout.\n\n**Usage:**\n\nThis configuration file can be used by a website builder or content management system to create and manage the \"Features with image icons\" section of a website. It provides the necessary settings and options to customize the section's title, category, responsiveness, and layout.",
    "input": "",
    "output": "{\n  \"title\": \"Features with image icons\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file provides a set of styles for a website or web application. It defines the visual appearance of various elements, including sections, items, titles, descriptions, and highlight text.\n\n**CSS Code Analysis:**\n\n**1. .wrapper Selector:**\n\n- Padding-top: 80px\n- Padding-bottom: 50px\n\nThe .wrapper element has a top padding of 80 pixels and a bottom padding of 50 pixels. This creates a buffer around the content within the wrapper.\n\n**2. .item Selector:**\n\n- Display: flex\n\nThe .item element is a flex container. Flexbox is a CSS layout model that allows elements to be aligned and distributed within a container.\n\n**3. .itemIcon Selector:**\n\n- Padding: var(--mantine-spacing-xs)\n- Margin-right: var(--mantine-spacing-md)\n\nThe .itemIcon element has a small padding and a margin on the right.\n\n**4. .itemTitle Selector:**\n\n- Margin-bottom: calc(var(--mantine-spacing-xs) / 2)\n\nThe .itemTitle element has a margin-bottom equal to half the value of the --mantine-spacing-xs variable.\n\n**5. .supTitle Selector:**\n\n- Text-align: center\n- Text-transform: uppercase\n- Font-weight: 800\n- Font-size: var(--mantine-font-size-sm)\n- Color: var(--mantine-color-blue-light-color)\n- Letter-spacing: 0.5px\n\nThe .supTitle element defines the style of a subtitle within an item. It is centered, uppercase, bold, has a small font size, and uses the blue-light color.\n\n**6. .title Selector:**\n\n- Line-height: 1\n- Text-align: center\n- Margin-top: var(--mantine-spacing-xl)\n\nThe .title element styles the title of an item. It has a line height of 1, is centered, and has a top margin.\n\n**7. .description Selector:**\n\n- Text-align: center\n- Margin-top: var(--mantine-spacing-xs)\n\nThe .description element styles the description text of an item. It is centered and has a top margin.\n\n**8. .highlight Selector:**\n\n- Background-color: var(--mantine-color-blue-light)\n- Padding: 5px\n- Padding-top: 0\n- Border-radius: var(--mantine-radius-sm)\n- Display: inline-block\n- Color: light-dark(inherit, var(--mantine-color-white))\n\nThe .highlight element styles the highlight text within an item. It has a blue-light background color, padding, rounded corners, and a white or light-gray text color depending on the background color.",
    "input": "",
    "output": ".wrapper {\n  padding-top: 80px;\n  padding-bottom: 50px;\n}\n\n.item {\n  display: flex;\n}\n\n.itemIcon {\n  padding: var(--mantine-spacing-xs);\n  margin-right: var(--mantine-spacing-md);\n}\n\n.itemTitle {\n  margin-bottom: calc(var(--mantine-spacing-xs) / 2);\n}\n\n.supTitle {\n  text-align: center;\n  text-transform: uppercase;\n  font-weight: 800;\n  font-size: var(--mantine-font-size-sm);\n  color: var(--mantine-color-blue-light-color);\n  letter-spacing: 0.5px;\n}\n\n.title {\n  line-height: 1;\n  text-align: center;\n  margin-top: var(--mantine-spacing-xl);\n}\n\n.description {\n  text-align: center;\n  margin-top: var(--mantine-spacing-xs);\n}\n\n.highlight {\n  background-color: var(--mantine-color-blue-light);\n  padding: 5px;\n  padding-top: 0;\n  border-radius: var(--mantine-radius-sm);\n  display: inline-block;\n  color: light-dark(inherit, var(--mantine-color-white));\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesImages.jsx\n\n**Purpose:**\n\nThe `FeaturesImages.jsx` file is a React component that renders a set of images and attributes associated with those images.\n\n**Components:**\n\n- `StoryWrapper`: A custom component that provides a layout and styling for the images and attributes.\n- `FeaturesImages`: The main component that displays the images and attributes.\n\n**Data Sources:**\n\n- `attributes.json`: A JSON file containing the attributes for each image.\n\n**How the File Works:**\n\n1. **Import Statements:**\n   - `StoryWrapper`: A custom component for layout and styling.\n   - `attributes.json`: A JSON file containing image attributes.\n   - `FeaturesImages`: The main component.\n\n2. **Export Default:**\n   - `title: 'FeaturesImages'`: Defines the title of the component.\n\n3. **Usage Function:**\n   - Creates an instance of `StoryWrapper` with the following props:\n     - `attributes`: Data from the `attributes.json` file.\n     - `component`: The `FeaturesImages` component.\n\n4. **FeaturesImages Component:**\n   - Renders the images and attributes based on the data in `attributes.json`.\n\n**Functionality:**\n\n- The `FeaturesImages` component iterates through the `attributes` object to display an image and its corresponding attributes.\n- The `StoryWrapper` component provides a consistent layout and styling for the images and attributes.\n\n**Usage:**\n\nThis component can be used to display a set of images with their associated attributes, such as product features, client testimonials, or portfolio samples.\n\n**Additional Notes:**\n\n- The `attributes.json` file should contain an array of objects, each representing an image and its attributes.\n- The `StoryWrapper` component provides styling and layout options, such as padding, margin, and background color.\n- The specific implementation of the `FeaturesImages` component may vary depending on the requirements of the project.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesImages } from './FeaturesImages';\n\nexport default { title: 'FeaturesImages' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesImages} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesImages.jsx\n\n**Purpose:**\n\nThe `FeaturesImages.jsx` file is a React component that displays a grid of images and text descriptions for different use cases of a product or service called \"PharmLand.\"\n\n**File Structure:**\n\n* **Imports:**\n    * Import necessary Mantine components and styles.\n    * Import an array of images named `IMAGES`.\n* **Data:**\n    * Define an array of objects containing image, title, and description for each use case.\n* **Component Function:**\n    * Map the data array to create a list of image and text elements.\n    * Render a container with a title, description, and a grid of use case items.\n\n**Features:**\n\n* **Use Case Images:** Each item in the grid displays an image and a title corresponding to a specific use case.\n* **Image Gallery:** The `IMAGES` array provides images for each use case.\n* **Text Descriptions:** Each item includes a brief description of the use case.\n* **Responsive Design:** The component adjusts to different screen sizes.\n\n**Functionality:**\n\n* The component renders a title, description, and a grid of use case items.\n* Each item includes an image, title, and description.\n* The grid is displayed with two columns on larger screens and one column on smaller screens.\n\n**Usage:**\n\nThis component can be used to showcase the different ways in which \"PharmLand\" can be used. It can be integrated into a website or application to provide information about the product or service.\n\n**Additional Notes:**\n\n* The `classes.module.css` file likely contains CSS styles for the component.\n* The `ThemeIcon` component provides a light-themed icon container.\n* The `SimpleGrid` component creates a grid layout.\n* The `Text` component is used to display text with different styles.\n* The `Title` component displays a title with a specific font size and weight.",
    "input": "",
    "output": "import { Container, Image, SimpleGrid, Text, ThemeIcon, Title } from '@mantine/core';\nimport IMAGES from './images';\nimport classes from './FeaturesImages.module.css';\n\nconst data = [\n  {\n    image: 'auditors',\n    title: 'Pharmacists',\n    description: 'Azurill can be seen bouncing and playing on its big, rubbery tail',\n  },\n  {\n    image: 'lawyers',\n    title: 'Lawyers',\n    description: 'Fans obsess over the particular length and angle of its arms',\n  },\n  {\n    image: 'accountants',\n    title: 'Bank owners',\n    description: 'They divvy up their prey evenly among the members of their pack',\n  },\n  {\n    image: 'others',\n    title: 'Others',\n    description: 'Phanpy uses its long nose to shower itself',\n  },\n];\n\nexport function FeaturesImages() {\n  const items = data.map((item) => (\n    <div className={classes.item} key={item.image}>\n      <ThemeIcon variant=\"light\" className={classes.itemIcon} size={60} radius=\"md\">\n        <Image src={IMAGES[item.image]} />\n      </ThemeIcon>\n\n      <div>\n        <Text fw={700} fz=\"lg\" className={classes.itemTitle}>\n          {item.title}\n        </Text>\n        <Text c=\"dimmed\">{item.description}</Text>\n      </div>\n    </div>\n  ));\n\n  return (\n    <Container size={700} className={classes.wrapper}>\n      <Text className={classes.supTitle}>Use cases</Text>\n\n      <Title className={classes.title} order={2}>\n        PharmLand is <span className={classes.highlight}>not</span> just for pharmacists\n      </Title>\n\n      <Container size={660} p={0}>\n        <Text c=\"dimmed\" className={classes.description}>\n          Its lungs contain an organ that creates electricity. The crackling sound of electricity\n          can be heard when it exhales. Azurill’s tail is large and bouncy. It is packed full of the\n          nutrients this Pokémon needs to grow.\n        </Text>\n      </Container>\n\n      <SimpleGrid cols={{ base: 1, xs: 2 }} spacing={50} mt={30}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** `icons.tsx`\n\n**Purpose:**\n\nThe `icons.tsx` file exports an object containing the source paths of four SVG icons: accountants, auditors, lawyers, and others.\n\n**Code Explanation:**\n\n* **Imports:**\n    * `accountants.svg`: Import the SVG file for the accountants icon.\n    * `auditors.svg`: Import the SVG file for the auditors icon.\n    * `lawyers.svg`: Import the SVG file for the lawyers icon.\n    * `others.svg`: Import the SVG file for the others icon.\n\n* **Object Export:**\n    * Create an object with four properties: `accountants`, `auditors`, `lawyers`, and `others`.\n    * Assign the `src` property of each imported SVG file to the corresponding property in the object.\n\n* **Type Casting:**\n    * Use type casting to specify that the object should have string keys and any values.\n\n**Usage:**\n\nThe `icons.tsx` file can be imported into other components or modules to access the source paths of the icons.\n\n```\nimport icons from './icons';\n\n// Access the source path of the accountants icon\nconst accountantsIconPath = icons.accountants;\n```\n\n**Additional Notes:**\n\n* The `src` property of an SVG file contains the path to the SVG file.\n* The `Record<string, any>` type alias is used to define an object with string keys and any values.\n* The `",
    "input": "",
    "output": "import accountants from './accountants.svg';\nimport auditors from './auditors.svg';\nimport lawyers from './lawyers.svg';\nimport others from './others.svg';\n\nexport default {\n  accountants: accountants.src,\n  auditors: auditors.src,\n  lawyers: lawyers.src,\n  others: others.src,\n} as Record<string, any>;\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a set of configuration options for a web page element or component. The purpose of this file is to specify the layout, styling, and functionality of the element.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Features with title\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1060\n  }\n}\n```\n\n**Properties:**\n\n- **title:** Specifies the title of the element. In this case, the title is \"Features with title\".\n- **category:** Indicates the category of the element. In this case, the category is \"features\".\n- **responsive:** Indicates whether the element should be responsive and adjust its layout to different screen sizes. The value is set to \"true\".\n- **canvas:** Defines the canvas options for the element.\n\n**Canvas Options:**\n\n- **center:** Specifies whether the element should be centered within its container. The value is set to \"true\".\n- **maxWidth:** Sets the maximum width of the element. The value is set to 1060.\n\n**Purpose:**\n\nThe configuration options specified in this JSON file are used by a web development framework or tool to render and display the element with the following characteristics:\n\n- A title named \"Features with title\".\n- Category: \"features\"\n- Responsive layout that adjusts to different screen sizes.\n- Centered within its container.\n- Maximum width of 1060 pixels.\n\n**Additional Notes:**\n\n- The specific framework or tool used to implement this configuration will vary depending on the context.\n- The JSON syntax and property names may be different depending on the framework or tool being used.\n- The configuration options can be further extended to include additional properties and values as needed.",
    "input": "",
    "output": "{\n  \"title\": \"Features with title\",\n  \"category\": \"features\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1060\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines styles for a user interface element. It appears to be a part of a Mantine framework, which provides a set of React components for building modern web applications.\n\n**CSS Rules:**\n\n**1. .wrapper Selector:**\n\n- Defines padding for an element with the class `wrapper`.\n- Calculates the padding value using a CSS variable `--mantine-spacing-xl`.\n- Sets the left and right padding to the calculated value.\n\n**Example Usage:**\n\n```html\n<div class=\"wrapper\">\n  <!-- Content here -->\n</div>\n```\n\n**2. .title Selector:**\n\n- Defines styles for an element with the class `title`.\n- Sets the font family to \"Outfit\" and the fallback font family specified by `--mantine-font-family`.\n- Sets the font size to 36px.\n- Sets the font weight to 500.\n- Sets the line height to 1.1.\n- Sets the margin-bottom to the value of `--mantine-spacing-md`.\n- Sets the color to a light or dark variant of black or white, depending on the theme.\n\n**Example Usage:**\n\n```html\n<h2 class=\"title\">Title</h2>\n```\n\n**Purpose:**\n\nThe CSS file likely defines styles for a section or header element within a Mantine-based application. It includes styles for the container and the title, such as font size, font family, padding, margin, and color.\n\n**Additional Notes:**\n\n- The CSS variables `--mantine-spacing-xl` and `--mantine-spacing-md` are likely defined elsewhere in the Mantine framework.\n- The `light-dark()` function is used to specify different colors based on the light or dark theme.\n- The `Outfit` font is assumed to be available as a font file or imported from an external source.",
    "input": "",
    "output": ".wrapper {\n  padding: calc(var(--mantine-spacing-xl) * 2) var(--mantine-spacing-xl);\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-size: 36px;\n  font-weight: 500;\n  line-height: 1.1;\n  margin-bottom: var(--mantine-spacing-md);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n}\n"
  },
  {
    "instruction": "**File Name:** FeaturesTitle.jsx\n\n**Purpose:**\n\nThe `FeaturesTitle.jsx` file is a React component that serves as a title for a list of features. It imports necessary components and data from other files and exports a component definition and a usage example.\n\n**Components and Data:**\n\n- `StoryWrapper`: A custom component that wraps the `FeaturesTitle` component and provides additional functionality.\n- `attributes.json`: A JSON file that contains attributes and configuration options for the `FeaturesTitle` component.\n- `FeaturesTitle`: The title component that displays the features.\n\n**Code Explanation:**\n\n**1. Import Statements:**\n   - Imports the `StoryWrapper` component from the `StoryWrapper` module.\n   - Imports the `attributes` object from the `attributes.json` file.\n   - Imports the `FeaturesTitle` component from the current file.\n\n**2. Component Definition:**\n   - Exports an object with the title `FeaturesTitle`. This likely represents the title of the component.\n\n**3. Usage Function:**\n   - Defines a `Usage` function that:\n     - Creates an instance of the `StoryWrapper` component.\n     - Passes the `attributes` object and `FeaturesTitle` component as props.\n     - Renders the `StoryWrapper` component with the specified props.\n\n**Purpose of Usage Function:**\n\nThe `Usage` function provides an example of how to use the `FeaturesTitle` component within a `StoryWrapper`. The `StoryWrapper` component likely provides additional functionality or styling that is not included in the `FeaturesTitle` component itself.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component may be a custom component used for testing or documentation purposes.\n- The `attributes.json` file may contain configuration options for the `FeaturesTitle` component, such as title text, font size, and color.\n- The `FeaturesTitle` component likely renders a title element with the specified attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FeaturesTitle } from './FeaturesTitle';\n\nexport default { title: 'FeaturesTitle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FeaturesTitle} />;\n}\n"
  },
  {
    "instruction": "**FeaturesTitle.js**\n\nThis React component is responsible for displaying a section of features for a product or service. It uses the Mantine UI library to create a visually appealing and informative layout.\n\n**File Structure:**\n\n- **Imports:**\n    - Import necessary Mantine components and icons.\n- **Features Data:**\n    - Define an array of objects representing the features, including an icon, title, and description.\n- **Feature Components:**\n    - Map over the features and render a component for each feature.\n    - Each component includes an icon, title, and description.\n- **Layout:**\n    - Use a Grid component to layout the title, text, button, and feature components.\n    - Use a SimpleGrid component to display the feature components in two columns on larger screens.\n- **CSS:**\n    - Import a CSS module for styling.\n\n**Features:**\n\n- **Free and Open Source:** All Mantine components are available under the MIT license.\n- **TypeScript Based:** Mantine provides type safety for its components and hooks.\n- **No Annoying Focus Ring:** Focus ring appears only when navigating with keyboard.\n- **Flexible:** Customize colors, spacing, shadows, fonts, and other settings with a global theme object.\n\n**Purpose:**\n\nThe purpose of this component is to showcase the key features of Mantine and encourage users to get started.\n\n**Usage:**\n\nThe `FeaturesTitle` component can be rendered in any React application where it is desired to display a section of features.\n\n**Example:**\n\n```\n<FeaturesTitle />\n```\n\n**Output:**\n\nThe component will render a section with a title, text, button, and four feature components. Each feature component will display an icon, title, and description.",
    "input": "",
    "output": "import { IconCircleDotted, IconFileCode, IconFlame, IconReceiptOff } from '@tabler/icons-react';\nimport { Button, Grid, SimpleGrid, Text, ThemeIcon, Title } from '@mantine/core';\nimport classes from './FeaturesTitle.module.css';\n\nconst features = [\n  {\n    icon: IconReceiptOff,\n    title: 'Free and open source',\n    description: 'All packages are published under MIT license, you can use Mantine in any project',\n  },\n  {\n    icon: IconFileCode,\n    title: 'TypeScript based',\n    description: 'Build type safe applications, all components and hooks export types',\n  },\n  {\n    icon: IconCircleDotted,\n    title: 'No annoying focus ring',\n    description:\n      'With new :focus-visible selector focus ring will appear only when user navigates with keyboard',\n  },\n  {\n    icon: IconFlame,\n    title: 'Flexible',\n    description:\n      'Customize colors, spacing, shadows, fonts and many other settings with global theme object',\n  },\n];\n\nexport function FeaturesTitle() {\n  const items = features.map((feature) => (\n    <div key={feature.title}>\n      <ThemeIcon\n        size={44}\n        radius=\"md\"\n        variant=\"gradient\"\n        gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n      >\n        <feature.icon size={26} stroke={1.5} />\n      </ThemeIcon>\n      <Text fz=\"lg\" mt=\"sm\" fw={500}>\n        {feature.title}\n      </Text>\n      <Text c=\"dimmed\" fz=\"sm\">\n        {feature.description}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <Grid gutter={80}>\n        <Grid.Col span={{ base: 12, md: 5 }}>\n          <Title className={classes.title} order={2}>\n            A fully featured React components library for your next project\n          </Title>\n          <Text c=\"dimmed\">\n            Build fully functional accessible web applications faster than ever – Mantine includes\n            more than 120 customizable components and hooks to cover you in any situation\n          </Text>\n\n          <Button\n            variant=\"gradient\"\n            gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n            size=\"lg\"\n            radius=\"md\"\n            mt=\"xl\"\n          >\n            Get started\n          </Button>\n        </Grid.Col>\n        <Grid.Col span={{ base: 12, md: 7 }}>\n          <SimpleGrid cols={{ base: 1, md: 2 }} spacing={30}>\n            {items}\n          </SimpleGrid>\n        </Grid.Col>\n      </Grid>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the properties and layout of a user interface element in a web application. Specifically, it represents an input field with a floating label.\n\n**JSON Structure:**\n\n```json\n{\n  \"title\": \"Input with floating label\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** A string value that specifies the title or label of the input field. In this case, it is \"Input with floating label\".\n* **category:** A string value that categorizes the element. In this case, it is \"inputs\".\n* **canvas:** An object that defines the layout and style of the element.\n\n**Canvas Properties:**\n\n* **center:** A boolean value that determines whether the element should be centered horizontally within its container. In this case, it is set to `true`.\n* **maxWidth:** A number value that specifies the maximum width of the element in pixels. In this case, it is set to 420.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the visual and functional properties of an input field with a floating label in a user interface.\n\n**Usage:**\n\nThe configuration file can be used by a web application framework or framework-agnostic library to create the corresponding user interface element. The framework will then use the specified properties and layout to render the element on the screen.\n\n**Additional Notes:**\n\n* The `title` property specifies the label displayed above the input field.\n* The `floating label` refers to a design technique where the label for the input field is positioned above the field when the user interacts with it.\n* The `maxWidth` property ensures that the input field does not exceed a certain width on the screen.\n* The `center` property centers the input field horizontally within its container.",
    "input": "",
    "output": "{\n  \"title\": \"Input with floating label\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided contains CSS code that defines styles for a form input field and its label. The code is structured in three main sections:\n\n**1. Root Element:**\n\n```css\n.root {\n  position: relative;\n}\n```\n\n- The `root` class is applied to the root element of the form input.\n- It sets the `position` property to `relative`. This positioning context allows the child elements to be positioned absolutely relative to it.\n\n**2. Label Styles:**\n\n```css\n.label {\n  /* ...\n}\n```\n\n- The `label` class styles the label element associated with the input field.\n- It sets the following properties:\n    - `position`: absolute\n    - `z-index`: 2\n    - `top`: 7px\n    - `left`: var(--mantine-spacing-sm)\n    - `pointer-events`: none\n    - `color`: light-dark(var(--mantine-color-gray-5), var(--mantine-color-dark-3))\n    - `transition`: transform 150ms ease, font-size 150ms ease, color 150ms ease\n\n- The `&[data-floating]` selector applies these styles when the `data-floating` attribute is set on the label element. These styles adjust the label's position, font size, font weight, and color when the input field receives focus or when it contains any text.\n\n**3. Input Styles:**\n\n```css\n.input {\n  /* ...\n}\n```\n\n- The `input` class styles the input field.\n- It sets the following styles for the placeholder text:\n    - `transition`: color 150ms ease\n    - `color`: transparent\n\n- The `&[data-floating]` selector applies a different color for the placeholder text when the input field receives focus or when it contains any text.\n\n**Purpose:**\n\nThe CSS code you provided is part of a form styling system that manages the styles of form input fields and their labels. It is designed to provide a smooth user experience by dynamically adjusting the label position and placeholder text color based on user interaction with the input field.\n\n**Key Features:**\n\n- Absolute positioning of the label relative to the input field.\n- Transition effects for label positioning, font size, color, and placeholder text color.\n- Adjustment of label and placeholder text styles based on input focus or text presence.",
    "input": "",
    "output": ".root {\n  position: relative;\n}\n\n.label {\n  position: absolute;\n  z-index: 2;\n  top: 7px;\n  left: var(--mantine-spacing-sm);\n  pointer-events: none;\n  color: light-dark(var(--mantine-color-gray-5), var(--mantine-color-dark-3));\n  transition:\n    transform 150ms ease,\n    font-size 150ms ease,\n    color 150ms ease;\n\n  &[data-floating] {\n    transform: translate(calc(var(--mantine-spacing-sm) * -1), -28px);\n    font-size: var(--mantine-font-size-xs);\n    font-weight: 500;\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  }\n}\n\n.required {\n  transition: opacity 150ms ease;\n  opacity: 0;\n\n  [data-floating] & {\n    opacity: 1;\n  }\n}\n\n.input {\n  &::placeholder {\n    transition: color 150ms ease;\n    color: transparent;\n  }\n\n  &[data-floating] {\n    &::placeholder {\n      color: var(--mantine-color-placeholder);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**Description of the File:**\n\nThe file you provided is a JavaScript module that serves as the entry point for a React component called `FloatingLabelInput`. It contains the following components and functionality:\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the `FloatingLabelInput` component and provides additional attributes for rendering a story.\n* **FloatingLabelInput:** The main component that represents the floating label input field.\n\n**Data:**\n\n* **attributes.json:** A JSON file containing the attributes for the `StoryWrapper` component.\n\n**Code Functionality:**\n\n**1. Import Statements:**\n- Imports the necessary components and data from other files.\n- `StoryWrapper` is imported from the `StoryWrapper` component.\n- `attributes.json` is imported as an object called `attributes`.\n- `FloatingLabelInput` is imported as a component.\n\n**2. Default Export:**\n- Exports an object with the title `FloatingLabelInput`.\n\n**3. Usage Function:**\n- Defines a `Usage` function that renders a `StoryWrapper` component.\n- Passes the `attributes` object and `FloatingLabelInput` component to the `StoryWrapper`.\n\n**Purpose:**\n\nThe primary purpose of this file is to provide a React component called `FloatingLabelInput` that represents a floating label input field. The component is wrapped in a `StoryWrapper` component, which provides additional attributes for rendering a story.\n\n**Usage:**\n\nThe `Usage` function can be used to render the `FloatingLabelInput` component with the specified attributes. This allows developers to easily integrate the component into their applications.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains configuration options for the `FloatingLabelInput` component, such as input labels, placeholder text, and validation rules.\n- The `StoryWrapper` component is likely used for generating documentation or stories for the `FloatingLabelInput` component.\n- The specific implementation of the `FloatingLabelInput` component is not included in this file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FloatingLabelInput } from './FloatingLabelInput';\n\nexport default { title: 'FloatingLabelInput' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FloatingLabelInput} />;\n}\n"
  },
  {
    "instruction": "**FloatingLabelInput.js**\n\nThis file is a React component that implements a floating label input field using the `@mantine/core` library.\n\n**Description:**\n\n* **Purpose:** The component provides an input field with a label that floats above the input field when it is focused or has a value entered.\n* **Features:**\n    * Floating label that appears when the input field is focused or has a value.\n    * Placeholder text.\n    * Required field indicator.\n    * Input value state management.\n    * Focus and blur events for label positioning.\n    * Custom CSS classes.\n    * Accessible input with `autocomplete=\"nope\"`.\n\n**Implementation:**\n\n* The component uses the `TextInput` component from the `@mantine/core` library.\n* It uses the `useState` hook to manage the input value, focus state, and floating label state.\n* The `floating` state is calculated based on whether the input field has a value, is focused, or both.\n* The `data-floating` attribute is used to add the floating label class to the input field and label.\n* The `labelProps` prop is used to pass the `data-floating` attribute to the label.\n\n**Usage:**\n\nThe component can be used as follows:\n\n```\n<FloatingLabelInput />\n```\n\n**Output:**\n\nThe component renders an input field with a floating label. The label floats above the input field when it is focused or has a value entered.\n\n**Additional Notes:**\n\n* The component uses custom CSS classes defined in the `FloatingLabelInput.module.css` file.\n* The `mt=\"md\"` prop sets the margin-top of the input field.\n* The `autoComplete=\"nope\"` prop prevents autocomplete suggestions from appearing in the input field.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { TextInput } from '@mantine/core';\nimport classes from './FloatingLabelInput.module.css';\n\nexport function FloatingLabelInput() {\n  const [focused, setFocused] = useState(false);\n  const [value, setValue] = useState('');\n  const floating = value.trim().length !== 0 || focused || undefined;\n\n  return (\n    <TextInput\n      label=\"Floating label\"\n      placeholder=\"OMG, it also has a placeholder\"\n      required\n      classNames={classes}\n      value={value}\n      onChange={(event) => setValue(event.currentTarget.value)}\n      onFocus={() => setFocused(true)}\n      onBlur={() => setFocused(false)}\n      mt=\"md\"\n      autoComplete=\"nope\"\n      data-floating={floating}\n      labelProps={{ 'data-floating': floating }}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a footer layout with the following characteristics:\n\n**Title:** Footer with centered links\n\n**Category:** footers\n\n**Responsive:** Yes\n\n**Canvas Configuration:**\n\n- **center:** false\n\n**Purpose:**\n\nThe purpose of this file is to specify the layout and settings for a footer that includes centered links.\n\n**Key Features:**\n\n- **Title:** The title of the footer, which is \"Footer with centered links\".\n- **Category:** The category of the footer, which is \"footers\".\n- **Responsive:** Indicates that the footer should be responsive and adapt to different screen sizes.\n- **canvas.center:** This property is set to false, which means that the links in the footer will not be centered automatically.\n\n**Structure:**\n\nThe file is a JSON object with the following structure:\n\n```json\n{\n  \"title\": \"Footer with centered links\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Usage:**\n\nThis file can be used to create a footer layout with centered links in a web or mobile application. The layout can be referenced by other files or code using the provided title or category.\n\n**Additional Notes:**\n\n- The `canvas.center` property can be used to specify whether the links should be centered automatically.\n- The specific design and styling of the footer will depend on additional CSS or other styling elements.\n- The file name and location may vary depending on the application or framework being used.",
    "input": "",
    "output": "{\n  \"title\": \"Footer with centered links\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Purpose:**\n\nThe file is a CSS stylesheet that defines the styles for a website footer.\n\n**File Structure:**\n\nThe file contains three CSS classes:\n\n- `.footer`\n- `.inner`\n- `.links`\n\n**Purpose of Each Class:**\n\n**`.footer` Class:**\n\n- Sets a margin-top of 120 pixels to the footer element.\n- Defines a border-top with a thickness of 1 pixel, a solid style, and a color that is determined by the `--mantine-color-gray-2` or `--mantine-color-dark-5` CSS variables depending on the theme mode (light or dark).\n\n**`.inner` Class:**\n\n- Sets the display property to `flex`.\n- Justifies the content evenly using `justify-content: space-between`.\n- Aligns the items vertically using `align-items: center`.\n- Adds padding to the inner element based on the `--mantine-spacing-md` CSS variable.\n- Media query for small screens (max-width: $mantine-breakpoint-sm):\n    - Changes the flex-direction to `column`.\n\n**`.links` Class:**\n\n- Media query for small screens (max-width: $mantine-breakpoint-sm):\n    - Adds a margin-top of `--mantine-spacing-lg`.\n    - Adds a margin-bottom of `--mantine-spacing-sm`.\n\n**Overall Function:**\n\nThe CSS stylesheet defines the layout and appearance of the website footer, including:\n\n- Footer margin and border\n- Inner content layout (flexbox)\n- Links alignment\n\n**Additional Notes:**\n\n- The `--mantine-color-gray-2` and `--mantine-color-dark-5` CSS variables are used to set the color of the border based on the theme mode.\n- The `$mantine-breakpoint-sm` variable represents the breakpoint for small screens.\n- The media queries ensure that the footer adjusts its layout for different screen sizes.",
    "input": "",
    "output": ".footer {\n  margin-top: 120px;\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n\n.inner {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--mantine-spacing-md) var(--mantine-spacing-md);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n  }\n}\n\n.links {\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-top: var(--mantine-spacing-lg);\n    margin-bottom: var(--mantine-spacing-sm);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FooterCentered.jsx\n\n**File Function:**\n\nThis file is a React component that represents a footer with a centered layout. It utilizes the `StoryWrapper` component to provide a controlled environment for testing and demonstrating the component.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `FooterCentered` component and provides additional attributes for testing.\n* **FooterCentered:** The main footer component responsible for rendering the centered content.\n\n**Data:**\n\n* **attributes.json:** A JSON file containing attributes that will be passed to the `StoryWrapper` component.\n* **FooterCentered.jsx:** The JavaScript code that defines the `FooterCentered` component.\n\n**Usage:**\n\nThe `Usage` function renders the `StoryWrapper` component with the following configuration:\n\n* **attributes:** The attributes specified in `attributes.json`.\n* **component:** The `FooterCentered` component.\n\n**Purpose:**\n\nThe primary purpose of this file is to:\n\n* Provide a reusable footer component with a centered layout.\n* Facilitate testing and demonstration of the component using the `StoryWrapper`.\n\n**Additional Notes:**\n\n* The `title` property in the `export default` statement defines the title of the component for documentation purposes.\n* The `StoryWrapper` component allows developers to specify additional attributes and options for testing the component.\n* The `FooterCentered` component likely includes CSS styles and logic for centering the content.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FooterCentered } from './FooterCentered';\n\nexport default { title: 'FooterCentered' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FooterCentered} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `FooterCentered.js` file is a React component that renders a centered footer with links and social media icons.\n\n**Functionality:**\n\n- **Imports:**\n   - Imports necessary components and icons from the `@tabler/icons-react`, `@mantine/core`, and `@mantinex/mantine-logo` libraries.\n\n- **Data:**\n   - Defines an array of links with their corresponding labels and anchor destinations.\n\n- **Components:**\n   - Renders a footer with the following components:\n     - MantineLogo component displaying the company logo.\n     - Group component containing links with the `Anchor` component.\n     - Group component containing social media icons with the `ActionIcon` component.\n\n- **Styling:**\n   - Uses a CSS module (FooterCentered.module.css) to style the footer elements.\n\n**Features:**\n\n- Centered layout.\n- Links to different pages.\n- Social media icons for Twitter, YouTube, and Instagram.\n- Custom styling for the footer elements.\n\n**Usage:**\n\nTo use the `FooterCentered` component, simply import it into another React component and render it.\n\n**Example:**\n\n```\n<FooterCentered />\n```\n\n**Output:**\n\nThe component will render a centered footer with links and social media icons as specified in the code.\n\n**Additional Notes:**\n\n- The `onClick` event handler prevents the default behavior of the links (navigating to the specified destinations).\n- The `stroke` prop for the social media icons sets the stroke width to 1.5.\n- The `wrap=\"nowrap\"` prop ensures that the social media icons are displayed on a single line.",
    "input": "",
    "output": "import { IconBrandInstagram, IconBrandTwitter, IconBrandYoutube } from '@tabler/icons-react';\nimport { ActionIcon, Anchor, Group } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './FooterCentered.module.css';\n\nconst links = [\n  { link: '#', label: 'Contact' },\n  { link: '#', label: 'Privacy' },\n  { link: '#', label: 'Blog' },\n  { link: '#', label: 'Store' },\n  { link: '#', label: 'Careers' },\n];\n\nexport function FooterCentered() {\n  const items = links.map((link) => (\n    <Anchor\n      c=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      lh={1}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <div className={classes.inner}>\n        <MantineLogo size={28} />\n\n        <Group className={classes.links}>{items}</Group>\n\n        <Group gap=\"xs\" justify=\"flex-end\" wrap=\"nowrap\">\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandTwitter size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandYoutube size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandInstagram size={18} stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </div>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines a footer component with links. It specifies the following properties:\n\n**Title:**\n- The title of the footer, which is \"Footer with links\".\n\n**Category:**\n- The category of the footer, which is \"footers\".\n\n**Responsive:**\n- Whether the footer is responsive, which means it will adjust its layout to different screen sizes.\n\n**Canvas:**\n- The canvas settings for the footer:\n    - **center:** Whether the footer should be centered on the page. In this case, it is set to \"false\", indicating that the footer will not be centered.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define a footer component with links that can be used in a website or web application. The footer typically contains links to important pages or sections of the website, as well as social media icons, contact information, or other relevant information.\n\n**Usage:**\n\nThis configuration file can be used to create a footer component using a front-end framework or development tool. The specific implementation of the footer component will depend on the framework or tool being used.\n\n**Additional Notes:**\n\n- The file name is not included in the provided JSON data.\n- The properties and values in the JSON file can be customized to suit the specific needs of the website or application.\n- The specific links and content of the footer should be added separately.",
    "input": "",
    "output": "{\n  \"title\": \"Footer with links\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** footer.css\n\n**Purpose:**\n\nThe footer.css file styles the footer section of a website. It defines the layout, typography, and visual elements of the footer, including the logo, description, navigation links, and social media icons.\n\n**Key Features:**\n\n- **Background and Border:**\n    - Sets the background color and top border of the footer.\n    - The background color is automatically adjusted based on the light or dark mode setting.\n\n- **Logo:**\n    - Specifies the maximum width of the logo image.\n    - Adjusts the display and layout of the logo for small screen sizes.\n\n- **Description:**\n    - Provides space between the logo and the description text.\n    - Centers the description text on small screen sizes.\n\n- **Inner Container:**\n    - Displays the logo, description, and navigation groups in a flex container.\n    - Flex-direction: column is used to arrange the elements vertically on small screen sizes.\n\n- **Navigation Groups:**\n    - Uses a flex container to display navigation links in multiple rows.\n    - Hides the navigation groups on small screen sizes.\n\n- **Links:**\n    - Sets the font size, padding, and text color for navigation links.\n    - Underlines the links on hover.\n\n- **Title:**\n    - Defines the font size, weight, family, margin, and color for the navigation title.\n\n- **After Footer Section:**\n    - Creates a separate section with a border above it.\n    - Centers the copyright and social media icons.\n    - Adjusts the layout on small screen sizes.\n\n- **Social Media Icons:**\n    - Centers the social media icons on small screen sizes.\n\n**Media Queries:**\n\nThe CSS file uses media queries to adjust the layout and styling of the footer elements based on different screen sizes.\n\n**Overall, the footer.css file plays a crucial role in providing a consistent and informative footer experience for users.**",
    "input": "",
    "output": ".footer {\n  margin-top: 120px;\n  padding-top: calc(var(--mantine-spacing-xl) * 2);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 2);\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n\n.logo {\n  max-width: 200px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n.description {\n  margin-top: 5px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-top: var(--mantine-spacing-xs);\n    text-align: center;\n  }\n}\n\n.inner {\n  display: flex;\n  justify-content: space-between;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n.groups {\n  display: flex;\n  flex-wrap: wrap;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    display: none;\n  }\n}\n\n.wrapper {\n  width: 160px;\n}\n\n.link {\n  display: block;\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-1));\n  font-size: var(--mantine-font-size-sm);\n  padding-top: 3px;\n  padding-bottom: 3px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n}\n\n.title {\n  font-size: var(--mantine-font-size-lg);\n  font-weight: 500;\n  font-family: Outfit, var(--mantine-font-family);\n  margin-bottom: calc(var(--mantine-spacing-xs) / 2);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n}\n\n.afterFooter {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: var(--mantine-spacing-xl);\n  padding-top: var(--mantine-spacing-xl);\n  padding-bottom: var(--mantine-spacing-xl);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-4));\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n  }\n}\n\n.social {\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-top: var(--mantine-spacing-xs);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FooterLinks.tsx\n\n**Purpose:**\n\nThe file contains a React component called `FooterLinks` that is responsible for rendering the footer links section of a website.\n\n**Key Features:**\n\n- **Imports:**\n    - `StoryWrapper` component from the `StoryWrapper` component.\n    - `attributes.json` file containing the data for the footer links.\n    - `FooterLinks` component from the current file.\n- **Component Declaration:**\n    - The file exports a default object with a `title` property set to `FooterLinks`.\n- **Usage Function:**\n    - Defines a `Usage()` function that renders the `StoryWrapper` component with the following props:\n        - `attributes`: The data from the `attributes.json` file.\n        - `component`: The `FooterLinks` component.\n\n**File Structure:**\n\n```\nFooterLinks.tsx\n├── attributes.json\n└── FooterLinks.tsx\n```\n\n**attributes.json:**\n\nThe `attributes.json` file contains the data that will be passed to the `FooterLinks` component as props. It should have a structure similar to this:\n\n```json\n{\n  \"links\": [\n    {\n      \"title\": \"Home\",\n      \"url\": \"/\"\n    },\n    {\n      \"title\": \"About\",\n      \"url\": \"/about\"\n    },\n    // ... additional links\n  ]\n}\n```\n\n**Usage:**\n\nThe `Usage()` function can be used to render the `FooterLinks` component with the data from the `attributes.json` file. The `StoryWrapper` component is used to provide a convenient way to render and preview the component.\n\n**Purpose of the File:**\n\nThe `FooterLinks.tsx` file is responsible for rendering the footer links section of a website. It provides a reusable component that can be easily integrated into any website.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FooterLinks } from './FooterLinks';\n\nexport default { title: 'FooterLinks' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FooterLinks} />;\n}\n"
  },
  {
    "instruction": "**File Name:** FooterLinks.js\n\n**Description:**\n\nThe `FooterLinks.js` file creates a React component that renders a footer with links and social media icons. It uses the Mantine UI library for styling and layout.\n\n**Functionality:**\n\n* **Data Structure:**\n   - The `data` variable defines an array of objects, each representing a group of links in the footer.\n   - Each group object contains a `title` and an array of `links`.\n   - Each link object has a `label` and a `link` property.\n\n* **Component Structure:**\n   - The `FooterLinks` component renders the following elements:\n     - A footer element with a copyright notice.\n     - A container with the following elements:\n       - A logo section with the company name and description.\n       - A groups section containing link groups.\n     - A social media section with icons for Twitter, YouTube, and Instagram.\n\n* **Link Generation:**\n   - The `groups` variable iterates over the `data` array and generates a link group for each object.\n   - Each link group contains a title and a list of links.\n   - The `links` are rendered as `<Text>` elements with the `component` prop set to \"a\" to create clickable links.\n\n* **Social Media Icons:**\n   - Icons for Twitter, YouTube, and Instagram are imported from the `@tabler/icons-react` library.\n   - The icons are rendered as `ActionIcon` components within a `Group`.\n\n**Key Features:**\n\n- The footer is responsive and adapts to different screen sizes.\n- The links are organized into groups for easy navigation.\n- The social media icons provide a way to connect with the company.\n- The copyright notice indicates ownership and legal rights.\n\n**Usage:**\n\nThis component can be used to add a footer to any React application that uses the Mantine UI library. It can be imported and rendered within the application's layout.\n\n**Additional Notes:**\n\n- The CSS file (`FooterLinks.module.css`) styles the component.\n- The `MantineLogo` component is from the `@mantinex/mantine-logo` library.\n- The `onClick` handler prevents the default link behavior and keeps the user on the same page.",
    "input": "",
    "output": "import { IconBrandInstagram, IconBrandTwitter, IconBrandYoutube } from '@tabler/icons-react';\nimport { ActionIcon, Container, Group, Text } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './FooterLinks.module.css';\n\nconst data = [\n  {\n    title: 'About',\n    links: [\n      { label: 'Features', link: '#' },\n      { label: 'Pricing', link: '#' },\n      { label: 'Support', link: '#' },\n      { label: 'Forums', link: '#' },\n    ],\n  },\n  {\n    title: 'Project',\n    links: [\n      { label: 'Contribute', link: '#' },\n      { label: 'Media assets', link: '#' },\n      { label: 'Changelog', link: '#' },\n      { label: 'Releases', link: '#' },\n    ],\n  },\n  {\n    title: 'Community',\n    links: [\n      { label: 'Join Discord', link: '#' },\n      { label: 'Follow on Twitter', link: '#' },\n      { label: 'Email newsletter', link: '#' },\n      { label: 'GitHub discussions', link: '#' },\n    ],\n  },\n];\n\nexport function FooterLinks() {\n  const groups = data.map((group) => {\n    const links = group.links.map((link, index) => (\n      <Text<'a'>\n        key={index}\n        className={classes.link}\n        component=\"a\"\n        href={link.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </Text>\n    ));\n\n    return (\n      <div className={classes.wrapper} key={group.title}>\n        <Text className={classes.title}>{group.title}</Text>\n        {links}\n      </div>\n    );\n  });\n\n  return (\n    <footer className={classes.footer}>\n      <Container className={classes.inner}>\n        <div className={classes.logo}>\n          <MantineLogo size={30} />\n          <Text size=\"xs\" c=\"dimmed\" className={classes.description}>\n            Build fully functional accessible web applications faster than ever\n          </Text>\n        </div>\n        <div className={classes.groups}>{groups}</div>\n      </Container>\n      <Container className={classes.afterFooter}>\n        <Text c=\"dimmed\" size=\"sm\">\n          © 2020 mantine.dev. All rights reserved.\n        </Text>\n\n        <Group gap={0} className={classes.social} justify=\"flex-end\" wrap=\"nowrap\">\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandTwitter size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandYoutube size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandInstagram size={18} stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </footer>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe file you have provided is a JSON configuration file that defines the properties of a simple footer.\n\n**Properties**\n\n* **title:** The title of the footer, which is \"Simple footer\".\n* **category:** The category of the footer, which is \"footers\".\n* **responsive:** A boolean value that indicates whether the footer is responsive to different screen sizes, which is set to `true`.\n* **canvas:** An object that contains the canvas properties.\n    * **center:** A boolean value that indicates whether the footer should be centered on the screen, which is set to `false`.\n\n**Purpose**\n\nThe purpose of this file is to configure a simple footer with the following characteristics:\n\n* A title of \"Simple footer\".\n* Belongs to the \"footers\" category.\n* Responsive design that adjusts the layout for different screen sizes.\n* Not centered on the screen.\n\n**Usage**\n\nThis JSON configuration file can be used to define the properties of a footer in a web application or website. It can be included in a theme or template file to render the footer with the specified properties.\n\n**Example**\n\n```json\n{\n  \"title\": \"Simple footer\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Note:**\n\n* The specific implementation of how this JSON configuration is used to render a footer will vary depending on the framework or platform being used.\n* The `canvas` property can be further extended to specify additional canvas properties, such as padding, margin, and background color.",
    "input": "",
    "output": "{\n  \"title\": \"Simple footer\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Purpose:**\n\nThe CSS file defines the styles for the footer section of a webpage. It is responsible for formatting and positioning the footer content, including links and copyright information.\n\n**File Structure:**\n\nThe file consists of three CSS classes:\n\n- `.footer`\n- `.inner`\n- `.links`\n\n**`.footer` Class:**\n\n- Sets a margin-top of 120 pixels, pushing the footer away from the content above.\n- Defines a border-top with a 1px solid line using the `light-dark()` function to automatically adjust the color based on the user's theme (light or dark).\n\n**`.inner` Class:**\n\n- Displays the footer content in a flex container with the following properties:\n    - `justify-content: space-between`: Distributes the content evenly horizontally with spacing between the elements.\n    - `align-items: center`: Centers the content vertically.\n    - `padding-top: var(--mantine-spacing-xl)`: Adds padding to the top of the footer.\n    - `padding-bottom: var(--mantine-spacing-xl)`: Adds padding to the bottom of the footer.\n\n- Includes a media query for screen sizes less than or equal to the `$mantine-breakpoint-xs` value:\n    - `flex-direction: column`: Changes the flex direction to stack the elements vertically on smaller screens.\n\n**`.links` Class:**\n\n- Includes a media query for screen sizes less than or equal to the `$mantine-breakpoint-xs` value:\n    - `margin-top: var(--mantine-spacing-md)`: Adds margin to the top of the links section on smaller screens.\n\n**Purpose of the Classes:**\n\n- `.footer`: Creates a visually distinct footer section with a top margin and border.\n- `.inner`: Defines the layout of the footer content, including spacing and alignment.\n- `.links`: Adjusts the spacing of the links section on smaller screens.\n\n**Overall Function:**\n\nThe CSS file styles the footer as follows:\n\n- A margined and bordered section.\n- Content aligned horizontally and vertically.\n- Links positioned appropriately based on screen size.",
    "input": "",
    "output": ".footer {\n  margin-top: 120px;\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n\n.inner {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: var(--mantine-spacing-xl);\n  padding-bottom: var(--mantine-spacing-xl);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.links {\n  @media (max-width: $mantine-breakpoint-xs) {\n    margin-top: var(--mantine-spacing-md);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FooterSimple.jsx\n\n**Purpose:**\n\nThe file is a React component that displays a simple footer with minimal information. It is part of a storybook application, which is used to document and showcase the UI components.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `FooterSimple` component with additional attributes and renders it within a storybook layout.\n* **FooterSimple:** The actual footer component that displays the copyright notice and other essential information.\n\n**Imports:**\n\n* `StoryWrapper`: A custom component imported from the `StoryWrapper` module.\n* `attributes.json`: A JSON file containing attributes that will be passed to the `FooterSimple` component.\n* `FooterSimple`: The React component to be rendered.\n\n**Code Breakdown:**\n\n* **export default { title: 'FooterSimple' };:** This line sets the title of the story to \"FooterSimple\".\n* **export function Usage() { ... }:** This function defines the story that will be rendered.\n* **return <StoryWrapper attributes={attributes} component={FooterSimple} />;:**\n    * It creates an instance of the `StoryWrapper` component.\n    * Passes the `attributes` object to the `attributes` prop of `StoryWrapper`.\n    * Sets the `component` prop of `StoryWrapper` to `FooterSimple`.\n    * This renders the `FooterSimple` component with the specified attributes within the storybook layout.\n\n**Usage:**\n\nThe `Usage()` function is used to render the `FooterSimple` component within a storybook layout. The attributes specified in `attributes.json` will be passed to the component.\n\n**Conclusion:**\n\nThe `FooterSimple.jsx` file is a React component that displays a simple footer with copyright information. It is part of a storybook application that allows developers to easily preview and document the UI components.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FooterSimple } from './FooterSimple';\n\nexport default { title: 'FooterSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FooterSimple} />;\n}\n"
  },
  {
    "instruction": "**Description of the File:**\n\nThe provided file is a React functional component named `FooterSimple`. It is responsible for rendering a simple footer with links to various pages.\n\n**Components and Functionality:**\n\n- **Imports:**\n    - `Anchor`, `Container`, and `Group` components are imported from the `@mantine/core` library.\n    - `MantineLogo` component is imported from the `@mantinex/mantine-logo` library.\n    - CSS classes are imported from a file named `FooterSimple.module.css`.\n\n- **Data:**\n    - An array of objects called `links` is defined, each containing a link and a label.\n\n- **Functional Component:**\n    - The `FooterSimple` component receives no props.\n    - It renders a `div` element with a class named `classes.footer`.\n    - Inside the `Container` component, it renders:\n        - A `MantineLogo` component with a size of 28.\n        - A `Group` component with a class named `classes.links`.\n            - A list of `Anchor` components, each representing a link from the `links` array.\n                - Each `Anchor` component has the following properties:\n                    - `c=\"dimmed\"`: Sets the color to \"dimmed\".\n                    - `key={link.label}`: Sets a unique key based on the label.\n                    - `href={link.link}`: Sets the link href.\n                    - `onClick={(event) => event.preventDefault()}`: Prevents the default link behavior.\n                    - `size=\"sm\"`: Sets the font size to \"sm\".\n                    - The label of the link.\n\n**Purpose:**\n\nThe `FooterSimple` component is responsible for rendering a simple footer with links to contact, privacy, blog, and careers pages.\n\n**Additional Notes:**\n\n- The CSS classes are likely used to style the footer elements.\n- The `preventDefault()` method is used to prevent the default link behavior and prevent the page from refreshing when clicking on the links.\n- The `@mantine/core` and `@mantinex/mantine-logo` libraries are external libraries used to create the footer components.",
    "input": "",
    "output": "import { Anchor, Container, Group } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './FooterSimple.module.css';\n\nconst links = [\n  { link: '#', label: 'Contact' },\n  { link: '#', label: 'Privacy' },\n  { link: '#', label: 'Blog' },\n  { link: '#', label: 'Careers' },\n];\n\nexport function FooterSimple() {\n  const items = links.map((link) => (\n    <Anchor<'a'>\n      c=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <Container className={classes.inner}>\n        <MantineLogo size={28} />\n        <Group className={classes.links}>{items}</Group>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file used by a content management system (CMS) or website builder. It defines the settings and configuration for a specific element called a \"Footer with social icons\".\n\n**Properties:**\n\n- **title:** The title of the footer, which is \"Footer with social icons\".\n- **category:** The category of the footer, which is \"footers\".\n- **responsive:** A boolean value that indicates whether the footer is responsive and adapts to different screen sizes. In this case, the value is `true`.\n- **canvas:** An object that contains additional configuration options for the footer's layout.\n    - **center:** A boolean value that specifies whether the content in the footer should be centered. In this case, the value is `false`, indicating that the content should not be centered.\n\n**Purpose:**\n\nThe purpose of this file is to define the configuration for a specific type of footer element that includes social media icons. The configuration includes settings such as the title, category, responsiveness, and layout options.\n\n**Usage:**\n\nThis configuration file is typically used by a CMS or website builder to automatically generate and display a footer with social icons on a website. The settings specified in the file will determine the appearance and functionality of the footer, such as the presence of social media links, the layout of the icons, and any additional text or content.\n\n**Additional Notes:**\n\n- The `canvas` property may contain additional configuration options specific to the CMS or website builder being used.\n- The values for these properties may vary depending on the specific CMS or website builder being used.\n- The file may be stored in a directory containing other configuration files for different website elements.",
    "input": "",
    "output": "{\n  \"title\": \"Footer with social icons\",\n  \"category\": \"footers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for the footer section of a webpage.\n\n**Key Features:**\n\n**Footer Style:**\n\n- Margin-top: 120px, pushing it 120px away from the top of the page.\n- Border-top: 1px solid light-dark(#eaeaea, #333), creating a horizontal line at the top of the footer.\n\n**Inner Section:**\n\n- Flexbox layout with space-between alignment, distributing elements horizontally with equal spacing.\n- Center alignment vertically.\n- Padding-top and padding-bottom for spacing.\n\n**Responsive Design:**\n\n- On screens with a maximum width of $mantine-breakpoint-xs (likely a mobile device), the flex-direction is set to column, arranging elements vertically.\n\n**Links Section:**\n\n- Margin-top is added for spacing between the links and other elements in the footer.\n\n**Purpose:**\n\nThe purpose of this file is to style the footer section, including the border, layout, spacing, and responsiveness. It aims to create a visually appealing and functional footer that provides additional information or navigation options.\n\n**Additional Notes:**\n\n- The file uses the Mantine CSS framework.\n- The variables --mantine-color-gray-2, --mantine-color-dark-5, and --mantine-spacing-xl are likely defined within the Mantine framework.\n- The $mantine-breakpoint-xs variable represents a specific screen size breakpoint.",
    "input": "",
    "output": ".footer {\n  margin-top: 120px;\n  border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-5));\n}\n\n.inner {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: var(--mantine-spacing-xl);\n  padding-bottom: var(--mantine-spacing-xl);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.links {\n  @media (max-width: $mantine-breakpoint-xs) {\n    margin-top: var(--mantine-spacing-md);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** FooterSocial.jsx\n\n**File Function:**\n\nThis file is a React component that represents a footer with social media links.\n\n**File Structure:**\n\n* **Imports:**\n    * `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper.jsx`.\n    * `attributes.json` file containing data for the social media links.\n    * `FooterSocial` component from the current file.\n\n* **Exports:**\n    * An object with the title `FooterSocial`.\n    * A function named `Usage` that renders the `StoryWrapper` component.\n\n**Usage:**\n\n* The `Usage` function creates an instance of the `StoryWrapper` component.\n* It passes the `attributes` object and the `FooterSocial` component as props to the `StoryWrapper`.\n* The `StoryWrapper` component handles rendering the component with the specified attributes.\n\n**Purpose:**\n\nThe `FooterSocial` component is responsible for displaying a footer with links to various social media platforms.\n\n**Data Source:**\n\nThe `attributes.json` file provides the data for the social media links, such as the platform name, URL, and icon.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps and renders the `FooterSocial` component with the provided attributes.\n* **FooterSocial:** The actual footer component that displays the social media links.\n\n**Rendering:**\n\nWhen the `Usage` function is called, the following happens:\n\n1. The `StoryWrapper` component is created with the `attributes` and `FooterSocial` components as props.\n2. The `FooterSocial` component renders the social media links based on the data in `attributes.json`.\n\n**Output:**\n\nThe output of this file is a rendered footer with links to various social media platforms.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for creating interactive stories or documentation examples.\n* The `attributes.json` file can be customized to include different social media platforms and links.\n* The design and styling of the footer are not specified in this file, but they can be customized as needed.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { FooterSocial } from './FooterSocial';\n\nexport default { title: 'FooterSocial' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={FooterSocial} />;\n}\n"
  },
  {
    "instruction": "**Description:**\n\nThe file `FooterSocial.jsx` is a React component that renders a social media footer with icons for Twitter, YouTube, and Instagram.\n\n**File Structure:**\n\n* **Imports:**\n    * Import necessary components and icons from the `@tabler/icons-react`, `@mantine/core`, and `@mantinex/mantine-logo` libraries.\n    * Import CSS classes from the `FooterSocial.module.css` file.\n\n* **Component Function:**\n    * The `FooterSocial` function renders the following components:\n        * A `div` element with a class of `classes.footer`.\n        * A `Container` element with a class of `classes.inner`.\n        * A `MantineLogo` element with a size of 28.\n        * A `Group` element with a gap of 0, a class of `classes.links`, and `justify=\"flex-end\"` and `wrap=\"nowrap\"` attributes.\n            * Three `ActionIcon` elements with the following attributes:\n                * `size=\"lg\"`\n                * `color=\"gray\"`\n                * `variant=\"subtle\"`\n                * Each `ActionIcon` contains an icon for Twitter, YouTube, and Instagram, respectively.\n\n**Purpose:**\n\nThe `FooterSocial` component is responsible for displaying social media icons in a footer section of a website. It provides a convenient way for users to connect with the company or organization behind the website on these platforms.\n\n**Usage:**\n\nThe `FooterSocial` component can be imported and used in other React components to render the social media footer.\n\n**Example:**\n\n```\n<FooterSocial />\n```\n\n**Styling:**\n\nThe CSS file `FooterSocial.module.css` provides styling for the component, including the layout, colors, and sizes of the elements.\n\n**Conclusion:**\n\nThe `FooterSocial.jsx` file is a React component that serves as a social media footer, allowing users to connect with the company or organization on Twitter, YouTube, and Instagram. It provides a convenient and visually appealing way to promote social media presence.",
    "input": "",
    "output": "import { IconBrandInstagram, IconBrandTwitter, IconBrandYoutube } from '@tabler/icons-react';\nimport { ActionIcon, Container, Group } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './FooterSocial.module.css';\n\nexport function FooterSocial() {\n  return (\n    <div className={classes.footer}>\n      <Container className={classes.inner}>\n        <MantineLogo size={28} />\n        <Group gap={0} className={classes.links} justify=\"flex-end\" wrap=\"nowrap\">\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandTwitter size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandYoutube size={18} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" color=\"gray\" variant=\"subtle\">\n            <IconBrandInstagram size={18} stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON object that defines a React component called \"Forgot Password\".\n\n**Purpose:**\n\nThe purpose of this component is to allow users to reset their forgotten passwords.\n\n**Key Features:**\n\n- Title: \"Forgot password\"\n- Category: Authentication\n- Author: rtivital\n- Dimmed background: True\n- Responsive design: True\n- Dependencies:\n    - Core components (container, title, anchor, button, text-input, paper)\n    - Tabler Icons React library\n- Canvas configuration: Center content is disabled\n\n**Component Structure:**\n\nThe JSON object provides the following information:\n\n- **title:** The title of the component.\n- **category:** The category or topic of the component.\n- **author:** The author of the component.\n- **dimmed:** Whether the background should be dimmed or not.\n- **responsive:** Whether the component should be responsive or not.\n- **dependencies:** A list of JavaScript libraries or components required by the component.\n- **canvas:** Configuration options for the component's canvas.\n\n**Usage:**\n\nThis component can be used to create a page or screen that allows users to reset their forgotten passwords. The component would typically include the following elements:\n\n- A title that reads \"Forgot password?\"\n- An input field where users can enter their email address or username\n- A button that submits the form\n- A message that indicates that the password reset link has been sent to the user's email address\n\n**Additional Notes:**\n\n- The component is centered by default.\n- The background is dimmed.\n- The component is responsive.\n- The component depends on the Tabler Icons React library for the icons used in the design.",
    "input": "",
    "output": "{\n  \"title\": \"Forgot password\",\n  \"category\": \"authentication\",\n  \"author\": \"rtivital\",\n  \"dimmed\": true,\n  \"responsive\": true,\n  \"dependencies\": [\n    \"/core/container/\",\n    \"/core/title/\",\n    \"/core/anchor/\",\n    \"/core/button/\",\n    \"/core/text-input/\",\n    \"/core/paper/\",\n    \"@tabler/icons-react\"\n  ],\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThis file appears to be a CSS file used to style a user interface. It defines styles for three CSS classes: `title`, `controls`, and `control`.\n\n**.title Class:**\n\n* Sets the font size to 26 pixels.\n* Sets the font weight to 500 (medium).\n* Sets the font family to \"Outfit\", followed by the value of the `--mantine-font-family` CSS variable.\n\n**.controls Class:**\n\n* Applies a media query that adjusts the flex-direction property of elements with this class when the screen width is less than or equal to the value of the `$mantine-breakpoint-xs` CSS variable. In this case, it sets the flex-direction to `column-reverse`.\n\n**.control Class:**\n\n* Applies a media query that adjusts the width, text-align, and other properties of elements with this class when the screen width is less than or equal to the value of the `$mantine-breakpoint-xs` CSS variable. In this case, it sets the width to 100% and the text-align to `center`.\n\n**Purpose:**\n\nThe purpose of this CSS file is likely to style the title, control buttons, and layout of a user interface. It appears to be part of a web application or software application built with the Mantine CSS framework.\n\n**Additional Notes:**\n\n* The `--mantine-font-family` CSS variable is not defined in the provided code snippet. It is likely a predefined variable within the Mantine CSS framework.\n* The `$mantine-breakpoint-xs` CSS variable is also not defined in the provided code snippet. It is likely a predefined breakpoint value within the Mantine CSS framework.",
    "input": "",
    "output": ".title {\n  font-size: 26px;\n  font-weight: 500;\n  font-family: Outfit, var(--mantine-font-family);\n}\n\n.controls {\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column-reverse;\n  }\n}\n\n.control {\n  @media (max-width: $mantine-breakpoint-xs) {\n    width: 100%;\n    text-align: center;\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a JavaScript module that exports a React component called `ForgotPassword`. It is part of a React application that likely handles password recovery functionality.\n\n**File Structure:**\n\n* **import statements:**\n    * Import the `StoryWrapper` component from the `StoryWrapper` module.\n    * Import the `attributes.json` file, which likely contains attributes used by the `ForgotPassword` component.\n    * Import the `ForgotPassword` component from the current file.\n* **export statement:**\n    * Exports an object with a `title` property set to `'ForgotPassword'`.\n* **Usage function:**\n    * Creates an instance of the `StoryWrapper` component.\n    * Passes the `attributes` object and the `ForgotPassword` component as props.\n    * Returns the `StoryWrapper` component.\n\n**Purpose:**\n\nThe `ForgotPassword` component likely provides a screen or form for users to recover their forgotten passwords. It may include features such as:\n\n* Input fields for entering the email address associated with the account.\n* Buttons to submit the request or reset the password.\n* Error messages or confirmation messages based on user actions.\n\n**Usage:**\n\nThe `Usage()` function is used to render the `ForgotPassword` component within a `StoryWrapper` component. The `StoryWrapper` component provides additional functionality, such as setting up props, state, and context for the child component.\n\n**Additional Notes:**\n\n* The `attributes.json` file likely contains attributes that are used by the `ForgotPassword` component, such as placeholders for input fields or validation messages.\n* The `StoryWrapper` component is likely used for testing and documentation purposes.\n* The `ForgotPassword` component may be part of a larger application that includes other features and functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ForgotPassword } from './ForgotPassword';\n\nexport default { title: 'ForgotPassword' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ForgotPassword} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ForgotPassword.js\n\n**Purpose:**\n\nThe `ForgotPassword.js` file is a React functional component that represents the \"Forgot Password\" page. It allows users to reset their passwords by entering their email address.\n\n**Components:**\n\n* **Container:** A component that provides a centered and padded layout with a maximum width of 460 pixels.\n* **Title:** A component that displays the title \"Forgot your password?\" in a centered and highlighted style.\n* **Text:** A component that displays a subheading with instructions to enter the email address.\n* **Paper:** A component that forms the main content box with rounded corners, a border, and shadow.\n* **TextInput:** A component that provides an input field for the user's email address.\n* **Group:** A component that groups the reset password and back to login buttons.\n* **Anchor:** A component that links to the login page.\n* **Button:** A component that submits the reset password request.\n\n**Styling:**\n\nThe `ForgotPassword.module.css` file provides custom styling for the component, including the title, text, buttons, and input field.\n\n**Functionality:**\n\nWhen the user enters their email address and clicks the \"Reset password\" button, the following actions may occur:\n\n* An API request is sent to the server to initiate the password reset process.\n* A confirmation message is displayed to the user.\n* The user is redirected to the login page.\n\n**Features:**\n\n* User-friendly interface with clear instructions.\n* Secure password reset process.\n* Easy navigation to the login page.\n\n**Target Audience:**\n\nThis component is primarily intended for users who have forgotten their passwords.\n\n**Additional Notes:**\n\n* The `@tabler/icons-react` and `@mantine/core` libraries provide the necessary components for the layout and styling.\n* The `classes.title`, `classes.text`, `classes.control`, etc., variables represent the corresponding CSS classes from the `ForgotPassword.module.css` file.\n* The specific functionality of the API request and navigation may vary depending on the application's backend setup.",
    "input": "",
    "output": "import { IconArrowLeft } from '@tabler/icons-react';\nimport {\n  Anchor,\n  Box,\n  Button,\n  Center,\n  Container,\n  Group,\n  Paper,\n  Text,\n  TextInput,\n  Title,\n} from '@mantine/core';\nimport classes from './ForgotPassword.module.css';\n\nexport function ForgotPassword() {\n  return (\n    <Container size={460} my={30}>\n      <Title className={classes.title} ta=\"center\">\n        Forgot your password?\n      </Title>\n      <Text c=\"dimmed\" fz=\"sm\" ta=\"center\">\n        Enter your email to get a reset link\n      </Text>\n\n      <Paper withBorder shadow=\"md\" p={30} radius=\"md\" mt=\"xl\">\n        <TextInput label=\"Your email\" placeholder=\"me@mantine.dev\" required />\n        <Group justify=\"space-between\" mt=\"lg\" className={classes.controls}>\n          <Anchor c=\"dimmed\" size=\"sm\" className={classes.control}>\n            <Center inline>\n              <IconArrowLeft size={12} stroke={1.5} />\n              <Box ml={5}>Back to the login page</Box>\n            </Center>\n          </Anchor>\n          <Button className={classes.control}>Reset password</Button>\n        </Group>\n      </Paper>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file is a configuration file that defines the layout and settings for a user interface element on a webpage. It describes a \"Forgot password on input label\" element within the \"inputs\" category.\n\n**JSON Structure:**\n\n```json\n{\n  \"title\": \"Forgot password on input label\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n- **title:** The title of the element, which is \"Forgot password on input label\".\n- **category:** The category of the element, which is \"inputs\".\n- **canvas:** An object that defines the layout settings for the element.\n\n**Canvas Settings:**\n\n- **center:** Specifies whether the element should be centered horizontally within its container. In this case, the value is set to `true`.\n- **maxWidth:** Sets the maximum width of the element. The value is set to `420`.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the following properties of the \"Forgot password on input label\" element:\n\n- Title: \"Forgot password on input label\"\n- Category: Inputs\n- Centered layout\n- Maximum width of 420 pixels\n\n**Usage:**\n\nThis configuration file can be used by a web framework or UI library to render the \"Forgot password on input label\" element with the specified layout and settings. It can be included in a template or script file to define the element's behavior and appearance.",
    "input": "",
    "output": "{\n  \"title\": \"Forgot password on input label\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ForgotPasswordInput.jsx\n\n**File Function:**\n\nThe `ForgotPasswordInput.jsx` file is a React component that is responsible for displaying and handling the UI for the \"Forgot Password\" functionality.\n\n**Components Used:**\n\n* `StoryWrapper`: A custom component that provides a convenient way to showcase different UI components with predefined attributes.\n* `ForgotPasswordInput`: The component itself, which handles user input and password recovery logic.\n* `attributes.json`: A JSON file containing predefined attributes for the `StoryWrapper` component.\n\n**Code Breakdown:**\n\n1. **Imports:**\n   * `StoryWrapper` is imported from the `StoryWrapper` component.\n   * `attributes.json` is imported to provide predefined attributes for the `StoryWrapper`.\n   * `ForgotPasswordInput` is imported as the main component.\n\n2. **Component Definition:**\n   * The component is exported with a `title` prop set to `'ForgotPasswordInput'`.\n   * The `Usage()` function is defined as the default export.\n\n3. **Usage Function:**\n   * It renders a `StoryWrapper` component with the following props:\n     * `attributes`: The predefined attributes from `attributes.json`.\n     * `component`: The `ForgotPasswordInput` component.\n\n**Purpose:**\n\nThe `ForgotPasswordInput.jsx` file serves as a UI component for the \"Forgot Password\" functionality. It allows users to input their email address or username to initiate the password recovery process.\n\n**Additional Notes:**\n\n* The `attributes.json` file can be used to specify default values for input fields, error messages, and other UI elements.\n* The `StoryWrapper` component provides a convenient way to showcase the component with predefined attributes, which can be helpful for documentation and testing purposes.\n* The specific logic for password recovery is not included in this file and may be implemented separately.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ForgotPasswordInput } from './ForgotPasswordInput';\n\nexport default { title: 'ForgotPasswordInput' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ForgotPasswordInput} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ForgotPasswordInput.jsx\n\n**Purpose:**\n\nThe file creates a React functional component called `ForgotPasswordInput` that renders a form input for resetting forgotten passwords.\n\n**Components Used:**\n\n- `Anchor`: A link that triggers an action when clicked.\n- `Group`: A container that horizontally aligns its children.\n- `PasswordInput`: An input field for entering passwords.\n- `Text`: A text component.\n\n**Functionality:**\n\n- The component renders a group of elements with a label \"Your password\" and a link to \"Forgot your password?\".\n- Clicking the link prevents the default form submission behavior.\n- It also renders a password input field with a placeholder text \"Your password\".\n- The input field has an ID of \"your-password\".\n\n**Code Breakdown:**\n\n```jsx\nimport { Anchor, Group, PasswordInput, Text } from '@mantine/core';\n\nexport function ForgotPasswordInput() {\n  return (\n    <>\n      <Group justify=\"space-between\" mb={5}>\n        <Text component=\"label\" htmlFor=\"your-password\" size=\"sm\" fw={500}>\n          Your password\n        </Text>\n\n        <Anchor href=\"#\" onClick={(event) => event.preventDefault()} pt={2} fw={500} fz=\"xs\">\n          Forgot your password?\n        </Anchor>\n      </Group>\n      <PasswordInput placeholder=\"Your password\" id=\"your-password\" />\n    </>\n  );\n}\n```\n\n**Usage:**\n\nThis component can be used to allow users to reset their forgotten passwords. It can be integrated into a larger form or used as a standalone component.\n\n**Additional Notes:**\n\n- The `@mantine/core` library provides the necessary components for building the form input.\n- The `onClick` handler prevents the link from navigating to another page.\n- The `id` attribute of the password input field is used to identify the input field in JavaScript.",
    "input": "",
    "output": "import { Anchor, Group, PasswordInput, Text } from '@mantine/core';\n\nexport function ForgotPasswordInput() {\n  return (\n    <>\n      <Group justify=\"space-between\" mb={5}>\n        <Text component=\"label\" htmlFor=\"your-password\" size=\"sm\" fw={500}>\n          Your password\n        </Text>\n\n        <Anchor href=\"#\" onClick={(event) => event.preventDefault()} pt={2} fw={500} fz=\"xs\">\n          Forgot your password?\n        </Anchor>\n      </Group>\n      <PasswordInput placeholder=\"Your password\" id=\"your-password\" />\n    </>\n  );\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file is a JSON configuration file that defines the settings for a form titled \"Get in touch\".\n\n**Purpose:**\n\nThe purpose of this file is to configure the layout and functionality of the \"Get in touch\" form.\n\n**Configuration Parameters:**\n\n**title:**\n- Specifies the title of the form as \"Get in touch\".\n\n**category:**\n- Determines the category of the form as \"contact\".\n\n**responsive:**\n- Indicates that the form should be responsive and adapt to different screen sizes.\n\n**canvas:**\n- Configures the layout of the form within the canvas.\n- **center:** Sets the form to be centered within the canvas.\n- **maxWidth:** Specifies the maximum width of the form as 800 pixels.\n\n**Other Notes:**\n\n- The file is written in JSON format.\n- It is typically used in a content management system (CMS) or a form builder tool.\n- The configuration parameters can be customized to suit the specific needs of the form.\n\n**Usage:**\n\n- The configuration file is typically loaded and applied when the \"Get in touch\" form is created or rendered.\n- The settings specified in the file determine the form's title, category, layout, and responsiveness.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Get in touch\",\n  \"category\": \"contact\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n```\n\n**Conclusion:**\n\nThe JSON configuration file provides a way to define the settings for the \"Get in touch\" form, including its title, category, layout, and responsiveness. This configuration is essential for creating and managing the form in a CMS or form builder tool.",
    "input": "",
    "output": "{\n  \"title\": \"Get in touch form\",\n  \"category\": \"contact\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n"
  },
  {
    "instruction": "**Purpose of the File**\n\nThe file is a CSS stylesheet that defines the visual styling of a specific component or section of a web page. It contains CSS rules that style elements with specific class names (e.g., .wrapper, .icon, .title, .description).\n\n**File Structure**\n\nThe file is organized into four main CSS rule blocks:\n\n```css\n.wrapper {\n  display: flex;\n  align-items: center;\n  color: var(--mantine-color-white);\n}\n\n.icon {\n  margin-right: var(--mantine-spacing-md);\n  background-color: transparent;\n}\n\n.title {\n  color: var(--mantine-color-blue-0);\n}\n\n.description {\n  color: var(--mantine-color-white);\n}\n```\n\n**CSS Rules**\n\n**1. .wrapper Rule**\n- `display: flex;`: Sets the display property of the .wrapper element to flexbox.\n- `align-items: center;`: Aligns the child elements vertically within the .wrapper element.\n- `color: var(--mantine-color-white);`: Sets the text color of the .wrapper element to the value of the --mantine-color-white CSS variable.\n\n**2. .icon Rule**\n- `margin-right: var(--mantine-spacing-md);`: Adds a right margin to the .icon element equal to the value of the --mantine-spacing-md CSS variable.\n- `background-color: transparent;`: Sets the background color of the .icon element to transparent.\n\n**3. .title Rule**\n- `color: var(--mantine-color-blue-0);`: Sets the text color of the .title element to the value of the --mantine-color-blue-0 CSS variable.\n\n**4. .description Rule**\n- `color: var(--mantine-color-white);`: Sets the text color of the .description element to the value of the --mantine-color-white CSS variable.\n\n**Purpose of the Styles**\n\nThe CSS styles define the following visual properties:\n\n- Background color of the .icon element.\n- Text color of the .wrapper, .title, and .description elements.\n- Display and alignment of the elements within the .wrapper element.\n\n**Usage**\n\nThis CSS stylesheet can be included in a HTML document to style the corresponding HTML elements with the specified class names. The styles can be used to create a visually appealing and consistent layout for the web page.",
    "input": "",
    "output": ".wrapper {\n  display: flex;\n  align-items: center;\n  color: var(--mantine-color-white);\n}\n\n.icon {\n  margin-right: var(--mantine-spacing-md);\n  background-color: transparent;\n}\n\n.title {\n  color: var(--mantine-color-blue-0);\n}\n\n.description {\n  color: var(--mantine-color-white);\n}\n"
  },
  {
    "instruction": "**File Name:** ContactIcons.tsx\n\n**Description:**\n\nThis file creates a React component for displaying contact information with icons. It uses the following packages:\n\n- `@tabler/icons-react`: Provides icons for displaying contact details.\n- `@mantine/core`: Provides layout and styling components.\n\n**Components:**\n\n- `ContactIcon`: A component that displays a single contact detail with an icon, title, and description.\n- `ContactIconsList`: A component that displays a list of contact icons based on a predefined set of data.\n\n**Data:**\n\nThe `MOCKDATA` constant defines an array of objects representing the contact details:\n\n- `title`: The title of the contact detail (e.g., \"Email\", \"Phone\", \"Address\", \"Working hours\").\n- `description`: The description of the contact detail (e.g., an email address, phone number, address, or working hours).\n- `icon`: The icon to display for the contact detail.\n\n**Functionality:**\n\n- The `ContactIcon` component renders an icon, title, and description in a container.\n- The `ContactIconsList` component iterates over the `MOCKDATA` and maps each object to a `ContactIcon` component.\n- The icons are displayed based on the `icon` property of each object in `MOCKDATA`.\n\n**Output:**\n\nThe file generates a React component that displays a list of contact icons with titles and descriptions.\n\n**Usage:**\n\nThe `ContactIconsList` component can be used in other React components to display a list of contact details.\n\n**Example:**\n\n```\n<ContactIconsList />\n```\n\n**Output:**\n\nA list of contact icons with titles and descriptions based on the `MOCKDATA`.\n\n**Note:**\n\n- The CSS file `ContactIcons.module.css` likely defines styles for the component, such as padding, margin, and font sizes.\n- The `@mantine/core` components used in the component, such as `Box` and `Text`, provide styling and layout capabilities.",
    "input": "",
    "output": "import { IconAt, IconMapPin, IconPhone, IconSun } from '@tabler/icons-react';\nimport { Box, Stack, Text } from '@mantine/core';\nimport classes from './ContactIcons.module.css';\n\ninterface ContactIconProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  icon: typeof IconSun;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nfunction ContactIcon({ icon: Icon, title, description, ...others }: ContactIconProps) {\n  return (\n    <div className={classes.wrapper} {...others}>\n      <Box mr=\"md\">\n        <Icon size={24} />\n      </Box>\n\n      <div>\n        <Text size=\"xs\" className={classes.title}>\n          {title}\n        </Text>\n        <Text className={classes.description}>{description}</Text>\n      </div>\n    </div>\n  );\n}\n\nconst MOCKDATA = [\n  { title: 'Email', description: 'hello@mantine.dev', icon: IconAt },\n  { title: 'Phone', description: '+49 (800) 335 35 35', icon: IconPhone },\n  { title: 'Address', description: '844 Morris Park avenue', icon: IconMapPin },\n  { title: 'Working hours', description: '8 a.m. – 11 p.m.', icon: IconSun },\n];\n\nexport function ContactIconsList() {\n  const items = MOCKDATA.map((item, index) => <ContactIcon key={index} {...item} />);\n  return <Stack>{items}</Stack>;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a form component. It is responsible for formatting the layout and appearance of various elements within the form, including fields, buttons, and contact information.\n\n**Structure:**\n\nThe file consists of six CSS classes, each responsible for styling a specific element:\n\n* `.wrapper`: Styles the outermost container of the form.\n* `.form`: Styles the form itself.\n* `.fields`: Styles the field inputs.\n* `.fieldInput`: Styles individual field inputs.\n* `.fieldsGroup`: Styles a group of field inputs.\n* `.contacts`: Styles the contact information section.\n\n**Styles:**\n\n**`.wrapper`:**\n- Display as a flexbox container.\n- Background color based on the user's light or dark mode settings.\n- Border radius and padding.\n- Border.\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.form`:**\n- Flex: 1 to take up remaining space.\n- Padding.\n- Left padding doubled.\n- Border left removed.\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.fields`:**\n- Margin top adjusted to align fields.\n\n**`.fieldInput`:**\n- Flex: 1 to take up remaining space.\n- Margin left applied to consecutive inputs.\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.fieldsGroup`:**\n- Display as a flexbox container.\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.contacts`:**\n- Box-sizing set to border-box.\n- Relative positioning.\n- Border radius.\n- Background image and position.\n- Border.\n- Padding.\n- Width of 280px.\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.title`:**\n- Margin bottom adjusted for spacing.\n- Font family set to \"Outfit\".\n- Responsive layout for screens smaller than the small breakpoint.\n\n**`.control`:**\n- Responsive layout for screens smaller than the small breakpoint.\n\n**Conclusion:**\n\nThe CSS file defines a visually appealing and responsive form layout. It ensures that the form elements are properly aligned, spaced, and styled according to the design specifications.",
    "input": "",
    "output": ".wrapper {\n  display: flex;\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n  border-radius: var(--mantine-radius-lg);\n  padding: 4px;\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-8));\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n  }\n}\n\n.form {\n  flex: 1;\n  padding: var(--mantine-spacing-xl);\n  padding-left: calc(var(--mantine-spacing-xl) * 2);\n  border-left: 0;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding: var(--mantine-spacing-md);\n    padding-left: var(--mantine-spacing-md);\n  }\n}\n\n.fields {\n  margin-top: -12px;\n}\n\n.fieldInput {\n  flex: 1;\n\n  & + & {\n    margin-left: var(--mantine-spacing-md);\n\n    @media (max-width: $mantine-breakpoint-sm) {\n      margin-left: 0;\n      margin-top: var(--mantine-spacing-md);\n    }\n  }\n}\n\n.fieldsGroup {\n  display: flex;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n  }\n}\n\n.contacts {\n  box-sizing: border-box;\n  position: relative;\n  border-radius: var(--mantine-radius-lg);\n  background-size: cover;\n  background-position: center;\n  border: 1px solid transparent;\n  padding: var(--mantine-spacing-xl);\n  flex: 0 0 280px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-bottom: var(--mantine-spacing-sm);\n    padding-left: var(--mantine-spacing-md);\n  }\n}\n\n.title {\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-bottom: var(--mantine-spacing-xl);\n  }\n}\n\n.control {\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex: 1;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** GetInTouch.jsx\n\n**File Function:**\n\nThe `GetInTouch.jsx` file is a React component that serves as a get-in-touch section for a story. It is responsible for displaying a form and collecting user input for inquiries.\n\n**Components:**\n\n* **StoryWrapper:** A custom React component that wraps the `GetInTouch` component and provides additional functionalities, such as attributes and a component.\n* **attributes.json:** A JSON file that contains the attributes for the form, such as label text, input fields, and submit button.\n* **GetInTouch:** A React component that renders the get-in-touch form based on the attributes specified in `attributes.json`.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { GetInTouch } from './GetInTouch';\n\nexport default { title: 'GetInTouch' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={GetInTouch} />;\n}\n```\n\n**Explanation:**\n\n* The file imports the necessary components and files.\n* It defines a `title` prop for the component, which is used for navigation or identification.\n* In the `Usage()` function:\n    * It sets the `attributes` prop to the data in the `attributes.json` file.\n    * It sets the `component` prop to the `GetInTouch` component.\n    * It renders the `StoryWrapper` component with the specified attributes and component.\n\n**Purpose:**\n\nThe `GetInTouch.jsx` file provides a user interface for inquiries or feedback. It allows users to submit their details and messages through a form.\n\n**Additional Notes:**\n\n* The `attributes.json` file contains the configuration for the form fields, such as labels, input types, and submit button text.\n* The `StoryWrapper` component provides additional functionalities, such as styling, layout, and data management.\n* The `GetInTouch` component handles the form submission and any necessary actions based on user input.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { GetInTouch } from './GetInTouch';\n\nexport default { title: 'GetInTouch' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={GetInTouch} />;\n}\n"
  },
  {
    "instruction": "**GetInTouch.js**\n\nThis file is a React component that serves as a contact form and information section for a website. It uses the Mantine CSS framework to create a visually appealing layout.\n\n**Functionality:**\n\n* **Displays contact information:**\n    * A title stating \"Contact information\"\n    * A list of contact icons and links (imported from `ContactIconsList`)\n* **Provides a form for users to get in touch:**\n    * A title stating \"Get in touch\"\n    * Input fields for name, email, subject, and message\n    * A submit button\n* **Prevents form submissions:**\n    * The `onSubmit` event handler prevents the form from being submitted, as it does not have an actual backend endpoint for handling messages.\n\n**Layout:**\n\n* The component is wrapped in a `Paper` component with a shadow and rounded corners.\n* The content is divided into two sections:\n    * **Contact information:**\n        * A background image (imported from `bg.svg`)\n        * A title\n        * A list of contact icons\n    * **Form:**\n        * A title\n        * Input fields\n        * A submit button\n* The form and contact information are displayed side-by-side in a `SimpleGrid`.\n\n**CSS:**\n\n* The component uses a CSS module (GetInTouch.module.css) for styling the various elements.\n\n**Usage:**\n\nThe `GetInTouch` component can be imported and rendered to display the contact form and information section on a website.\n\n**Additional Notes:**\n\n* The `bg.svg` file should be available in the same directory as the `GetInTouch.js` file.\n* The contact icons and links can be customized as needed.\n* The form submission handler can be implemented with a real backend endpoint to handle incoming messages.",
    "input": "",
    "output": "import { Button, Group, Paper, SimpleGrid, Text, Textarea, TextInput } from '@mantine/core';\nimport bg from './bg.svg';\nimport { ContactIconsList } from './ContactIcons';\nimport classes from './GetInTouch.module.css';\n\nexport function GetInTouch() {\n  return (\n    <Paper shadow=\"md\" radius=\"lg\">\n      <div className={classes.wrapper}>\n        <div className={classes.contacts} style={{ backgroundImage: `url(${bg.src})` }}>\n          <Text fz=\"lg\" fw={700} className={classes.title} c=\"#fff\">\n            Contact information\n          </Text>\n\n          <ContactIconsList />\n        </div>\n\n        <form className={classes.form} onSubmit={(event) => event.preventDefault()}>\n          <Text fz=\"lg\" fw={700} className={classes.title}>\n            Get in touch\n          </Text>\n\n          <div className={classes.fields}>\n            <SimpleGrid cols={{ base: 1, sm: 2 }}>\n              <TextInput label=\"Your name\" placeholder=\"Your name\" />\n              <TextInput label=\"Your email\" placeholder=\"hello@mantine.dev\" required />\n            </SimpleGrid>\n\n            <TextInput mt=\"md\" label=\"Subject\" placeholder=\"Subject\" required />\n\n            <Textarea\n              mt=\"md\"\n              label=\"Your message\"\n              placeholder=\"Please include all relevant information\"\n              minRows={3}\n            />\n\n            <Group justify=\"flex-end\" mt=\"md\">\n              <Button type=\"submit\" className={classes.control}>\n                Send message\n              </Button>\n            </Group>\n          </div>\n        </form>\n      </div>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON object that defines the configuration for a \"Get in touch\" form.\n\n**Properties:**\n\n**title:**\n- Value: \"Get in touch form\"\n- Purpose: Specifies the title of the form.\n\n**category:**\n- Value: \"contact\"\n- Purpose: Indicates that the form is categorized as \"contact.\"\n\n**responsive:**\n- Value: true\n- Purpose: Indicates that the form should be responsive and adapt to different screen sizes.\n\n**canvas:**\n- **center:** true\n- Purpose: Centers the form horizontally.\n- **maxWidth:** 620\n- Purpose: Sets the maximum width of the form to 620 pixels.\n\n**Purpose of the File:**\n\nThis file defines the configuration for a \"Get in touch\" form. It specifies the title, category, responsiveness, and layout of the form.\n\n**Additional Notes:**\n\n- The values for \"title\" and \"category\" can be customized as needed.\n- The \"canvas\" property allows you to control the positioning and size of the form.\n- The \"maxWidth\" value ensures that the form is displayed correctly on different devices with varying screen widths.\n\n**Usage:**\n\nThis file can be used to configure a form component in a web application or website. It can be integrated into a CMS system or used as a standalone component.",
    "input": "",
    "output": "{\n  \"title\": \"Get in touch form\",\n  \"category\": \"contact\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 620\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** GetInTouchSimple.jsx\n\n**Purpose:**\n\nThe GetInTouchSimple.jsx file is a React component that displays a simplified version of a contact form. It uses the StoryWrapper component to render the form with predefined attributes and a custom component called GetInTouchSimple.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a way to render components with specific attributes.\n* **GetInTouchSimple:** A custom component that represents the simplified contact form.\n\n**Code Breakdown:**\n\n**Import Statements:**\n\n* Import the StoryWrapper component from the StoryWrapper module.\n* Import the attributes object from the attributes.json file.\n* Import the GetInTouchSimple component from the current file.\n\n**Default Export:**\n\n* Define an object with a title property set to 'GetInTouchSimple'. This serves as a metadata object for the component.\n\n**Usage Function:**\n\n* Define a Usage function that renders the StoryWrapper component.\n* Pass the attributes object and the GetInTouchSimple component as props to the StoryWrapper.\n\n**Workflow:**\n\n1. The Usage function is called, which instantiates the StoryWrapper component.\n2. The StoryWrapper receives the attributes and component props.\n3. The GetInTouchSimple component is rendered with the specified attributes.\n\n**Purpose of attributes.json:**\n\nThe attributes.json file likely contains the default attributes for the GetInTouchSimple component, such as input field labels, placeholder text, and submit button label.\n\n**Additional Notes:**\n\n* The code assumes the presence of a StoryWrapper component that provides a way to render components with specific attributes.\n* The specific implementation of the GetInTouchSimple component is not provided in this file.\n* The purpose of the GetInTouchSimple component is to simplify the contact form and provide a user-friendly interface for users to get in touch.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { GetInTouchSimple } from './GetInTouchSimple';\n\nexport default { title: 'GetInTouchSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={GetInTouchSimple} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet is a React functional component called `GetInTouchSimple` that implements a simple contact form. The form allows users to input their name, email, subject, and message.\n\n**Functionality:**\n\n- **Form Initialization:**\n   - The `useForm` hook initializes a form with initial values for each field.\n   - The `validate` property defines validation rules for each field.\n\n- **Form Fields:**\n   - The form includes four input fields:\n     - Name (TextInput)\n     - Email (TextInput)\n     - Subject (TextInput)\n     - Message (Textarea)\n\n- **Form Submission:**\n   - The form submits when the user clicks the \"Send message\" button.\n   - The `onSubmit` handler is empty, indicating no specific action is taken upon submission.\n\n- **Form Styling:**\n   - The form uses the `@mantine/core` components for layout and styling.\n   - The title is a `Title` component with the heading \"Get in touch\".\n   - The input fields are `TextInput` and `Textarea` components.\n   - The form is wrapped in a `form` element with the `onSubmit` handler.\n\n**Key Features:**\n\n- Client-side form validation using `validate` property.\n- Responsive layout using `SimpleGrid`.\n- Input field styling with `variant=\"filled\"`.\n- Submit button for form submission.\n\n**Usage:**\n\nThis component can be used on a website or application to allow users to easily contact the organization or individual.\n\n**Additional Notes:**\n\n- The code assumes the use of the `@mantine/core` and `@mantine/form` libraries.\n- The validation rules can be customized as needed.\n- The form submission handler can be implemented to send the form data to a server or perform other actions.",
    "input": "",
    "output": "import { Button, Group, SimpleGrid, Textarea, TextInput, Title } from '@mantine/core';\nimport { useForm } from '@mantine/form';\n\nexport function GetInTouchSimple() {\n  const form = useForm({\n    initialValues: {\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    },\n    validate: {\n      name: (value) => value.trim().length < 2,\n      email: (value) => !/^\\S+@\\S+$/.test(value),\n      subject: (value) => value.trim().length === 0,\n    },\n  });\n\n  return (\n    <form onSubmit={form.onSubmit(() => {})}>\n      <Title\n        order={2}\n        size=\"h1\"\n        style={{ fontFamily: 'Outfit, var(--mantine-font-family)' }}\n        fw={900}\n        ta=\"center\"\n      >\n        Get in touch\n      </Title>\n\n      <SimpleGrid cols={{ base: 1, sm: 2 }} mt=\"xl\">\n        <TextInput\n          label=\"Name\"\n          placeholder=\"Your name\"\n          name=\"name\"\n          variant=\"filled\"\n          {...form.getInputProps('name')}\n        />\n        <TextInput\n          label=\"Email\"\n          placeholder=\"Your email\"\n          name=\"email\"\n          variant=\"filled\"\n          {...form.getInputProps('email')}\n        />\n      </SimpleGrid>\n\n      <TextInput\n        label=\"Subject\"\n        placeholder=\"Subject\"\n        mt=\"md\"\n        name=\"subject\"\n        variant=\"filled\"\n        {...form.getInputProps('subject')}\n      />\n      <Textarea\n        mt=\"md\"\n        label=\"Message\"\n        placeholder=\"Your message\"\n        maxRows={10}\n        minRows={5}\n        autosize\n        name=\"message\"\n        variant=\"filled\"\n        {...form.getInputProps('message')}\n      />\n\n      <Group justify=\"center\" mt=\"xl\">\n        <Button type=\"submit\" size=\"md\">\n          Send message\n        </Button>\n      </Group>\n    </form>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file describes a user input titled \"Gradient segmented control.\"\n\n**Content:**\n\n* **title:** Gradient segmented control\n* **category:** inputs\n* **changelog:** september-2022\n* **canvas:**\n    * **center:** true\n    * **maxWidth:** 420\n\n**Purpose:**\n\nThe purpose of this file is to define a user input that represents a gradient segmented control.\n\n**Properties:**\n\n* **title:** This field specifies the title of the input, which is \"Gradient segmented control\" in this case.\n* **category:** This field indicates the category of the input, which is \"inputs.\"\n* **changelog:** This field specifies the date of the last update, which is \"september-2022.\"\n* **canvas:**\n    * **center:** This property specifies whether the input should be centered within its container. The value is set to \"true.\"\n    * **maxWidth:** This property sets the maximum width of the input canvas to 420.\n\n**Usage:**\n\nThe JSON file can be used to configure a user input element in a software application or tool. The input element will be titled \"Gradient segmented control\" and will have the specified properties.\n\n**Additional Notes:**\n\n* The \"canvas\" property provides additional styling options for the input element.\n* The \"category\" field helps categorize the input for organizational purposes.\n* The \"changelog\" field tracks the date of the last update, which can be helpful for version control.",
    "input": "",
    "output": "{\n  \"title\": \"Gradient segmented control\",\n  \"category\": \"inputs\",\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines a set of style rules for a web page or application. The purpose of these styles is to customize the appearance of various HTML elements, such as buttons, labels, and indicators.\n\n**Key Features:**\n\n- **Themeing:** The styles use the `var(--mantine-color-*)` variables to set colors and shadows consistent with a predefined theme.\n- **Conditional Styles:** The `light-dark()` function adjusts colors based on the light or dark mode of the user interface.\n- **Gradient Background:** The `.indicator` class applies a linear gradient background with two colors.\n- **Hidden Element:** The `.control::before` selector hides an element with the `::before` pseudo-selector.\n- **Label Customization:** The `.label` class sets the color of an active label to white.\n\n**Code Breakdown:**\n\n**1. `.root` Selector:**\n- Sets the background color, box shadow, and border of the root element.\n- The background color is light-dark depending on the theme.\n- The border color is also light-dark depending on the theme.\n\n**2. `.indicator` Selector:**\n- Sets a linear gradient background with two colors: pink and orange.\n\n**3. `.control` Selector:**\n- Hides an element with the `::before` pseudo-selector.\n\n**4. `.label` Selector:**\n- Sets the color of the label to white if it has the `data-active` attribute.\n- Applies this style when the label is hovered over.\n\n**Usage:**\n\nThese styles can be applied to HTML elements within a web page or application that need to conform to the specified theme and layout. The `.indicator`, `.control`, and `.label` elements can be used to create interactive elements with specific visual properties.\n\n**Note:**\n\n- The specific HTML elements and their corresponding CSS classes may vary depending on the web page or application.\n- The `--mantine-color-*` variables and other styling options may be specific to a particular CSS framework or library.",
    "input": "",
    "output": ".root {\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-6));\n  box-shadow: var(--mantine-shadow-md);\n  border: 1px solid light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-4));\n}\n\n.indicator {\n  background-image: linear-gradient(\n    to right,\n    var(--mantine-color-pink-filled),\n    var(--mantine-color-orange-filled)\n  );\n}\n\n.control {\n  &::before {\n    display: none;\n  }\n}\n\n.label {\n  &,\n  &:hover {\n    &[data-active] {\n      color: var(--mantine-color-white);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** GradientSegmentedControl.tsx\n\n**Purpose:**\n\nThe file is a React component that implements a gradient segmented control. It provides a visual element with multiple options, where each option is represented by a different gradient color. Users can interact with the control by selecting an option by clicking on it.\n\n**Components:**\n\n* **StoryWrapper:** This component is used to render the GradientSegmentedControl component with the provided attributes.\n* **GradientSegmentedControl:** The main component that renders the gradient segmented control.\n\n**Key Features:**\n\n* **Multiple Options:** The control supports multiple options, each represented by a unique gradient color.\n* **Interactive:** Users can click on an option to select it.\n* **Styling:** The control is styled with a gradient background and rounded corners.\n* **Attributes:** The `attributes.json` file provides additional attributes such as the number of options, the gradient colors, and the selected option.\n\n**Usage:**\n\nThe `Usage()` function renders the GradientSegmentedControl component with the attributes specified in `attributes.json`. The `StoryWrapper` component provides a convenient way to showcase the component with different settings.\n\n**File Structure:**\n\n* **GradientSegmentedControl.tsx:** The main component file.\n* **attributes.json:** A JSON file containing the attributes for the control.\n\n**Example Code:**\n\n```tsx\nimport { GradientSegmentedControl } from './GradientSegmentedControl';\n\nexport default function MyComponent() {\n  return <GradientSegmentedControl />;\n}\n```\n\n**Conclusion:**\n\nThe GradientSegmentedControl.tsx file provides a visually appealing and interactive way to select options from a set of choices. It is an essential component for any user interface that requires users to choose from multiple options with different visual representations.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { GradientSegmentedControl } from './GradientSegmentedControl';\n\nexport default { title: 'GradientSegmentedControl' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={GradientSegmentedControl} />;\n}\n"
  },
  {
    "instruction": "**File Name:** GradientSegmentedControl.js\n\n**Purpose:**\n\nThe file creates a segmented control component with a gradient background. It allows users to select from a predefined set of options.\n\n**Description:**\n\n**Imports:**\n\n* `SegmentedControl` component from the `@mantine/core` library.\n* `classes` object from the `GradientSegmentedControl.module.css` file.\n\n**Component Function:**\n\n* The `GradientSegmentedControl` function is an export.\n* It returns an `<SegmentedControl>` component.\n\n**Component Props:**\n\n* **radius:** Specifies the border radius of the segmented control.\n* **size:** Determines the size of the segmented control buttons.\n* **data:** An array of options to display in the segmented control.\n* **classNames:** An object containing the CSS classes from the `GradientSegmentedControl.module.css` file.\n\n**CSS Classes:**\n\nThe `GradientSegmentedControl.module.css` file likely contains CSS styles for the segmented control, such as:\n\n* Background gradients\n* Button colors\n* Border styles\n\n**Usage:**\n\nThe `GradientSegmentedControl` component can be used to group options and allow users to select one. It provides a visually appealing and interactive way to navigate through different categories or options.\n\n**Example:**\n\n```\n<GradientSegmentedControl />\n```\n\n**Additional Notes:**\n\n* The segmented control buttons have a gradient background.\n* The `classNames` prop provides access to custom CSS styles.\n* The `@mantine/core` library provides a variety of UI components.",
    "input": "",
    "output": "import { SegmentedControl } from '@mantine/core';\nimport classes from './GradientSegmentedControl.module.css';\n\nexport function GradientSegmentedControl() {\n  return (\n    <SegmentedControl\n      radius=\"xl\"\n      size=\"md\"\n      data={['All', 'AI/ML', 'C++', 'Rust', 'TypeScript']}\n      classNames={classes}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file provided defines a configuration for a grid visualization. It specifies the following properties:\n\n**Title:**\n* The title of the grid, which is \"Grid with asymmetrical columns\".\n\n**Category:**\n* The category of the visualization, which is \"grids\".\n\n**Responsive:**\n* Indicates whether the grid should be automatically resized to fit the available browser window. The value is set to `true`.\n\n**Canvas:**\n* An object that defines the canvas configuration.\n* **center:** A boolean value that specifies whether the canvas should be centered within the visualization. The value is set to `false`.\n\n**Purpose:**\n\nThe purpose of this file is to define a grid visualization with the following characteristics:\n\n* A title of \"Grid with asymmetrical columns\".\n* A category of \"grids\".\n* A responsive layout that automatically adjusts to different screen sizes.\n* A canvas that does not center its content within the visualization.\n\n**Additional Notes:**\n\n* The `category` property is used to group related visualizations.\n* The `responsive` property enables responsiveness, ensuring that the grid adjusts its size based on the user's device or browser window.\n* The `center` property within the `canvas` object determines whether the canvas should be centered within the visualization. In this case, it is set to `false`, indicating that the canvas should not be centered.\n\n**Conclusion:**\n\nThe JSON file provides a configuration for a grid visualization with specific properties, including title, category, responsiveness, and canvas settings. The configuration allows for a dynamic and flexible visualization that can be adjusted to different screen sizes and content needs.",
    "input": "",
    "output": "{\n  \"title\": \"Grid with asymmetrical columns\",\n  \"category\": \"grids\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** GridAsymmetrical.jsx\n\n**Purpose:**\n\nThe `GridAsymmetrical.jsx` file is a React component that represents an asymmetrical grid layout. It utilizes the following components and files:\n\n- `StoryWrapper`: A component that provides a container for the `GridAsymmetrical` component with additional attributes.\n- `attributes.json`: A JSON file containing the attributes for the `GridAsymmetrical` component.\n- `GridAsymmetrical`: The main component that renders the asymmetrical grid layout.\n\n**Functionalities:**\n\n- Imports the necessary components and files.\n- Exports a default object with the title \"GridAsymmetrical\".\n- Defines a `Usage()` function that renders the `StoryWrapper` component with the following props:\n    - `attributes`: The attributes specified in the `attributes.json` file.\n    - `component`: The `GridAsymmetrical` component.\n\n**Usage:**\n\nThe `GridAsymmetrical.jsx` file can be used to render an asymmetrical grid layout by importing it into another React component or module.\n\n**Example:**\n\n```jsx\nimport GridAsymmetrical from './GridAsymmetrical';\n\nconst MyComponent = () => {\n  return <GridAsymmetrical />;\n};\n```\n\n**Summary:**\n\nThe `GridAsymmetrical.jsx` file is a React component that provides an implementation for an asymmetrical grid layout. It includes the necessary components, configuration, and render logic to create an interactive grid layout with customizable attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { GridAsymmetrical } from './GridAsymmetrical';\n\nexport default { title: 'GridAsymmetrical' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={GridAsymmetrical} />;\n}\n"
  },
  {
    "instruction": "**GridAsymmetrical.js**\n\nThis file creates an asymmetric grid layout using the `@mantine/core` library.\n\n**Functionality:**\n\n* **Container:** The file wraps the grid in a `Container` component, which provides spacing and responsiveness.\n* **Grid:** The `Grid` component defines the overall layout.\n* **Grid.Col:** Each grid cell is a `Grid.Col` component with a `span` prop. The `span` prop specifies the number of columns the cell should occupy on different screen sizes (base and xs).\n* **Skeleton:** Inside each grid cell, there is a `<Skeleton>` component. The `Skeleton` component creates a placeholder element with a specified height, radius, and animation setting.\n\n**Grid Layout:**\n\nThe grid layout is asymmetric with the following column widths:\n\n- Base: 12 columns\n- XS:\n    - 4 columns\n    - 8 columns\n    - 8 columns\n    - 4 columns\n    - 3 columns\n    - 3 columns\n    - 6 columns\n\n**Responsive Design:**\n\nThe `Container` component ensures that the grid adjusts its layout responsively based on the screen size. The `span` prop of each `Grid.Col` is set to different values for base and xs screen sizes, ensuring that the grid layout adapts accordingly.\n\n**Purpose:**\n\nThe purpose of this code is to create an asymmetric grid layout with placeholder elements using the `@mantine/core` library. This can be used for displaying data in a visually appealing and organized manner.\n\n**Additional Notes:**\n\n* The `animate` prop of the `<Skeleton>` component is set to `false` to disable the animation effect.\n* The `my` prop of the `Container` component sets a margin of medium spacing in the vertical direction.\n* The `xs` screen size refers to extra-small devices, while `base` refers to larger devices.\n* The `@mantine/core` library provides a set of components for building responsive and user-friendly interfaces.",
    "input": "",
    "output": "import { Container, Grid, Skeleton } from '@mantine/core';\n\nconst child = <Skeleton height={140} radius=\"md\" animate={false} />;\n\nexport function GridAsymmetrical() {\n  return (\n    <Container my=\"md\">\n      <Grid>\n        <Grid.Col span={{ base: 12, xs: 4 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 8 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 8 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 4 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 3 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 3 }}>{child}</Grid.Col>\n        <Grid.Col span={{ base: 12, xs: 6 }}>{child}</Grid.Col>\n      </Grid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** Header with mega menu\n\n**File Type:** JSON\n\n**Purpose:**\n\nThis JSON file defines the configuration for a header with a mega menu in a design system or website. It provides information about the header's title, category, responsiveness, changelog, and canvas settings.\n\n**Key Fields:**\n\n**title:**\n- The title of the header, which is \"Header with mega menu\".\n\n**category:**\n- The category of the header, which is \"headers\".\n\n**responsive:**\n- A boolean value indicating whether the header is responsive, which is set to \"true\".\n\n**changelog:**\n- The date of the last update to the header, which is \"september-2022\".\n\n**canvas:**\n- An object that contains canvas settings for the header.\n    - **center:** A boolean value indicating whether the header should be centered, which is set to \"false\".\n\n**Additional Notes:**\n\n- The file name suggests that this header template is intended to be used for headers that have a mega menu.\n- The responsive property indicates that the header should automatically adjust its layout to fit different screen sizes.\n- The changelog property provides information about the date when the header was last updated.\n- The canvas settings allow for customization of the header's layout and positioning within the canvas.",
    "input": "",
    "output": "{\n  \"title\": \"Header with mega menu\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** Styles.css\n\n**Purpose:**\n\nThis CSS file defines the styles for a web application, including header, navigation links, sublinks, and a dropdown footer.\n\n**Key Features:**\n\n**Header:**\n- Fixed height of 60px.\n- Padding of 16px on left and right.\n- Border-bottom with a light or dark color based on the theme.\n\n**Navigation Links:**\n- Displayed as flex items with centered alignment.\n- Height of 100%.\n- Padding of 16px on left and right.\n- Text decoration and color set to remove underlines and provide appropriate text color.\n- Font weight and size defined.\n- Media query for mobile responsiveness, adjusting height and width.\n- Hover effect added using a mixin that changes the background color.\n\n**Sublinks:**\n- Width of 100%.\n- Padding of 8px on top and bottom, and 16px on left and right.\n- Border-radius for rounded corners.\n- Hover effect added using a mixin that changes the background color.\n\n**Dropdown Footer:**\n- Background color set to a light or dark color based on the theme.\n- Negative margin to counteract header padding.\n- Padding of 16px on top and bottom, and 32px on left and right.\n- Bottom padding extended for additional spacing.\n- Border-top with a light or dark color based on the theme.\n\n**Variables:**\n\nThe CSS file uses variables defined in the Mantine CSS framework, such as:\n- `--mantine-spacing-md`\n- `--mantine-color-gray-3`\n- `--mantine-font-size-sm`\n\n**Theme-Based Styles:**\n\nThe styles use the `light-dark()` function to automatically apply light or dark colors based on the current theme.\n\n**Conclusion:**\n\nThis CSS file provides the styling for a user interface with a header, navigation links, sublinks, and a dropdown footer. It ensures consistent and visually appealing design elements throughout the application.",
    "input": "",
    "output": ".header {\n  height: 60px;\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.link {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n  text-decoration: none;\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  font-weight: 500;\n  font-size: var(--mantine-font-size-sm);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    height: 42px;\n    width: 100%;\n  }\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n\n.subLink {\n  width: 100%;\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-md);\n  border-radius: var(--mantine-radius-md);\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-7));\n  }\n}\n\n.dropdownFooter {\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-7));\n  margin: calc(var(--mantine-spacing-md) * -1);\n  margin-top: var(--mantine-spacing-sm);\n  padding: var(--mantine-spacing-md) calc(var(--mantine-spacing-md) * 2);\n  padding-bottom: var(--mantine-spacing-xl);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n}\n"
  },
  {
    "instruction": "**File Name:** HeaderMegaMenu.jsx\n\n**Purpose:**\n\nThe `HeaderMegaMenu.jsx` file appears to be a React component or a JavaScript module that implements a header mega menu. It exports a `HeaderMegaMenu` component and provides a `Usage` function for testing or demonstration purposes.\n\n**Components and Imports:**\n\n- **StoryWrapper:** A component used for testing and documentation purposes.\n- **attributes.json:** A JSON file containing attributes and configuration data for the `HeaderMegaMenu` component.\n- **HeaderMegaMenu:** The main component that represents the header mega menu.\n\n**Code Breakdown:**\n\n**1. Imports:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderMegaMenu } from './HeaderMegaMenu';\n```\n\n- Imports the necessary components and data files.\n\n**2. Export Default:**\n\n```\nexport default { title: 'HeaderMegaMenu' };\n```\n\n- Exports an object with a `title` property, which likely indicates the title of the component or module.\n\n**3. Usage Function:**\n\n```\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderMegaMenu} />;\n}\n```\n\n- Defines a `Usage` function that:\n    - Creates an instance of the `StoryWrapper` component.\n    - Passes the `attributes` and `HeaderMegaMenu` components as props to the `StoryWrapper`.\n    - Renders the `HeaderMegaMenu` component with the specified attributes.\n\n**Purpose of `StoryWrapper`:**\n\nThe `StoryWrapper` component is likely used to provide a convenient way to showcase and test the `HeaderMegaMenu` component. It provides a standardized way to render the component with different attributes and provides a testing environment.\n\n**Additional Notes:**\n\n- The `attributes.json` file may contain configuration options, such as menu items, navigation links, and styling preferences.\n- The `HeaderMegaMenu` component likely handles rendering the header mega menu structure and behavior based on the provided attributes.\n- The `StoryWrapper` component might provide additional features, such as documentation and interactive testing capabilities.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderMegaMenu } from './HeaderMegaMenu';\n\nexport default { title: 'HeaderMegaMenu' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderMegaMenu} />;\n}\n"
  },
  {
    "instruction": "**HeaderMegaMenu.js**\n\n**Description:**\n\nThis React component represents a header mega menu. It is responsible for displaying navigation links, features, and user actions.\n\n**Key Features:**\n\n* **Responsive design:** The header adjusts to different screen sizes using CSS media queries.\n* **Hover card:** When hovering over the \"Features\" link, a hover card displays a list of sublinks.\n* **Drawer:** A drawer menu is displayed on mobile devices for navigation.\n* **Scroll area:** The sublinks are wrapped in a scroll area to prevent horizontal scrolling.\n* **Icons:** The component uses icons from the @tabler/icons-react and @mantinex/mantine-logo libraries.\n* **Themeing:** The component uses the Mantine theme for styling.\n\n**Data:**\n\nThe component uses a mock data object called `mockdata` to populate the sublinks. Each item in the object contains an icon, title, and description.\n\n**Code Breakdown:**\n\n* **Imports:** The component imports necessary Mantine components, icons, and styles.\n* **Data:** The `mockdata` object is defined with sublink data.\n* **Links:** The `links` variable maps the `mockdata` to a list of `UnstyledButton` components, each containing an icon, title, and description.\n* **Header:** The header contains navigation links, a hover card, and a burger menu for mobile devices.\n* **Drawer:** The drawer menu contains navigation links and a login/signup section.\n\n**Usage:**\n\nThe `HeaderMegaMenu` component can be used by rendering it in an HTML file.\n\n**Example:**\n\n```\n<HeaderMegaMenu />\n```\n\n**Output:**\n\nThe component renders a header with a logo, navigation links, a hover card, and a drawer menu.\n\n**Additional Notes:**\n\n* The `HeaderMegaMenu.module.css` file contains CSS styles for the component.\n* The `useDisclosure` hook is used to manage the state of the hover card and drawer menu.\n* The `useMantineTheme` hook is used to access the Mantine theme.",
    "input": "",
    "output": "import {\n  IconBook,\n  IconChartPie3,\n  IconChevronDown,\n  IconCode,\n  IconCoin,\n  IconFingerprint,\n  IconNotification,\n} from '@tabler/icons-react';\nimport {\n  Anchor,\n  Box,\n  Burger,\n  Button,\n  Center,\n  Collapse,\n  Divider,\n  Drawer,\n  Group,\n  HoverCard,\n  ScrollArea,\n  SimpleGrid,\n  Text,\n  ThemeIcon,\n  UnstyledButton,\n  useMantineTheme,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './HeaderMegaMenu.module.css';\n\nconst mockdata = [\n  {\n    icon: IconCode,\n    title: 'Open source',\n    description: 'This Pokémon’s cry is very loud and distracting',\n  },\n  {\n    icon: IconCoin,\n    title: 'Free for everyone',\n    description: 'The fluid of Smeargle’s tail secretions changes',\n  },\n  {\n    icon: IconBook,\n    title: 'Documentation',\n    description: 'Yanma is capable of seeing 360 degrees without',\n  },\n  {\n    icon: IconFingerprint,\n    title: 'Security',\n    description: 'The shell’s rounded shape and the grooves on its.',\n  },\n  {\n    icon: IconChartPie3,\n    title: 'Analytics',\n    description: 'This Pokémon uses its flying ability to quickly chase',\n  },\n  {\n    icon: IconNotification,\n    title: 'Notifications',\n    description: 'Combusken battles with the intensely hot flames it spews',\n  },\n];\n\nexport function HeaderMegaMenu() {\n  const [drawerOpened, { toggle: toggleDrawer, close: closeDrawer }] = useDisclosure(false);\n  const [linksOpened, { toggle: toggleLinks }] = useDisclosure(false);\n  const theme = useMantineTheme();\n\n  const links = mockdata.map((item) => (\n    <UnstyledButton className={classes.subLink} key={item.title}>\n      <Group wrap=\"nowrap\" align=\"flex-start\">\n        <ThemeIcon size={34} variant=\"default\" radius=\"md\">\n          <item.icon size={22} color={theme.colors.blue[6]} />\n        </ThemeIcon>\n        <div>\n          <Text size=\"sm\" fw={500}>\n            {item.title}\n          </Text>\n          <Text size=\"xs\" c=\"dimmed\">\n            {item.description}\n          </Text>\n        </div>\n      </Group>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Box pb={120}>\n      <header className={classes.header}>\n        <Group justify=\"space-between\" h=\"100%\">\n          <MantineLogo size={30} />\n\n          <Group h=\"100%\" gap={0} visibleFrom=\"sm\">\n            <a href=\"#\" className={classes.link}>\n              Home\n            </a>\n            <HoverCard width={600} position=\"bottom\" radius=\"md\" shadow=\"md\" withinPortal>\n              <HoverCard.Target>\n                <a href=\"#\" className={classes.link}>\n                  <Center inline>\n                    <Box component=\"span\" mr={5}>\n                      Features\n                    </Box>\n                    <IconChevronDown size={16} color={theme.colors.blue[6]} />\n                  </Center>\n                </a>\n              </HoverCard.Target>\n\n              <HoverCard.Dropdown style={{ overflow: 'hidden' }}>\n                <Group justify=\"space-between\" px=\"md\">\n                  <Text fw={500}>Features</Text>\n                  <Anchor href=\"#\" fz=\"xs\">\n                    View all\n                  </Anchor>\n                </Group>\n\n                <Divider my=\"sm\" />\n\n                <SimpleGrid cols={2} spacing={0}>\n                  {links}\n                </SimpleGrid>\n\n                <div className={classes.dropdownFooter}>\n                  <Group justify=\"space-between\">\n                    <div>\n                      <Text fw={500} fz=\"sm\">\n                        Get started\n                      </Text>\n                      <Text size=\"xs\" c=\"dimmed\">\n                        Their food sources have decreased, and their numbers\n                      </Text>\n                    </div>\n                    <Button variant=\"default\">Get started</Button>\n                  </Group>\n                </div>\n              </HoverCard.Dropdown>\n            </HoverCard>\n            <a href=\"#\" className={classes.link}>\n              Learn\n            </a>\n            <a href=\"#\" className={classes.link}>\n              Academy\n            </a>\n          </Group>\n\n          <Group visibleFrom=\"sm\">\n            <Button variant=\"default\">Log in</Button>\n            <Button>Sign up</Button>\n          </Group>\n\n          <Burger opened={drawerOpened} onClick={toggleDrawer} hiddenFrom=\"sm\" />\n        </Group>\n      </header>\n\n      <Drawer\n        opened={drawerOpened}\n        onClose={closeDrawer}\n        size=\"100%\"\n        padding=\"md\"\n        title=\"Navigation\"\n        hiddenFrom=\"sm\"\n        zIndex={1000000}\n      >\n        <ScrollArea h=\"calc(100vh - 80px\" mx=\"-md\">\n          <Divider my=\"sm\" />\n\n          <a href=\"#\" className={classes.link}>\n            Home\n          </a>\n          <UnstyledButton className={classes.link} onClick={toggleLinks}>\n            <Center inline>\n              <Box component=\"span\" mr={5}>\n                Features\n              </Box>\n              <IconChevronDown size={16} color={theme.colors.blue[6]} />\n            </Center>\n          </UnstyledButton>\n          <Collapse in={linksOpened}>{links}</Collapse>\n          <a href=\"#\" className={classes.link}>\n            Learn\n          </a>\n          <a href=\"#\" className={classes.link}>\n            Academy\n          </a>\n\n          <Divider my=\"sm\" />\n\n          <Group justify=\"center\" grow pb=\"xl\" px=\"md\">\n            <Button variant=\"default\">Log in</Button>\n            <Button>Sign up</Button>\n          </Group>\n        </ScrollArea>\n      </Drawer>\n    </Box>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a header with menus configuration. It specifies the title, category, responsiveness, and layout options for a header element.\n\n**Properties:**\n\n* **title:** The title of the header, which will be displayed in the header section.\n* **category:** The category of the header, which is used for organizational purposes. In this case, the category is \"headers\".\n* **responsive:** A boolean value indicating whether the header is responsive (adapts to different screen sizes). In this case, the value is set to `true`.\n* **canvas:** An object containing additional layout options for the header.\n    * **center:** A boolean value indicating whether the header content should be centered. In this case, the value is set to `false`, indicating that the content should not be centered.\n\n**Usage:**\n\nThis configuration file can be used to create a header element with menus in a web application. The header will have a title, be categorized as a header, and be responsive. The content will not be centered.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Header with menus\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Additional Notes:**\n\n* The header title can be any text string.\n* The header category can be used to group related header configurations.\n* The `responsive` property ensures that the header resizes automatically for different screen sizes.\n* The `center` property specifies whether the header content should be aligned in the center of the screen.",
    "input": "",
    "output": "{\n  \"title\": \"Header with menus\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a header section in an application. The header is a fixed-height navigation bar that typically contains links, branding elements, or other navigation elements.\n\n**Structure:**\n\nThe file consists of four CSS classes:\n\n* `.header`\n* `.inner`\n* `.link`\n* `.linkLabel`\n\n**`.header` Class:**\n\n* Sets the height of the header to 56 pixels.\n* Adds a margin-bottom of 120 pixels to create spacing below the header.\n* Sets the background color to the `--mantine-color-body` variable, which defines the background color of the entire application.\n* Adds a bottom border with a light or dark shade depending on the theme mode (light or dark).\n\n**`.inner` Class:**\n\n* Sets the height of the header content area to 56 pixels.\n* Uses flexbox to arrange its child elements horizontally with space between them.\n* Centers the content vertically using the `align-items: center` property.\n\n**`.link` Class:**\n\n* Displays the link as a block element.\n* Sets the line-height, padding, and border-radius for visual styling.\n* Sets the text decoration to none.\n* Sets the color to a light or dark shade depending on the theme mode.\n* Defines the font size and weight.\n* Includes a hover effect that changes the background color when the mouse hovers over the link.\n\n**`.linkLabel` Class:**\n\n* Adds a small margin-right to the link label to separate it from the link icon or text.\n\n**Usage:**\n\nThe CSS classes can be used to style the header in an HTML template as follows:\n\n```html\n<header class=\"header\">\n  <div class=\"inner\">\n    <a href=\"#\" class=\"link\">\n      <span class=\"linkLabel\">Home</span>\n    </a>\n    <!-- Other navigation links -->\n  </div>\n</header>\n```\n\n**Conclusion:**\n\nThe CSS file provides a comprehensive set of styles for the header section of an application, including layout, spacing, colors, typography, and hover effects. The use of variables and mixins ensures that the header can be easily customized and adapted to different design needs.",
    "input": "",
    "output": ".header {\n  height: 56px;\n  margin-bottom: 120px;\n  background-color: var(--mantine-color-body);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.inner {\n  height: 56px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.link {\n  display: block;\n  line-height: 1;\n  padding: 8px 12px;\n  border-radius: var(--mantine-radius-sm);\n  text-decoration: none;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  font-size: var(--mantine-font-size-sm);\n  font-weight: 500;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n\n.linkLabel {\n  margin-right: 5px;\n}\n"
  },
  {
    "instruction": "**File Name:** HeaderMenu.jsx\n\n**File Purpose:**\n\nThe `HeaderMenu.jsx` file is a React component that represents a header menu. It is responsible for displaying a navigation menu with links to different sections of the application.\n\n**File Structure:**\n\n- **Import Statements:**\n   - `StoryWrapper`: A component used for testing and documentation.\n   - `attributes.json`: A JSON file containing the attributes for the header menu.\n   - `HeaderMenu`: The React component to be rendered.\n\n- **Component Definition:**\n   - `export default { title: 'HeaderMenu' }`: Defines the title of the component for documentation purposes.\n\n- **Usage Function:**\n   - `export function Usage() {...}`: Defines a function that provides an example of how to use the component.\n   - `return <StoryWrapper attributes={attributes} component={HeaderMenu} />`: Creates a `StoryWrapper` component with the `attributes` and `component` props set.\n\n**Key Functionality:**\n\n- The `HeaderMenu` component uses the `attributes.json` file to configure the menu items and their corresponding links.\n- It renders a navigation menu with the specified menu items.\n- It can be used within the `StoryWrapper` component for testing and documentation purposes.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component is a custom component that provides a convenient way to render and document React components.\n- The `attributes.json` file is a JSON object that defines the attributes for the header menu, such as the menu items and their links.\n- The `HeaderMenu` component can be used in other parts of the application to provide navigation functionality.\n\n**Usage:**\n\nTo use the `HeaderMenu` component, simply import it into your React component and render it with the appropriate attributes.\n\n```\n<HeaderMenu attributes={attributes} />\n```",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderMenu } from './HeaderMenu';\n\nexport default { title: 'HeaderMenu' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderMenu} />;\n}\n"
  },
  {
    "instruction": "**HeaderMenu.js**\n\nThis file represents a React functional component called `HeaderMenu`. It renders a header menu with the following features:\n\n**1. Logo:**\n- The component displays a logo using the `MantineLogo` component.\n\n**2. Navigation Links:**\n- It defines an array of navigation links with nested sub-links.\n- Each link is represented by an object with `link` and `label` properties.\n- Sub-links are nested within an object with `links` property.\n\n**3. Menu Structure:**\n- The component iterates over the links and creates a menu item for each link.\n- If a link has sub-links, it creates a nested menu with dropdown options.\n- Each menu item displays the label and links to the corresponding route.\n\n**4. Responsive Design:**\n- A `Burger` component is used to toggle a mobile menu.\n- The menu and logo are displayed in a row within a container.\n- The `visibleFrom` prop ensures that the menu is only displayed on larger screens.\n- The `hiddenFrom` prop hides the burger menu on larger screens.\n\n**5. CSS Styles:**\n- The component uses a CSS module (`HeaderMenu.module.css`) for styling the header and links.\n\n**Functionality:**\n\n- When the user clicks on a menu item with sub-links, a dropdown menu appears.\n- The user can navigate through the sub-links and click on any of them to redirect to the corresponding route.\n- The burger menu allows users to navigate the menu on smaller screens.\n\n**Usage:**\n\n- This component can be used to create a responsive header menu for a web application.\n\n**Example:**\n\n```\n<HeaderMenu />\n```\n\n**Note:**\n\n- The `@tabler/icons-react`, `@mantine/core`, `@mantine/hooks`, and `@mantinex/mantine-logo` packages are required for the component to function properly.",
    "input": "",
    "output": "import { IconChevronDown } from '@tabler/icons-react';\nimport { Burger, Center, Container, Group, Menu } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './HeaderMenu.module.css';\n\nconst links = [\n  { link: '/about', label: 'Features' },\n  {\n    link: '#1',\n    label: 'Learn',\n    links: [\n      { link: '/docs', label: 'Documentation' },\n      { link: '/resources', label: 'Resources' },\n      { link: '/community', label: 'Community' },\n      { link: '/blog', label: 'Blog' },\n    ],\n  },\n  { link: '/about', label: 'About' },\n  { link: '/pricing', label: 'Pricing' },\n  {\n    link: '#2',\n    label: 'Support',\n    links: [\n      { link: '/faq', label: 'FAQ' },\n      { link: '/demo', label: 'Book a demo' },\n      { link: '/forums', label: 'Forums' },\n    ],\n  },\n];\n\nexport function HeaderMenu() {\n  const [opened, { toggle }] = useDisclosure(false);\n\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu key={link.label} trigger=\"hover\" transitionProps={{ exitDuration: 0 }} withinPortal>\n          <Menu.Target>\n            <a\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <IconChevronDown size={14} stroke={1.5} />\n              </Center>\n            </a>\n          </Menu.Target>\n          <Menu.Dropdown>{menuItems}</Menu.Dropdown>\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <header className={classes.header}>\n      <Container size=\"md\">\n        <div className={classes.inner}>\n          <MantineLogo size={28} />\n          <Group gap={5} visibleFrom=\"sm\">\n            {items}\n          </Group>\n          <Burger opened={opened} onClick={toggle} size=\"sm\" hiddenFrom=\"sm\" />\n        </div>\n      </Container>\n    </header>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines the configuration for a header with a search functionality.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Header with search\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Key Fields:**\n\n* **title:** The title of the header, which is \"Header with search\".\n* **category:** The category of the header, which is \"headers\".\n* **responsive:** A boolean value indicating whether the header is responsive, which is set to true.\n* **canvas:** An object containing additional configuration for the header canvas.\n    * **center:** A boolean value indicating whether the header content should be centered, which is set to false.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a header with a search functionality for a web application or website.\n\n**Usage:**\n\nThe configuration specified in this file can be used to create a header with the following features:\n\n* A title that reads \"Header with search\".\n* A search input field.\n* A responsive layout that adjusts to different screen sizes.\n\n**Additional Notes:**\n\n* The `canvas` object allows additional customization of the header canvas, such as setting the background color or adding padding.\n* The `responsive` field ensures that the header adjusts its layout to fit different screen sizes, providing a consistent user experience across devices.",
    "input": "",
    "output": "{\n  \"title\": \"Header with search\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS stylesheet that defines the styles for a header component.\n\n**Purpose:**\n\nThe header component provides a fixed navigation bar at the top of the page, containing links or other elements.\n\n**Structure:**\n\nThe CSS code is organized into three main sections:\n\n**1. .header Selector:**\n\n* Sets the height, margin, background color, border, and padding for the header element.\n\n**2. .inner Selector:**\n\n* Defines the height, display layout, justify-content, align-items, and other styling for the inner container within the header.\n\n**3. .link Selector:**\n\n* Styles the links within the header, including their display, padding, border radius, text decoration, font size, font weight, and hover effect.\n\n**CSS Properties:**\n\n**Header:**\n\n* height: 56px\n* margin-bottom: 120px\n* background-color: var(--mantine-color-body)\n* border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))\n* padding-left: var(--mantine-spacing-md)\n* padding-right: var(--mantine-spacing-md)\n\n**Inner:**\n\n* height: 56px\n* display: flex\n* justify-content: space-between\n* align-items: center\n\n**Link:**\n\n* display: block\n* line-height: 1\n* padding: 8px 12px\n* border-radius: var(--mantine-radius-sm)\n* text-decoration: none\n* color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0))\n* font-size: var(--mantine-font-size-sm)\n* font-weight: 500\n\n**Hover Effect:**\n\n* The .link selector includes a \"@mixin hover\" rule that defines the background color for the link on hover.\n\n**Additional Notes:**\n\n* The code utilizes Mantine CSS framework variables for spacing, radius, and colors.\n* The \".link\" selector includes a hover effect that changes the background color on mouse hover.\n* The header is positioned fixed and overlaps the content below it.",
    "input": "",
    "output": ".header {\n  height: 56px;\n  margin-bottom: 120px;\n  background-color: var(--mantine-color-body);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n}\n\n.inner {\n  height: 56px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.link {\n  display: block;\n  line-height: 1;\n  padding: 8px 12px;\n  border-radius: var(--mantine-radius-sm);\n  text-decoration: none;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  font-size: var(--mantine-font-size-sm);\n  font-weight: 500;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeaderSearch.jsx\n\n**Purpose:**\n\nThe `HeaderSearch.jsx` file is a React component that implements a header search functionality. It is responsible for rendering a search bar and handling user input.\n\n**File Structure:**\n\n* **Imports:**\n    * `StoryWrapper` from `../../components/StoryWrapper/StoryWrapper.jsx`\n    * `attributes.json`\n    * `HeaderSearch` from `./HeaderSearch.jsx`\n* **Exports:**\n    * `title: 'HeaderSearch'` (Defines the title of the component)\n* **`Usage` Function:**\n    * Creates a `StoryWrapper` component with the following props:\n        * `attributes`: A JSON object containing attributes for the component\n        * `component`: The `HeaderSearch` component itself\n\n**Key Functionality:**\n\n* The `HeaderSearch` component renders a search bar with the following features:\n    * A text input field for entering search queries\n    * A submit button to initiate the search\n* The `StoryWrapper` component provides a convenient way to render and test the `HeaderSearch` component with predefined attributes.\n* The `attributes.json` file likely contains configuration options for the search functionality, such as API endpoints or search parameters.\n\n**Usage:**\n\nThe `Usage` function renders the `HeaderSearch` component wrapped in a `StoryWrapper` component. This allows developers to easily preview and test the component with the specified attributes.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used to provide a consistent and reusable environment for testing different components.\n* The `HeaderSearch` component may interact with an external API or service to perform the search operations.\n* The specific functionality of the search may vary depending on the configuration in `attributes.json`.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderSearch } from './HeaderSearch';\n\nexport default { title: 'HeaderSearch' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderSearch} />;\n}\n"
  },
  {
    "instruction": "**HeaderSearch.js**\n\nThis file is a React component that implements a header section for a web application. It includes navigation links, a search bar, and a logo.\n\n**Components:**\n\n- **@tabler/icons-react:** IconSearch component for the search icon.\n- **@mantine/core:** Autocomplete, Burger, Group components.\n- **@mantine/hooks:** useDisclosure hook.\n- **@mantinex/mantine-logo:** MantineLogo component.\n\n**Functionality:**\n\n- The component uses the `useDisclosure` hook to manage a state variable `opened` that controls the visibility of a mobile navigation menu.\n- It renders a header with the following elements:\n    - A burger menu icon for mobile devices.\n    - A logo.\n    - A navigation menu with links to different sections of the website.\n    - A search bar.\n\n**Data:**\n\n- The `links` array contains the following navigation links:\n    - Features\n    - Pricing\n    - Learn\n    - Community\n\n**CSS:**\n\n- The `HeaderSearch.module.css` file contains styles for the header components.\n\n**Usage:**\n\n- The `HeaderSearch` component can be imported and rendered within the application's layout.\n\n**Purpose:**\n\n- The primary purpose of this component is to provide a user-friendly navigation and search experience for the website.\n- It allows users to easily navigate between different sections and search for specific content.\n\n**Key Features:**\n\n- Mobile-friendly navigation menu.\n- Search bar with autocompletion suggestions.\n- Logo and navigation links.\n\n**Additional Notes:**\n\n- The `visibleFrom` prop is used to control the visibility of components based on screen size.\n- The `onClick` prop is used to prevent default behavior when clicking on navigation links.\n- The `Autocomplete` component suggests search terms based on a predefined list.",
    "input": "",
    "output": "import { IconSearch } from '@tabler/icons-react';\nimport { Autocomplete, Burger, Group } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './HeaderSearch.module.css';\n\nconst links = [\n  { link: '/about', label: 'Features' },\n  { link: '/pricing', label: 'Pricing' },\n  { link: '/learn', label: 'Learn' },\n  { link: '/community', label: 'Community' },\n];\n\nexport function HeaderSearch() {\n  const [opened, { toggle }] = useDisclosure(false);\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={classes.link}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <header className={classes.header}>\n      <div className={classes.inner}>\n        <Group>\n          <Burger opened={opened} onClick={toggle} size=\"sm\" hiddenFrom=\"sm\" />\n          <MantineLogo size={28} />\n        </Group>\n\n        <Group>\n          <Group ml={50} gap={5} className={classes.links} visibleFrom=\"sm\">\n            {items}\n          </Group>\n          <Autocomplete\n            className={classes.search}\n            placeholder=\"Search\"\n            leftSection={<IconSearch size={16} stroke={1.5} />}\n            data={['React', 'Angular', 'Vue', 'Next.js', 'Riot.js', 'Svelte', 'Blitz.js']}\n            visibleFrom=\"xs\"\n          />\n        </Group>\n      </div>\n    </header>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the properties of a header component. It is used to specify the title, category, responsiveness, and canvas configuration of the header.\n\n**JSON Structure:**\n\n```json\n{\n  \"title\": \"Simple header\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the header. In this case, it is \"Simple header\".\n* **category:** The category of the header. In this case, it is \"headers\".\n* **responsive:** A boolean value indicating whether the header should be responsive to different screen sizes. The value is set to `true` in this case.\n* **canvas:** An object that defines the canvas configuration.\n    * **center:** A boolean value indicating whether the header should be centered within the canvas. The value is set to `false` in this case.\n\n**Purpose:**\n\nThe purpose of this file is to configure the header component with the following settings:\n\n* A title of \"Simple header\"\n* A category of \"headers\"\n* A responsive design\n* The header will not be centered within the canvas\n\n**Usage:**\n\nThis file can be used to configure the header component in an application or website. It can be referenced in a configuration file or directly included in the code.\n\n**Example:**\n\n```\nconst headerConfig = require('./header.json');\n\n// Use the header configuration to create a header component\nconst header = new Header(headerConfig);\n```\n\n**Additional Notes:**\n\n* The header component may have additional properties and methods depending on the specific framework or application it is being used in.\n* The values of the properties can be customized to suit the specific needs of the application.",
    "input": "",
    "output": "{\n  \"title\": \"Simple header\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS file defines the style for a header component used in an application.\n\n**Description:**\n\n- **`.header`:**\n    - Height: 56 pixels\n    - Margin-bottom: 120 pixels\n    - Background color: `var(--mantine-color-body)`\n    - Border-bottom: 1px solid `light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))`\n\n- **`.inner`:**\n    - Height: 56 pixels\n    - Display: flex\n    - Justify-content: space-between\n    - Align-items: center\n\n- **`.link`:**\n    - Display: block\n    - Line-height: 1\n    - Padding: 8px 12px\n    - Border-radius: `var(--mantine-radius-sm)`\n    - Text-decoration: none\n    - Color: `light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0))`\n    - Font-size: `var(--mantine-font-size-sm)`\n    - Font-weight: 500\n\n    - **Hover state:**\n        - Background color: `light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6))`\n\n    - **Active state:**\n        - Background color: `var(--mantine-color-blue-filled)`\n        - Color: `var(--mantine-color-white)`\n\n**Key Features:**\n\n- Flexbox layout for aligning elements within the header.\n- Navigation links styled with hover and active states.\n- Use of Mantine CSS framework variables for color and spacing.\n\n**Usage:**\n\nThis CSS file can be used to style the header component of an application built using the Mantine CSS framework. It provides a consistent and visually appealing layout for navigation links.",
    "input": "",
    "output": ".header {\n  height: 56px;\n  margin-bottom: 120px;\n  background-color: var(--mantine-color-body);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.inner {\n  height: 56px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.link {\n  display: block;\n  line-height: 1;\n  padding: 8px 12px;\n  border-radius: var(--mantine-radius-sm);\n  text-decoration: none;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  font-size: var(--mantine-font-size-sm);\n  font-weight: 500;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n\n  [data-mantine-color-scheme] &[data-active] {\n    background-color: var(--mantine-color-blue-filled);\n    color: var(--mantine-color-white);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeaderSimple.jsx\n\n**File Description:**\n\nThe `HeaderSimple.jsx` file is a React component that represents a simple header. It is part of a React application and is responsible for rendering a header with a title.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a convenient way to render and test the `HeaderSimple` component with different attributes.\n* **HeaderSimple:** The header component that displays the title.\n\n**Import Statements:**\n\n* `StoryWrapper` is imported from the `StoryWrapper` component.\n* `attributes.json` is imported as a JSON file that contains the attributes to be passed to the `HeaderSimple` component.\n* `HeaderSimple` is imported as a React component.\n\n**Default Export:**\n\n* The file exports an object with a `title` property set to 'HeaderSimple'.\n\n**Usage Function:**\n\n* The `Usage` function renders a `StoryWrapper` component with the following props:\n    * `attributes`: The attributes specified in the `attributes.json` file.\n    * `component`: The `HeaderSimple` component.\n\n**Rendering:**\n\nWhen the `HeaderSimple` component is rendered, it receives the `attributes` prop, which contains the title to be displayed in the header. The component renders a simple header with the title and no additional styling.\n\n**Purpose:**\n\nThe `HeaderSimple.jsx` file provides a reusable header component that can be used in various parts of the application. It allows developers to easily add a title to their pages or sections.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain a `title` property with the desired title value.\n* The `StoryWrapper` component is a convenience tool for testing and rendering the `HeaderSimple` component.\n* The header style and layout can be customized by modifying the `HeaderSimple` component's styles or CSS classes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderSimple } from './HeaderSimple';\n\nexport default { title: 'HeaderSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderSimple} />;\n}\n"
  },
  {
    "instruction": "**File Name:** HeaderSimple.js\n\n**Description:**\n\nThe `HeaderSimple.js` file is a React component that implements a simple header for a website. It renders a logo, navigation links, and a burger menu for mobile devices.\n\n**Components:**\n\n* **MantineLogo:** A component from the `@mantinex/mantine-logo` package that renders the website logo.\n* **Group:** A component from the `@mantine/core` package that groups navigation links horizontally.\n* **Burger:** A component from the `@mantine/core` package that represents a burger menu for mobile devices.\n\n**State Management:**\n\n* **useDisclosure:** A hook from the `@mantine/hooks` package that manages the state of the burger menu.\n* **useState:** A React hook that manages the state of the active navigation link.\n\n**Features:**\n\n* **Navigation Links:** The header displays navigation links for the following pages:\n    * About\n    * Pricing\n    * Learn\n    * Community\n* **Logo:** The header features a website logo.\n* **Burger Menu:** A burger menu is displayed for mobile devices, allowing users to navigate the website by tapping on it.\n* **Active Link Highlight:** The header highlights the active navigation link by adding a CSS class to the corresponding link.\n\n**Usage:**\n\nThis component can be used by importing it into other React components and rendering it.\n\n**Example:**\n\n```\n<HeaderSimple />\n```\n\n**Additional Notes:**\n\n* The `HeaderSimple.module.css` file contains CSS styles for the header component.\n* The `links` array defines the navigation links.\n* The `active` state variable tracks the currently active navigation link.\n* The `onClick` handler for navigation links sets the `active` state to the clicked link.\n* The `hiddenFrom` prop of the `Burger` component specifies that it should only be displayed on mobile devices.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { Burger, Container, Group } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './HeaderSimple.module.css';\n\nconst links = [\n  { link: '/about', label: 'Features' },\n  { link: '/pricing', label: 'Pricing' },\n  { link: '/learn', label: 'Learn' },\n  { link: '/community', label: 'Community' },\n];\n\nexport function HeaderSimple() {\n  const [opened, { toggle }] = useDisclosure(false);\n  const [active, setActive] = useState(links[0].link);\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={classes.link}\n      data-active={active === link.link || undefined}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <header className={classes.header}>\n      <Container size=\"md\" className={classes.inner}>\n        <MantineLogo size={28} />\n        <Group gap={5} visibleFrom=\"xs\">\n          {items}\n        </Group>\n\n        <Burger opened={opened} onClick={toggle} hiddenFrom=\"xs\" size=\"sm\" />\n      </Container>\n    </header>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file for a header component in a web application. It defines the properties and settings of the header, including its title, category, responsiveness, and canvas configuration.\n\n**Properties:**\n\n- **title:** The title of the header, which will be displayed as a large, prominent text element.\n- **category:** The category of the header, which is used for organizational purposes and may be displayed in the UI.\n- **responsive:** A boolean value that indicates whether the header should be responsive and adapt to different screen sizes.\n- **canvas:** An object that defines the canvas configuration for the header.\n\n**Canvas Configuration:**\n\n- **center:** A boolean value that indicates whether the header content should be centered horizontally.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the header of a web page or application. The header typically includes the title of the page, navigation links, and other important information.\n\n**Usage:**\n\nThe configuration file can be used by a front-end developer to create a header component that meets the specific requirements of the web application. The header can then be added to the HTML markup of the page or application.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Header with tabs\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Additional Notes:**\n\n- The `title` property is required and must be a non-empty string.\n- The `category` property is optional and can be any string value.\n- The `responsive` property is set to `true` by default.\n- The `center` property of the `canvas` object is set to `false` by default.",
    "input": "",
    "output": "{\n  \"title\": \"Header with tabs\",\n  \"category\": \"headers\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided CSS file styles various elements on a webpage. It is likely part of a user interface or web application.\n\n**File Contents:**\n\nThe CSS file defines styles for the following HTML elements:\n\n**Header:**\n- Padding-top: Small spacing (var(--mantine-spacing-sm))\n- Background color: Light or dark mode based on theme\n- Border-bottom: 1px solid light or transparent depending on theme\n- Margin-bottom: 120px\n\n**Main Section:**\n- Padding-bottom: Small spacing (var(--mantine-spacing-sm))\n\n**User:**\n- Color: Light or dark mode based on theme\n- Padding: Extra small (var(--mantine-spacing-xs)) to small (var(--mantine-spacing-sm))\n- Border-radius: Small (var(--mantine-radius-sm))\n- Transition: Background color changes on hover\n- Display: None for screens with a maximum width of $mantine-breakpoint-xs\n\n**User Active:**\n- Background color: Light or dark mode based on theme\n\n**Tabs List:**\n- Removes a display: none; rule from the ::before pseudo-element\n\n**Tab:**\n- Font-weight: 500\n- Height: 38px\n- Background-color: Transparent\n- Position: Relative\n- Bottom: -1px\n- Changes background color on hover and when active\n\n**CSS Variables:**\n\nThe CSS file uses CSS variables for styling, such as:\n\n- --mantine-spacing-sm\n- --mantine-color-gray-0\n- --mantine-color-dark-6\n- --mantine-radius-sm\n\n**Theme Support:**\n\nThe styles are designed to support both light and dark themes, based on the `light-dark()` function.\n\n**Purpose:**\n\nThe purpose of this CSS file is to style the header, main section, user elements, tabs, and other components of a webpage. It provides a consistent and visually appealing user interface.\n\n**Additional Notes:**\n\n- The CSS file uses the Mantine CSS framework, based on the presence of the --mantine- spacing-sm and --mantine-radius-sm variables.\n- The specific values and properties used in the CSS code may vary depending on the specific project or website it is being used for.",
    "input": "",
    "output": ".header {\n  padding-top: var(--mantine-spacing-sm);\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-2), transparent);\n  margin-bottom: 120px;\n}\n\n.mainSection {\n  padding-bottom: var(--mantine-spacing-sm);\n}\n\n.user {\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-dark-0));\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);\n  border-radius: var(--mantine-radius-sm);\n  transition: background-color 100ms ease;\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n  }\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    display: none;\n  }\n}\n\n.userActive {\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n}\n\n.tabsList {\n  &::before {\n    display: none;\n  }\n}\n\n.tab {\n  font-weight: 500;\n  height: 38px;\n  background-color: transparent;\n  position: relative;\n  bottom: -1px;\n\n  &::before,\n  &::after {\n    background-color: light-dark(\n      var(--mantine-color-gray-2),\n      var(--mantine-color-dark-7)\n    ) !important;\n  }\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n  }\n\n  &[data-active] {\n    background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\n    border-color: light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-7));\n    border-bottom-color: transparent;\n  }\n}\n"
  },
  {
    "instruction": "**HeaderTabs.js**\n\nThis file is a React component that implements a set of tabs to navigate between different sections of a header.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a context for rendering the HeaderTabs component with predefined attributes.\n* **HeaderTabs:** The main component that renders the tabs.\n\n**Imports:**\n\n* `StoryWrapper` component from the `StoryWrapper` module.\n* `attributes.json` file containing the attributes for the `HeaderTabs` component.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderTabs } from './HeaderTabs';\n```\n\n**2. Component Definition:**\n```\nexport default { title: 'HeaderTabs' };\n```\n\n**3. Usage Function:**\n```\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderTabs} />;\n}\n```\n\n**Purpose:**\n\n* The `HeaderTabs` component provides a user interface with tabs.\n* The `StoryWrapper` component wraps the `HeaderTabs` component with predefined attributes.\n* The `attributes.json` file defines the configuration options for the tabs.\n\n**How it works:**\n\n* The `Usage()` function creates an instance of the `StoryWrapper` component.\n* The `attributes` prop is set to the attributes defined in the `attributes.json` file.\n* The `component` prop is set to the `HeaderTabs` component.\n* The `StoryWrapper` component renders the `HeaderTabs` component with the specified attributes.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain a set of properties that configure the tabs, such as their labels, icons, and other styling options.\n* The `HeaderTabs` component can be customized further by overriding its default behavior or adding additional features.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeaderTabs } from './HeaderTabs';\n\nexport default { title: 'HeaderTabs' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeaderTabs} />;\n}\n"
  },
  {
    "instruction": "**HeaderTabs.js**\n\nThis React component serves as a header for a web application, providing navigation and user management functionalities.\n\n**Key Features:**\n\n- **Logo:** Displays a Mantine logo.\n- **Burger Menu:** Accessible on small screens, triggering a menu when clicked.\n- **User Menu:**\n    - Provides access to user settings, account management options, and logout.\n    - Displays a list of relevant user actions such as liked posts, saved content, and comments.\n- **Tabs:**\n    - Lists navigation tabs for various sections of the application.\n    - Only visible on larger screens.\n\n**Components:**\n\n- **MantineLogo:** Custom logo component.\n- **Burger:** Mantine burger menu component.\n- **Menu:** Mantine menu component for user options.\n- **Tabs:** Mantine tabs component for navigation.\n\n**State Management:**\n\n- **opened:** Controls the state of the burger menu.\n- **userMenuOpened:** Tracks the state of the user menu.\n\n**Data:**\n\n- **user:** Object containing user information such as name, email, and image.\n- **tabs:** Array of tab labels.\n\n**Rendering:**\n\n- Renders the header layout with logo, burger menu, user menu, and tabs.\n- Uses Mantine components for styling and functionality.\n\n**Purpose:**\n\n- Provide a navigation interface for users.\n- Offer user account management options.\n- Highlight key sections of the application.\n\n**Usage:**\n\nThe `HeaderTabs` component can be imported and rendered within the application layout.\n\n**Example:**\n\n```\n<HeaderTabs />\n```\n\n**Additional Notes:**\n\n- The `HeaderTabs.module.css` file likely contains CSS styles for the component's elements.\n- The `useMantineTheme()` hook is used to access theme-related properties.\n- The `useDisclosure()` hook is used to manage the state of the user menu.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  IconChevronDown,\n  IconHeart,\n  IconLogout,\n  IconMessage,\n  IconPlayerPause,\n  IconSettings,\n  IconStar,\n  IconSwitchHorizontal,\n  IconTrash,\n} from '@tabler/icons-react';\nimport cx from 'clsx';\nimport {\n  Avatar,\n  Burger,\n  Container,\n  Group,\n  Menu,\n  Tabs,\n  Text,\n  UnstyledButton,\n  useMantineTheme,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './HeaderTabs.module.css';\n\nconst user = {\n  name: 'Jane Spoonfighter',\n  email: 'janspoon@fighter.dev',\n  image: 'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-5.png',\n};\n\nconst tabs = [\n  'Home',\n  'Orders',\n  'Education',\n  'Community',\n  'Forums',\n  'Support',\n  'Account',\n  'Helpdesk',\n];\n\nexport function HeaderTabs() {\n  const theme = useMantineTheme();\n  const [opened, { toggle }] = useDisclosure(false);\n  const [userMenuOpened, setUserMenuOpened] = useState(false);\n\n  const items = tabs.map((tab) => (\n    <Tabs.Tab value={tab} key={tab}>\n      {tab}\n    </Tabs.Tab>\n  ));\n\n  return (\n    <div className={classes.header}>\n      <Container className={classes.mainSection} size=\"md\">\n        <Group justify=\"space-between\">\n          <MantineLogo size={28} />\n\n          <Burger opened={opened} onClick={toggle} hiddenFrom=\"xs\" size=\"sm\" />\n\n          <Menu\n            width={260}\n            position=\"bottom-end\"\n            transitionProps={{ transition: 'pop-top-right' }}\n            onClose={() => setUserMenuOpened(false)}\n            onOpen={() => setUserMenuOpened(true)}\n            withinPortal\n          >\n            <Menu.Target>\n              <UnstyledButton\n                className={cx(classes.user, { [classes.userActive]: userMenuOpened })}\n              >\n                <Group gap={7}>\n                  <Avatar src={user.image} alt={user.name} radius=\"xl\" size={20} />\n                  <Text fw={500} size=\"sm\" lh={1} mr={3}>\n                    {user.name}\n                  </Text>\n                  <IconChevronDown size={12} stroke={1.5} />\n                </Group>\n              </UnstyledButton>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Item\n                leftSection={<IconHeart size={16} color={theme.colors.red[6]} stroke={1.5} />}\n              >\n                Liked posts\n              </Menu.Item>\n              <Menu.Item\n                leftSection={<IconStar size={16} color={theme.colors.yellow[6]} stroke={1.5} />}\n              >\n                Saved posts\n              </Menu.Item>\n              <Menu.Item\n                leftSection={<IconMessage size={16} color={theme.colors.blue[6]} stroke={1.5} />}\n              >\n                Your comments\n              </Menu.Item>\n\n              <Menu.Label>Settings</Menu.Label>\n              <Menu.Item leftSection={<IconSettings size={16} stroke={1.5} />}>\n                Account settings\n              </Menu.Item>\n              <Menu.Item leftSection={<IconSwitchHorizontal size={16} stroke={1.5} />}>\n                Change account\n              </Menu.Item>\n              <Menu.Item leftSection={<IconLogout size={16} stroke={1.5} />}>Logout</Menu.Item>\n\n              <Menu.Divider />\n\n              <Menu.Label>Danger zone</Menu.Label>\n              <Menu.Item leftSection={<IconPlayerPause size={16} stroke={1.5} />}>\n                Pause subscription\n              </Menu.Item>\n              <Menu.Item color=\"red\" leftSection={<IconTrash size={16} stroke={1.5} />}>\n                Delete account\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n        </Group>\n      </Container>\n      <Container size=\"md\">\n        <Tabs\n          defaultValue=\"Home\"\n          variant=\"outline\"\n          visibleFrom=\"sm\"\n          classNames={{\n            root: classes.tabs,\n            list: classes.tabsList,\n            tab: classes.tab,\n          }}\n        >\n          <Tabs.List>{items}</Tabs.List>\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the properties of a hero in a game or application.\n\n**Properties:**\n\n* **title:** The title of the hero, which is \"Hero with bullets\" in this case.\n* **category:** The category of the hero, which is \"hero\".\n* **responsive:** A boolean value that indicates whether the hero is responsive to user input. In this case, the value is set to `true`.\n* **canvas:** An object that contains configuration settings for the game canvas.\n    * **center:** A boolean value that indicates whether the game canvas should be centered. In this case, the value is set to `false`.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the properties of a hero, including its title, category, responsiveness, and canvas settings. This information is used by the game or application to create and manage the hero object.\n\n**Additional Notes:**\n\n* The `responsive` property is typically used to indicate whether the hero can be interacted with by the user.\n* The `canvas` property is used to configure the game canvas, which is the area where the game or application is displayed.\n* The `center` property of the `canvas` object is used to determine whether the game canvas should be centered on the screen.\n\n**Usage:**\n\nThis configuration file can be used in various ways, depending on the game or application it is being used for. It can be loaded into the game engine, used to create the hero object, and then used to control the hero's behavior.",
    "input": "",
    "output": "{\n  \"title\": \"Hero with bullets\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** Style.css\n\n**Purpose:**\n\nThe CSS file defines the styles for a web page, including the layout, typography, and colors. It is responsible for the visual appearance of the elements on the page.\n\n**Key Features:**\n\n- **Flexbox Layout:** The `.inner` class uses flexbox to arrange its child elements horizontally with space between them.\n- **Responsive Design:** The styles are responsive to different screen sizes, adjusting the layout and element sizes accordingly.\n- **Typography:** The `.title` class defines the font, size, and weight of the title element.\n- **Color Scheme:** The `.highlight` class specifies a blue background color.\n- **Image:** The `.image` class defines the width and height of an image element.\n\n**CSS Classes:**\n\n- `.inner`: Flexbox container with spacing.\n- `.content`: Main content section with a maximum width and margin.\n- `.title`: Title element with specific font and size.\n- `.control`: Element that adjusts to smaller screens.\n- `.image`: Image element with specified dimensions.\n- `.highlight`: Blue background element.\n\n**Media Queries:**\n\n- The styles are adjusted based on the screen size using media queries.\n- For screens smaller than $mantine-breakpoint-md$, the image is hidden, and the content takes up the full width.\n- For screens smaller than $mantine-breakpoint-xs$, the title font size is reduced, and the control element expands to fill the remaining space.\n\n**Purpose:**\n\nThe purpose of this CSS file is to create a visually appealing and responsive web page with a consistent layout and visual style. It sets the typography, colors, and spacing for different elements, ensuring a cohesive and user-friendly interface.",
    "input": "",
    "output": ".inner {\n  display: flex;\n  justify-content: space-between;\n  padding-top: calc(var(--mantine-spacing-xl) * 4);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 4);\n}\n\n.content {\n  max-width: 480px;\n  margin-right: calc(var(--mantine-spacing-xl) * 3);\n\n  @media (max-width: $mantine-breakpoint-md) {\n    max-width: 100%;\n    margin-right: 0;\n  }\n}\n\n.title {\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  font-family: Outfit, var(--mantine-font-family);\n  font-size: 44px;\n  line-height: 1.2;\n  font-weight: 500;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    font-size: 28px;\n  }\n}\n\n.control {\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex: 1;\n  }\n}\n\n.image {\n  width: 376px;\n  height: 356px;\n\n  @media (max-width: $mantine-breakpoint-md) {\n    display: none;\n  }\n}\n\n.highlight {\n  position: relative;\n  background-color: var(--mantine-color-blue-light);\n  border-radius: var(--mantine-radius-sm);\n  padding: 4px 12px;\n}\n"
  },
  {
    "instruction": "**File Name:** HeroBullets.jsx\n\n**Purpose:**\n\nThe `HeroBullets.jsx` file is a React component that displays a list of bullets for a hero in a story. It imports necessary components and data from other files to render the hero's attributes and bullets.\n\n**Components and Data:**\n\n* **StoryWrapper:** A component that wraps the HeroBullets component and provides additional functionality, such as rendering attributes and handling user interactions.\n* **attributes.json:** A JSON file that contains the hero's attributes, such as name, title, and biography.\n* **HeroBullets:** The main component that renders the list of bullets.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroBullets } from './HeroBullets';\n```\n\n* `StoryWrapper` is imported from the `StoryWrapper` component.\n* `attributes` is imported from the `attributes.json` file.\n* `HeroBullets` is imported from the `HeroBullets` component.\n\n**2. Export Statements:**\n\n```\nexport default { title: 'HeroBullets' };\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroBullets} />;\n}\n```\n\n* `title` is exported as the title of the component.\n* `Usage()` is exported as a function that renders the `StoryWrapper` component with the `HeroBullets` component and the `attributes` data.\n\n**How the Component Works:**\n\n* When the `HeroBullets` component is rendered, it receives the `attributes` data as props.\n* The `StoryWrapper` component wraps the `HeroBullets` component and provides additional functionality, such as rendering the attributes.\n* The `StoryWrapper` component passes the `attributes` data to the `HeroBullets` component as props.\n* The `HeroBullets` component iterates over the `attributes` data and renders a bullet for each attribute.\n\n**Usage:**\n\nThe `Usage()` function exports a component that can be used to render the hero's bullets. It simply renders the `StoryWrapper` component with the `HeroBullets` component and the `attributes` data.\n\n**Conclusion:**\n\nThe `HeroBullets.jsx` file is a React component that displays a list of bullets for a hero in a story. It imports necessary components and data from other files to render the hero's attributes and bullets. The component provides a convenient way to showcase the hero's capabilities and background information.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroBullets } from './HeroBullets';\n\nexport default { title: 'HeroBullets' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroBullets} />;\n}\n"
  },
  {
    "instruction": "**HeroBullets.jsx**\n\n**Purpose:**\n\nThe `HeroBullets.jsx` file is a React component that serves as the hero section of a web application. It highlights the key features and benefits of a modern React components library called Mantine.\n\n**Components:**\n\n* **Container:** A component that provides a predefined width and margin.\n* **Title:** A component that displays a title with a specific style.\n* **Text:** A component that displays text with a predefined color and margin.\n* **List:** A component that displays a list of items with custom icons and styling.\n* **Button:** A component that provides buttons with different styles and functionalities.\n* **Image:** A component that displays an image.\n\n**Functionality:**\n\nThe component renders the following elements:\n\n* A title that includes the words \"modern\" and \"React\" with a highlighted style.\n* A description of Mantine's features and benefits.\n* A list of key features, each with an icon and a brief description.\n* Two buttons: \"Get started\" and \"Source code\".\n* An image that showcases the library in action.\n\n**Styling:**\n\nThe component uses a CSS module called `HeroBullets.module.css` to define custom styles for the various elements.\n\n**Dependencies:**\n\n* `@tabler/icons-react`: A library for Tabler icons.\n* `@mantine/core`: The Mantine core library.\n\n**Usage:**\n\nThis component can be imported and used in any React application to display the hero section.\n\n**Additional Notes:**\n\n* The `image.svg` file is used to display the image in the hero section.\n* The `ThemeIcon` component is used to render the checkmark icon in the list items.\n* The `TypeScript` based property indicates that Mantine is built with TypeScript.\n* The `Free and open source` property highlights that the library is available for free and open source use.",
    "input": "",
    "output": "import { IconCheck } from '@tabler/icons-react';\nimport { Button, Container, Group, Image, List, Text, ThemeIcon, Title } from '@mantine/core';\nimport image from './image.svg';\nimport classes from './HeroBullets.module.css';\n\nexport function HeroBullets() {\n  return (\n    <Container size=\"md\">\n      <div className={classes.inner}>\n        <div className={classes.content}>\n          <Title className={classes.title}>\n            A <span className={classes.highlight}>modern</span> React <br /> components library\n          </Title>\n          <Text c=\"dimmed\" mt=\"md\">\n            Build fully functional accessible web applications faster than ever – Mantine includes\n            more than 120 customizable components and hooks to cover you in any situation\n          </Text>\n\n          <List\n            mt={30}\n            spacing=\"sm\"\n            size=\"sm\"\n            icon={\n              <ThemeIcon size={20} radius=\"xl\">\n                <IconCheck size={12} stroke={1.5} />\n              </ThemeIcon>\n            }\n          >\n            <List.Item>\n              <b>TypeScript based</b> – build type safe applications, all components and hooks\n              export types\n            </List.Item>\n            <List.Item>\n              <b>Free and open source</b> – all packages have MIT license, you can use Mantine in\n              any project\n            </List.Item>\n            <List.Item>\n              <b>No annoying focus ring</b> – focus ring will appear only when user navigates with\n              keyboard\n            </List.Item>\n          </List>\n\n          <Group mt={30}>\n            <Button radius=\"xl\" size=\"md\" className={classes.control}>\n              Get started\n            </Button>\n            <Button variant=\"default\" radius=\"xl\" size=\"md\" className={classes.control}>\n              Source code\n            </Button>\n          </Group>\n        </div>\n        <Image src={image.src} className={classes.image} />\n      </div>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a Hero content block with specific configurations. It represents a single content element on a website or web page.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Hero with content on left\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**File Elements:**\n\n- **title:** Specifies the title of the Hero content block, which is \"Hero with content on left\".\n- **category:** Indicates the category of the content block as \"hero\".\n- **responsive:** Set to `true`, indicating that the content block is responsive and will adapt to different screen sizes.\n- **canvas:** A nested object that defines the canvas settings.\n    - **center:** Set to `false`, indicating that the content should not be centered within the canvas.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a Hero content block with the following characteristics:\n\n- Title: \"Hero with content on left\"\n- Category: Hero\n- Responsiveness: Enabled\n- Canvas: Content will not be centered within the canvas\n\n**Usage:**\n\nThis JSON file can be used by content management systems (CMS) or website builders to create a Hero content block with the specified configurations. The block would typically display a visually appealing image or video in the background, with content such as text, buttons, or forms on the left-hand side.\n\n**Additional Notes:**\n\n- The file name is not specified in the JSON data, but it is typically named based on the title or category of the content block.\n- The specific content and settings for the Hero block may vary depending on the CMS or website builder being used.",
    "input": "",
    "output": "{\n  \"title\": \"Hero with content on left\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the visual style of a hero section on a website. It creates a visually engaging background image, sets the layout and typography of title, description, and a call-to-action button.\n\n**Key Elements:**\n\n- **.hero:**\n    - Sets the position to relative for positioning child elements within it.\n    - Uses a background image with a URL provided in the `url()` function.\n    - Adjusts the background size to cover the entire element.\n    - Positions the background image at the center.\n\n- **.container:**\n    - Defines a container with a fixed height of 700px.\n    - Uses flexbox to align the title, description, and button vertically at the bottom.\n    - Adjusts padding and z-index for positioning the container above other elements.\n    - Provides media queries to adjust height and padding for smaller screens.\n\n- **.title:**\n    - Sets the font size, weight, and color to white.\n    - Adjusts font size and line height based on screen size.\n\n- **.description:**\n    - Sets the color to white and limits its width to 600px.\n    - Adjusts font size for smaller screens.\n\n- **.control:**\n    - Adds a margin-top to separate it from the description.\n    - Adjusts width for smaller screens.\n\n**Purpose:**\n\nThe purpose of this CSS file is to create a visually appealing and engaging hero section. It sets the stage for the website by providing a background image, title, description, and a call-to-action button.\n\n**Benefits:**\n\n- Enhanced user experience with a visually attractive background image.\n- Clear and concise title and description to communicate the website's message.\n- Prominent call-to-action button to encourage visitors to take action.\n- Responsive design that adapts to different screen sizes.\n\n**Additional Notes:**\n\n- The CSS file relies on variables defined in the Mantine CSS framework.\n- The background image is sourced from an external URL provided in the `url()` function.\n- Media queries are used to adjust the styles based on different screen sizes.",
    "input": "",
    "output": ".hero {\n  position: relative;\n  background-image: url(https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80);\n  background-size: cover;\n  background-position: center;\n}\n\n.container {\n  height: 700px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n  padding-bottom: calc(var(--mantine-spacing-xl) * 6);\n  z-index: 1;\n  position: relative;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    height: 500px;\n    padding-bottom: calc(var(--mantine-spacing-xl) * 3);\n  }\n}\n\n.title {\n  color: var(--mantine-color-white);\n  font-size: 60px;\n  font-weight: 500;\n  line-height: 1.1;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 40px;\n    line-height: 1.2;\n  }\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    font-size: 28px;\n    line-height: 1.3;\n  }\n}\n\n.description {\n  color: var(--mantine-color-white);\n  max-width: 600px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    max-width: 100%;\n    font-size: var(--mantine-font-size-sm);\n  }\n}\n\n.control {\n  margin-top: calc(var(--mantine-spacing-xl) * 1.5);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    width: 100%;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeroContentLeft.jsx\n\n**File Purpose:**\n\nThis file defines a React component named `HeroContentLeft` that is used to render a hero content section with left-aligned text.\n\n**Components and Imports:**\n\n* **StoryWrapper:** A custom component that provides a wrapper for the `HeroContentLeft` component.\n* **attributes.json:** A JSON file that contains the attributes for the hero content, such as title, subtitle, and description.\n* **HeroContentLeft:** The main component that renders the hero content with left-aligned text.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroContentLeft } from './HeroContentLeft';\n\nexport default { title: 'HeroContentLeft' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroContentLeft} />;\n}\n```\n\n**Explanation:**\n\n* The file imports the necessary components and files.\n* It exports a `title` object to be used by the Storybook tool.\n* It defines a `Usage` function that renders the `StoryWrapper` component with the `HeroContentLeft` component and the `attributes` JSON file.\n\n**Usage:**\n\nThe `HeroContentLeft` component can be used to display a hero content section with left-aligned text by rendering the `Usage()` function.\n\n**Example Usage:**\n\n```\n<Usage />\n```\n\n**Note:**\n\n* The `attributes.json` file should contain the necessary attributes for the hero content, such as title, subtitle, and description.\n* The `StoryWrapper` component provides additional functionality, such as rendering the component with the specified attributes and handling user interactions.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroContentLeft } from './HeroContentLeft';\n\nexport default { title: 'HeroContentLeft' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroContentLeft} />;\n}\n"
  },
  {
    "instruction": "**File Name:** HeroContentLeft.js\n\n**File Purpose:**\n\nThe `HeroContentLeft.js` file is a React component that renders the left side content of a hero section. It provides a visually appealing and informative introduction to the website or application.\n\n**File Structure:**\n\n* **Import Statements:**\n    * Import necessary Mantine components such as `Button`, `Container`, `Overlay`, `Text`, and `Title`.\n    * Import the CSS styles for the component using `HeroContentLeft.module.css`.\n\n* **Component Function:**\n    * Define a function called `HeroContentLeft` that returns the JSX code for the component.\n\n* **JSX Code:**\n    * Render a `div` element with the `classes.hero` class for styling.\n    * Add an `Overlay` component with a gradient and opacity to create a semi-transparent background.\n    * Inside the `Container` component:\n        * Display a `Title` component with the text \"A fully featured React components library\".\n        * Add a `Text` component with a description of the library's features and capabilities.\n        * Provide a `Button` component with the text \"Get started\" and the `classes.control` class for styling.\n\n**Key Features:**\n\n* **Hero Section:** The component represents the hero section of the website, typically the first section visitors see.\n* **Visually Appealing:** The overlay, title, and description create an engaging and informative presentation.\n* **Call to Action:** The \"Get started\" button encourages users to take the next step.\n* **Mantine Components:** The component utilizes Mantine components for layout, styling, and functionality.\n\n**Usage:**\n\nThe `HeroContentLeft` component can be used to introduce the website or application to visitors. It provides a clear value proposition and encourages them to explore further.\n\n**Additional Notes:**\n\n* The `HeroContentLeft.module.css` file likely contains CSS styles for the component, such as font sizes, colors, and spacing.\n* The specific design and content of the hero section can be customized based on the website or application's branding and objectives.",
    "input": "",
    "output": "import { Button, Container, Overlay, Text, Title } from '@mantine/core';\nimport classes from './HeroContentLeft.module.css';\n\nexport function HeroContentLeft() {\n  return (\n    <div className={classes.hero}>\n      <Overlay\n        gradient=\"linear-gradient(180deg, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, .65) 40%)\"\n        opacity={1}\n        zIndex={0}\n      />\n      <Container className={classes.container} size=\"md\">\n        <Title className={classes.title}>A fully featured React components library</Title>\n        <Text className={classes.description} size=\"xl\" mt=\"xl\">\n          Build fully functional accessible web applications faster than ever – Mantine includes\n          more than 120 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Button variant=\"gradient\" size=\"xl\" radius=\"xl\" className={classes.control}>\n          Get started\n        </Button>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines a hero section with a background image.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Hero with background image\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the hero section, which is \"Hero with background image\".\n* **category:** The category of the hero section, which is \"hero\".\n* **responsive:** A boolean value that specifies whether the hero section is responsive, which is set to \"true\".\n* **canvas:** An object that defines the canvas settings for the hero section.\n    * **center:** A boolean value that specifies whether the content should be centered within the canvas, which is set to \"false\".\n\n**Purpose:**\n\nThe purpose of this file is to configure a hero section with a background image. The hero section will typically be the first section of a webpage and will be used to make a strong first impression on visitors.\n\n**Key Features:**\n\n* **Responsive layout:** The hero section will automatically adjust its size to different screen sizes.\n* **Background image:** The hero section will have a background image that can be specified in the configuration file.\n* **Title:** The hero section will display a title that is specified in the configuration file.\n* **Content alignment:** The content within the hero section can be aligned to the left or right, depending on the value of the `center` property in the canvas object.\n\n**Additional Notes:**\n\n* The `category` property is used to group the hero section with other content on the page.\n* The `canvas` object defines the settings for the hero section's canvas, which is the area where the content will be displayed.\n* The `center` property in the canvas object determines whether the content should be centered within the canvas.",
    "input": "",
    "output": "{\n  \"title\": \"Hero with background image\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file describes the style of a web page section with a background image, title, description, and call-to-action buttons.\n\n**Key Features:**\n\n* **Background Image:** A visually appealing image is set as the background with the following specifications:\n    * Image URL: `https://images.unsplash.com/photo-1573164713988-8665fc963095?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=980&q=80`\n    * Image size: Cover\n    * Image position: Center\n* **Padding:** Padding is added to the top and bottom of the section to create spacing.\n* **Responsive Design:** The layout adjusts to different screen sizes using media queries.\n* **Title:** A large, bold title is displayed with appropriate spacing and font style.\n* **Highlight:** A specific word within the title is highlighted using a different color.\n* **Description:** A short description is provided with appropriate spacing and text alignment.\n* **Call-to-Action Buttons:** Two buttons are included with different styles:\n    * Primary Button: Solid white background with primary color text\n    * Secondary Button: Translucent white background with white text\n* **Spacing:** Consistent spacing is used between elements within the section.\n\n**Purpose:**\n\nThe purpose of this file is to style a specific section of a web page with a visually appealing background, clear messaging, and prominent call-to-action buttons.\n\n**Usage:**\n\nThe CSS code can be incorporated into a web page by including it in the `<style>` tag or linking it as an external CSS file.\n\n**Note:**\n\nThe CSS file assumes the availability of a CSS framework called Mantine and a font called Outfit.",
    "input": "",
    "output": ".wrapper {\n  position: relative;\n  padding-top: 180px;\n  padding-bottom: 130px;\n  background-image: url(https://images.unsplash.com/photo-1573164713988-8665fc963095?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=980&q=80);\n  background-size: cover;\n  background-position: center;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    padding-top: 80px;\n    padding-bottom: 50px;\n  }\n}\n\n.inner {\n  position: relative;\n  z-index: 1;\n}\n\n.title {\n  font-weight: 800;\n  font-size: 40px;\n  letter-spacing: -1px;\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n  color: var(--mantine-color-white);\n  margin-bottom: var(--mantine-spacing-xs);\n  text-align: center;\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    font-size: 28px;\n    text-align: left;\n  }\n}\n\n.highlight {\n  color: var(--mantine-color-primary-4);\n}\n\n.description {\n  color: var(--mantine-color-gray-0);\n  text-align: center;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    font-size: var(--mantine-font-size-md);\n    text-align: left;\n  }\n}\n\n.controls {\n  margin-top: calc(var(--mantine-spacing-xl) * 1.5);\n  display: flex;\n  justify-content: center;\n  padding-left: var(--mantine-spacing-md);\n  padding-right: var(--mantine-spacing-md);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.control {\n  height: 42px;\n  font-size: var(--mantine-font-size-md);\n\n  &:not(:first-of-type) {\n    margin-left: var(--mantine-spacing-md);\n  }\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    &:not(:first-of-type) {\n      margin-top: var(--mantine-spacing-md);\n      margin-left: 0;\n    }\n  }\n}\n\n.secondaryControl {\n  color: var(--mantine-color-white);\n  background-color: rgba(255, 255, 255, 0.4);\n\n  @mixin hover {\n    background-color: rgba(255, 255, 255, 0.45);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeroImageBackground.js\n\n**Purpose:**\n\nThe HeroImageBackground.js file is a React component that serves as a wrapper for the HeroImageBackground component. It provides a reusable component that encapsulates the necessary logic and configuration for rendering the HeroImageBackground.\n\n**Components:**\n\n* **StoryWrapper:** A custom component imported from the '../../components/StoryWrapper/StoryWrapper' module. It wraps the HeroImageBackground component and provides additional functionality or styling.\n* **HeroImageBackground:** A component defined in the same file. It is responsible for rendering the hero background image.\n* **attributes.json:** A JSON file containing attributes or configuration options for the HeroImageBackground component.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * Imports the StoryWrapper component.\n    * Imports the attributes.json file.\n    * Imports the HeroImageBackground component.\n* **Component Definition:**\n    * Exports a default object with a title property set to 'HeroImageBackground'.\n* **Usage Function:**\n    * Returns a StoryWrapper component with the following props:\n        * attributes: The configuration options from the attributes.json file.\n        * component: The HeroImageBackground component.\n\n**How the File Works:**\n\n* When this file is imported or rendered, it creates an instance of the StoryWrapper component.\n* The StoryWrapper component receives the attributes and component props from the Usage function.\n* The HeroImageBackground component is then rendered within the StoryWrapper component.\n* The attributes.json file provides any necessary configuration options for the HeroImageBackground component, such as image source, background color, or padding.\n\n**Conclusion:**\n\nThe HeroImageBackground.js file provides a reusable component that simplifies the rendering of a hero background image by encapsulating the necessary configuration and rendering logic. It uses the StoryWrapper component to provide additional functionality or styling as needed.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroImageBackground } from './HeroImageBackground';\n\nexport default { title: 'HeroImageBackground' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroImageBackground} />;\n}\n"
  },
  {
    "instruction": "**File Name:** HeroImageBackground.js\n\n**Purpose:**\n\nThe `HeroImageBackground.js` file is a React component that renders a hero background section with a title, description, and buttons. The section is designed to showcase the capabilities of an AI-powered code review tool.\n\n**Components:**\n\n* `Overlay`: Creates a semi-transparent overlay on the background image.\n* `Title`: Displays the title \"Automated AI code reviews for any stack\".\n* `Text`: Provides a description and highlights the word \"any stack\" using the `classes.highlight` CSS class.\n* `Container`: Encapsulates the title, description, and buttons.\n* `Button`: Creates two buttons: \"Get started\" and \"Live demo\".\n\n**CSS File:**\n\nThe file `HeroImageBackground.module.css` contains CSS styles for the component, including:\n\n* `wrapper`: Styles the outermost container.\n* `inner`: Styles the content area.\n* `title`: Styles the title.\n* `highlight`: Styles the highlighted text.\n* `description`: Styles the description.\n* `controls`: Styles the button container.\n* `control`: Styles the individual buttons.\n* `secondaryControl`: Styles the \"Live demo\" button.\n\n**Functionality:**\n\nThe component renders the following layout:\n\n* A semi-transparent overlay image.\n* A title that emphasizes the AI-powered code review.\n* A description highlighting the tool's ability to review code for any stack.\n* Two buttons inviting users to get started or explore a live demo.\n\n**Use Case:**\n\nThe `HeroImageBackground` component can be used as a landing page or promotional section for an AI-powered code review tool. It aims to attract users by showcasing the tool's capabilities and inviting them to take action.\n\n**Additional Notes:**\n\n* The `cx` function is used to combine multiple CSS classes for the \"Live demo\" button.\n* The `inherit` CSS property is used to inherit the font color from the parent element.\n* The `zIndex` property is used to specify the stacking order of the overlay and content.",
    "input": "",
    "output": "import cx from 'clsx';\nimport { Button, Container, Overlay, Text, Title } from '@mantine/core';\nimport classes from './HeroImageBackground.module.css';\n\nexport function HeroImageBackground() {\n  return (\n    <div className={classes.wrapper}>\n      <Overlay color=\"#000\" opacity={0.65} zIndex={1} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI code reviews for{' '}\n          <Text component=\"span\" inherit className={classes.highlight}>\n            any stack\n          </Text>\n        </Title>\n\n        <Container size={640}>\n          <Text size=\"lg\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} variant=\"white\" size=\"lg\">\n            Get started\n          </Button>\n          <Button className={cx(classes.control, classes.secondaryControl)} size=\"lg\">\n            Live demo\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON object that defines the configuration for a hero section on a website. It is used to specify the title, category, responsiveness, and layout of the hero section.\n\n**Properties:**\n\n* **title:** (string) The title of the hero section. In this case, it is \"Hero with image on the right\".\n* **category:** (string) The category of the hero section. In this case, it is \"hero\".\n* **responsive:** (boolean) Indicates whether the hero section should be responsive to different screen sizes. In this case, it is set to `true`.\n* **canvas:** (object) Configuration options for the hero section canvas.\n    * **center:** (boolean) Specifies whether the content should be centered within the canvas. In this case, it is set to `false`, indicating that the content should be aligned to the left.\n\n**Purpose:**\n\nThe purpose of this JSON object is to provide a declarative way to configure the hero section of a website. By specifying the title, category, responsiveness, and layout options, designers and developers can easily create a visually appealing and user-friendly hero section.\n\n**Benefits:**\n\n* **Flexibility:** The configuration options allow for customization of the hero section's title, category, responsiveness, and layout.\n* **Consistency:** By using a JSON object, it is possible to ensure consistency in the design and behavior of hero sections throughout the website.\n* **Maintainability:** Changes to the hero section configuration can be made easily without affecting the rest of the website.\n\n**Usage:**\n\nThis JSON object can be used in a variety of ways, such as:\n\n* **As input to a website builder or content management system.**\n* **As a configuration file for a custom hero section component.**\n* **As a template for creating new hero sections.**",
    "input": "",
    "output": "{\n  \"title\": \"Hero with image on the right\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a landing page with a hero section, content, and a call-to-action button.\n\n**Key Features:**\n\n- **Hero Section:**\n    - A background image with a linear gradient overlay.\n    - Centered content with a title, description, and control button.\n- **Responsive Design:**\n    - The layout adjusts to different screen sizes using media queries.\n- **Font Styling:**\n    - Title and description use the Outfit font.\n- **Spacing and Padding:**\n    - Padding and margins are used to create spacing between elements.\n- **Color Scheme:**\n    - The background color is a dark blue (#11284b).\n    - The text color is white.\n- **Button:**\n    - The call-to-action button has a larger padding and font size.\n\n**File Structure:**\n\n```css\n.root {\n  /* Background styles */\n}\n\n.inner {\n  /* Flexbox layout for content */\n}\n\n.image {\n  /* Display none on small screens */\n}\n\n.content {\n  /* Padding and margin */\n}\n\n.title {\n  /* Title font styles */\n}\n\n.description {\n  /* Description font styles */\n}\n\n.control {\n  /* Button font styles */\n}\n```\n\n**Usage:**\n\nThis CSS file can be linked to an HTML file to style the landing page. The HTML file would include the necessary HTML elements for the hero section, content, and button.\n\n**Example:**\n\n```html\n<section class=\"root\">\n  <div class=\"inner\">\n    <div class=\"content\">\n      <h1 class=\"title\">Your Title Here</h1>\n      <p class=\"description\">Your description here...</p>\n      <button class=\"control\">Call to Action</button>\n    </div>\n    <div class=\"image\">\n      <!-- Image here -->\n    </div>\n  </div>\n</section>\n```",
    "input": "",
    "output": ".root {\n  background-color: #11284b;\n  background-size: cover;\n  background-position: center;\n  background-image:\n    linear-gradient(250deg, rgba(130, 201, 30, 0) 0%, #062343 70%),\n    url(https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8&auto=format&fit=crop&w=1080&q=80);\n  padding-top: calc(var(--mantine-spacing-xl) * 3);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 3);\n}\n\n.inner {\n  display: flex;\n  justify-content: space-between;\n\n  @media (max-width: $mantine-breakpoint-md) {\n    flex-direction: column;\n  }\n}\n\n.image {\n  @media (max-width: $mantine-breakpoint-md) {\n    display: none;\n  }\n}\n\n.content {\n  padding-top: calc(var(--mantine-spacing-xl) * 2);\n  padding-bottom: calc(var(--mantine-spacing-xl) * 2);\n  margin-right: calc(var(--mantine-spacing-xl) * 3);\n\n  @media (max-width: $mantine-breakpoint-md) {\n    margin-right: 0;\n  }\n}\n\n.title {\n  color: var(--mantine-color-white);\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 500;\n  line-height: 1.05;\n  max-width: 500px;\n  font-size: 48px;\n\n  @media (max-width: $mantine-breakpoint-md) {\n    max-width: 100%;\n    font-size: 34px;\n    line-height: 1.15;\n  }\n}\n\n.description {\n  color: var(--mantine-color-white);\n  opacity: 0.75;\n  max-width: 500px;\n\n  @media (max-width: $mantine-breakpoint-md) {\n    max-width: 100%;\n  }\n}\n\n.control {\n  padding-left: 50px;\n  padding-right: 50px;\n  font-family: Outfit, var(--mantine-font-family);\n  font-size: 22px;\n\n  @media (max-width: $mantine-breakpoint-md) {\n    width: 100%;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeroImageRight.jsx\n\n**Purpose:**\n\nThe HeroImageRight.jsx file appears to be a React component that represents a hero image with a right-aligned image and supporting text.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the HeroImageRight component and provides additional functionality.\n* **HeroImageRight:** The primary component that displays the hero image and supporting text.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroImageRight } from './HeroImageRight';\n\nexport default { title: 'HeroImageRight' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroImageRight} />;\n}\n```\n\n**Explanation:**\n\n* **Import Statements:**\n    * `StoryWrapper` is imported from the `StoryWrapper` component located in the `../../components/StoryWrapper` directory.\n    * `attributes.json` is imported as a JSON file containing attributes for the hero image.\n    * `HeroImageRight` is imported as a component from the current directory.\n\n* **Default Export:**\n    * An object is exported with a `title` property set to `'HeroImageRight'`.\n\n* **Usage Function:**\n    * A `Usage` function is exported and returns a `StoryWrapper` component.\n    * The `attributes` prop is set to the imported `attributes.json` file.\n    * The `component` prop is set to the `HeroImageRight` component.\n\n**Expected Functionality:**\n\nWhen this file is imported into a React application, it will render a hero image with the following characteristics:\n\n* The image will be right-aligned.\n* Supporting text will be displayed below the image.\n* The attributes specified in the `attributes.json` file will be applied to the hero image and supporting text.\n\n**Purpose of StoryWrapper:**\n\nThe `StoryWrapper` component may provide additional functionality, such as:\n\n* Handling user interactions with the hero image.\n* Adding styling or animations.\n* Providing additional data or context to the `HeroImageRight` component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroImageRight } from './HeroImageRight';\n\nexport default { title: 'HeroImageRight' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroImageRight} />;\n}\n"
  },
  {
    "instruction": "**HeroImageRight.js**\n\nThis file is a React functional component that renders a hero section with an image on the right side and text content on the left. It utilizes the Mantine UI library for its components.\n\n**Key Features:**\n\n- **Responsive layout:** The component adjusts its layout to different screen sizes using the `Container` component with the `size=\"lg\"` prop.\n- **Title with gradient text:** The title includes a primary title with a secondary title rendered using the `Text` component with a gradient effect.\n- **Description:** A descriptive paragraph is displayed below the title.\n- **Call to action button:** A gradient button with the text \"Get started\" is provided to encourage users to take action.\n\n**Component Structure:**\n\n- **Import Statements:** The necessary Mantine components and CSS styles are imported.\n- **Functional Component:** The `HeroImageRight` function is defined, which renders the component's UI.\n- **Layout:**\n    - A `div` with a class name `classes.root` serves as the container for the hero section.\n    - A `Container` with `size=\"lg\"` provides the responsive layout.\n    - An inner `div` with the class name `classes.inner` holds the content.\n    - A `div` with the class name `classes.content` contains the text content.\n    - A `Title` component with the class name `classes.title` displays the primary and secondary title with gradient text.\n    - A `Text` component with the class name `classes.description` provides the description.\n    - A `Button` component with the class name `classes.control` and gradient style contains the call to action text.\n\n**CSS Styles:**\n\nThe `HeroImageRight.module.css` file likely defines the styles for the various components, including the title, description, button, and layout.\n\n**Usage:**\n\nThis component can be used to create a hero section on a web page to showcase a product or service. It provides a visually appealing and informative layout with a clear call to action.\n\n**Note:**\n\n- The specific CSS styles and component configurations may vary depending on the implementation of the `HeroImageRight.module.css` file.\n- The component relies on the Mantine UI library, which must be installed and imported into the project.",
    "input": "",
    "output": "import { Button, Container, Text, Title } from '@mantine/core';\nimport classes from './HeroImageRight.module.css';\n\nexport function HeroImageRight() {\n  return (\n    <div className={classes.root}>\n      <Container size=\"lg\">\n        <div className={classes.inner}>\n          <div className={classes.content}>\n            <Title className={classes.title}>\n              A{' '}\n              <Text\n                component=\"span\"\n                inherit\n                variant=\"gradient\"\n                gradient={{ from: 'pink', to: 'yellow' }}\n              >\n                fully featured\n              </Text>{' '}\n              React components library\n            </Title>\n\n            <Text className={classes.description} mt={30}>\n              Build fully functional accessible web applications with ease – Mantine includes more\n              than 100 customizable components and hooks to cover you in any situation\n            </Text>\n\n            <Button\n              variant=\"gradient\"\n              gradient={{ from: 'pink', to: 'yellow' }}\n              size=\"xl\"\n              className={classes.control}\n              mt={40}\n            >\n              Get started\n            </Button>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe JSON file you provided defines a configuration object for a hero section in a website. It contains metadata and settings that describe the appearance, layout, and functionality of the hero section.\n\n**Fields**\n\n**title:**\n- Type: String\n- Value: \"Hero section with text\"\n- Description: The title of the hero section, displayed as a heading.\n\n**category:**\n- Type: String\n- Value: \"hero\"\n- Description: The category of the hero section, which in this case is \"hero.\"\n\n**responsive:**\n- Type: Boolean\n- Value: true\n- Description: Indicates whether the hero section is responsive and adjusts its layout based on different screen sizes.\n\n**canvas:**\n- Type: Object\n- Value: { \"center\": false }\n- Description: Configuration options for the hero section's layout.\n    - **center:** Boolean (false)\n        - Description: Specifies whether the content within the hero section is centered horizontally. In this case, it is set to false, indicating that the content is not centered.\n\n**Purpose**\n\nThe purpose of this JSON file is to provide configuration settings for a hero section on a website. The settings include:\n\n- Title\n- Category\n- Responsiveness\n- Content alignment\n\n**Usage**\n\nThis JSON file can be used to:\n\n- Define the structure and layout of a hero section.\n- Specify the content and style of the hero section.\n- Configure the responsiveness of the hero section.\n- Control the alignment of the content within the hero section.\n\n**Additional Notes**\n\n- The specific content and styling of the hero section are not included in this file.\n- The values specified in the file can be customized according to the website design and requirements.\n- The file can be used with a website builder or content management system (CMS) to create and manage the hero section.",
    "input": "",
    "output": "{\n  \"title\": \"Hero section with text\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code defines a React functional component called `Dots`. This component renders a set of small, circular dots arranged in a grid pattern within an SVG element.\n\n**Function Signature:**\n\n```\nfunction Dots({ size = 185, radius = 2.5, ...others }: DotsProps) {\n  // ...\n}\n```\n\n**Props:**\n\n- `size`: Specifies the width and height of the SVG element in pixels. Defaults to 185.\n- `radius`: Specifies the radius of each dot in pixels. Defaults to 2.5.\n- `...others`: Any additional props passed to the `Dots` component.\n\n**Component Logic:**\n\n- The component renders an `<svg>` element with the following attributes:\n    - `aria-hidden`: Set to `true` to hide the SVG from screen readers.\n    - `xmlns`: Specifies the XML namespace for the SVG elements.\n    - `fill`: Sets the fill color of the dots to the current color of the element.\n    - `viewBox`: Defines the coordinate system and dimensions of the SVG viewport.\n    - `width`: Sets the width of the SVG element based on the `size` prop.\n    - `height`: Sets the height of the SVG element based on the `size` prop.\n    - `{...others}`: Passes any additional props to the `<svg>` element.\n\n- Inside the `<svg>` element, the component renders a grid of `rect` elements, each representing a single dot.\n- Each `rect` element has the following attributes:\n    - `width`: Sets the width and height of the dot to `5` pixels.\n    - `height`: Sets the width and height of the dot to `5` pixels.\n    - `rx`: Sets the radius of the rounded corners of the dot to the `radius` prop.\n\n**Usage:**\n\nThe `Dots` component can be used to create a visual representation of a grid of dots. It can be integrated into other React components or rendered standalone.\n\n**Example:**\n\n```\n<Dots size=\"200\" radius=\"3\" />\n```\n\n**Conclusion:**\n\nThe provided code defines a React component that renders a set of circular dots within an SVG element. The component provides props to control the size, radius, and additional attributes of the SVG and dots. It is useful for creating visual representations of grids or other patterns.",
    "input": "",
    "output": "export interface DotsProps extends React.ComponentPropsWithoutRef<'svg'> {\n  size?: number;\n  radius?: number;\n}\n\nexport function Dots({ size = 185, radius = 2.5, ...others }: DotsProps) {\n  return (\n    <svg\n      aria-hidden\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"currentColor\"\n      viewBox=\"0 0 185 185\"\n      width={size}\n      height={size}\n      {...others}\n    >\n      <rect width=\"5\" height=\"5\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"20\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"40\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"60\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"80\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"100\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"120\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"140\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"160\" rx={radius} />\n      <rect width=\"5\" height=\"5\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"60\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"120\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"20\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"80\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"140\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"40\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"100\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"160\" y=\"180\" rx={radius} />\n      <rect width=\"5\" height=\"5\" x=\"180\" y=\"180\" rx={radius} />\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** .wrapper.css\n\n**Purpose:**\n\nThe CSS file defines the styling for a wrapper element on a webpage. It is used to set the padding, positioning, and layout of content within the wrapper.\n\n**Key Features:**\n\n**1. Positioning and Padding:**\n\n- The `.wrapper` class sets the `position` property to `relative`, allowing for relative positioning of its child elements.\n- It defines padding top and bottom with values of 120px and 80px, respectively.\n- Media queries are used to adjust padding for screens with a maximum width of $mantine-breakpoint-sm (typically mobile devices) with values of 80px and 60px, respectively.\n\n**2. Content Container:**\n\n- The `.inner` class provides a content container with a `z-index` of 1, positioning it above other elements with lower z-index values.\n\n**3. Background Dots:**\n\n- The `.dots` class defines the style of background dots that appear on the top left corner of the wrapper.\n- The dots are positioned absolutely and have a color that is adjusted based on the theme (dark or light mode).\n- Media queries hide the dots on screens with a maximum width of $mantine-breakpoint-sm.\n\n**4. Title:**\n\n- The `.title` class styles the title within the wrapper.\n- It sets the text alignment, font weight, font size, letter spacing, color, margin, and font family.\n- Media queries adjust the font size and text alignment for screens with a maximum width of $mantine-breakpoint-xs.\n\n**5. Highlight:**\n\n- The `.highlight` class defines the style for the highlighted text within the title.\n- It sets the color to blue, adjusted based on the theme.\n\n**6. Description:**\n\n- The `.description` class styles the description text.\n- It sets the text alignment.\n- Media queries adjust the font size for screens with a maximum width of $mantine-breakpoint-xs.\n\n**7. Controls:**\n\n- The `.controls` class defines the container for buttons or other controls.\n- It sets the margin top, display, and justify-content properties.\n- Media queries adjust the flex-direction for screens with a maximum width of $mantine-breakpoint-xs.\n\n**8. Control Buttons:**\n\n- The `.control` class styles the individual control buttons.\n- It sets the margin left for buttons except the first one.\n- Media queries adjust the height, font size, margin top, and margin left for screens with a maximum width of $mantine-breakpoint-xs.",
    "input": "",
    "output": ".wrapper {\n  position: relative;\n  padding-top: 120px;\n  padding-bottom: 80px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding-top: 80px;\n    padding-bottom: 60px;\n  }\n}\n\n.inner {\n  position: relative;\n  z-index: 1;\n}\n\n.dots {\n  position: absolute;\n  color: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    display: none;\n  }\n}\n\n.dotsLeft {\n  left: 0;\n  top: 0;\n}\n\n.title {\n  text-align: center;\n  font-weight: 800;\n  font-size: 40px;\n  letter-spacing: -1px;\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  margin-bottom: var(--mantine-spacing-xs);\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    font-size: 28px;\n    text-align: left;\n  }\n}\n\n.highlight {\n  color: light-dark(var(--mantine-color-blue-6), var(--mantine-color-blue-4));\n}\n\n.description {\n  text-align: center;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    text-align: left;\n    font-size: var(--mantine-font-size-md);\n  }\n}\n\n.controls {\n  margin-top: var(--mantine-spacing-lg);\n  display: flex;\n  justify-content: center;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.control {\n  &:not(:first-of-type) {\n    margin-left: var(--mantine-spacing-md);\n  }\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    height: 42px;\n    font-size: var(--mantine-font-size-md);\n\n    &:not(:first-of-type) {\n      margin-top: var(--mantine-spacing-md);\n      margin-left: 0;\n    }\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you provided is a React component file named `HeroText.jsx`. It appears to be part of a React application that uses the `StoryWrapper` component to render a hero text section.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper` is imported from the `StoryWrapper` component in the `components/StoryWrapper` folder.\n    * `attributes.json` is imported as a JSON file.\n    * `HeroText` is imported as a component.\n\n* **Component Definition:**\n    * The `export default` statement defines the component's title as `HeroText`.\n\n* **Usage Function:**\n    * The `Usage` function is exported as part of the component.\n    * It renders a `StoryWrapper` component with the following props:\n        * `attributes`: The `attributes.json` file is passed as an attribute.\n        * `component`: The `HeroText` component is passed as the component prop.\n\n**Purpose:**\n\nThe `HeroText.jsx` file likely serves the following purposes:\n\n* To display a hero text section on a web page.\n* To provide additional information or content within the hero text.\n* To enhance the user experience and engage visitors.\n\n**Usage:**\n\nThe `Usage` function can be used to render the hero text section in a React application. The `attributes.json` file likely contains configuration settings for the hero text, such as the text content, font style, and colors.\n\n**Additional Notes:**\n\n* The `HeroText` component may render the hero text based on the attributes specified in the `attributes.json` file.\n* The `StoryWrapper` component may provide additional functionality or styling to the hero text section.\n* The specific configuration of the hero text and the `attributes.json` file will determine the appearance and behavior of the hero text section.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroText } from './HeroText';\n\nexport default { title: 'HeroText' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroText} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet is a React functional component named `HeroText` that represents a hero section of a website. It aims to showcase the benefits of automated AI-powered code reviews for software development teams.\n\n**Functionality:**\n\nThe component consists of the following elements:\n\n**1. Container:**\n- A `Container` component with a fixed width of 1400 pixels.\n- It provides a padded and centered layout for the hero content.\n\n**2. Dots:**\n- Four `Dots` components positioned at different corners of the container.\n- Each dot represents a decorative element.\n\n**3. Inner Content:**\n- A nested `div` with a class name `classes.inner`.\n- This element contains the primary hero text and call-to-actions.\n\n**4. Title:**\n- A `Title` component with the text \"Automated AI code reviews for any stack.\"\n- It uses a specific CSS class `classes.title` for styling.\n\n**5. Highlight:**\n- A `Text` component with the text \"code reviews\" inside a `<span>` element.\n- It has a specific CSS class `classes.highlight` for styling and provides emphasis.\n\n**6. Description:**\n- A `Text` component with the text \"Build more reliable software with AI companion. AI is also trained to detect lazy developers who do nothing and just complain on Twitter.\"\n- It is styled with a light gray color (`dimmed`).\n\n**7. Controls:**\n- Two `Button` components:\n    - One for booking a demo with the text \"Book a demo\"\n    - One for purchasing a license with the text \"Purchase a license\"\n- They are styled with specific CSS classes `classes.control`.\n\n**Overall Function:**\n\nThe `HeroText` component presents a visually appealing and informative hero section. It highlights the benefits of AI-powered code reviews, encourages users to take action, and provides clear call-to-actions.\n\n**Additional Notes:**\n\n- The `HeroText.module.css` file likely contains CSS styles for the different components.\n- The `@mantine/core` library provides the necessary components for the layout and styling.\n- The `Dots` component may be a custom component or a third-party library.",
    "input": "",
    "output": "import { Button, Container, Text, Title } from '@mantine/core';\nimport { Dots } from './Dots';\nimport classes from './HeroText.module.css';\n\nexport function HeroText() {\n  return (\n    <Container className={classes.wrapper} size={1400}>\n      <Dots className={classes.dots} style={{ left: 0, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 60, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 0, top: 140 }} />\n      <Dots className={classes.dots} style={{ right: 0, top: 60 }} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI{' '}\n          <Text component=\"span\" className={classes.highlight} inherit>\n            code reviews\n          </Text>{' '}\n          for any stack\n        </Title>\n\n        <Container p={0} size={600}>\n          <Text size=\"lg\" c=\"dimmed\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} size=\"lg\" variant=\"default\" color=\"gray\">\n            Book a demo\n          </Button>\n          <Button className={classes.control} size=\"lg\">\n            Purchase a license\n          </Button>\n        </div>\n      </div>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file provided describes a configuration for a hero section with gradient text. It specifies the title, category, responsiveness, and canvas layout for a design element.\n\n**Title:**\n\n- `title`: Hero section with gradient text\n\n**Category:**\n\n- `category`: hero\n\n**Responsiveness:**\n\n- `responsive`: true\n\n**Canvas Layout:**\n\n- `canvas`:\n    - `center`: false\n\n**Properties:**\n\n- **title:** The title of the hero section is \"Hero section with gradient text\".\n- **category:** The category of the hero section is \"hero\".\n- **responsive:** Indicates that the hero section is responsive and will adjust its layout based on different screen sizes.\n- **canvas:**\n    - **center:** Specifies that the hero section should not be centered within the canvas.\n\n**Purpose:**\n\nThis JSON file provides a configuration for a hero section with gradient text. It includes the necessary information to render the design element, such as its title, category, responsiveness, and canvas layout.\n\n**Additional Notes:**\n\n- The `canvas` property specifies the layout of the hero section within the canvas. In this case, `center: false` indicates that the section should not be centered.\n- The `responsive` property ensures that the hero section adjusts its size and layout based on different screen sizes.\n- The `category` property helps categorize the hero section for easy identification and management.",
    "input": "",
    "output": "{\n  \"title\": \"Hero section with gradient text\",\n  \"category\": \"hero\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a section of a web page. It is likely used to create a landing page or a section within a website.\n\n**Functionality:**\n\nThe file defines the following styles for different elements:\n\n**1. .wrapper:**\n- Positioned relatively\n- Box-sizing set to border-box\n- Background color set using the `light-dark()` function, which automatically chooses between white or dark-8 based on the current theme.\n\n**2. .inner:**\n- Positioned relatively\n- Padding set to 200px top and bottom\n- Padding adjusted for smaller screens (max-width $mantine-breakpoint-sm) to be 80px top and bottom.\n\n**3. .title:**\n- Font family set to Outfit and the default mantine font family\n- Font size set to 62px\n- Font weight set to 500\n- Line height set to 1.1\n- Margin and padding set to 0\n- Color set using the `light-dark()` function\n\n**4. .description:**\n- Margin top set to var(--mantine-spacing-xl)\n- Font size set to 24px\n- Font size adjusted for smaller screens to be 18px.\n\n**5. .controls:**\n- Margin top set to calc(var(--mantine-spacing-xl) * 2)\n- Margin top adjusted for smaller screens to be var(--mantine-spacing-xl)\n\n**6. .control:**\n- Height set to 54px\n- Padding set to 38px left and right\n- Flex property set to 1 for smaller screens (max-width $mantine-breakpoint-sm)\n\n**Overall Effect:**\n\nThe CSS file creates a visually appealing section with a title, description, and buttons. The styles are responsive and adapt to different screen sizes. The use of the `light-dark()` function ensures that the background color changes automatically based on the user's theme preferences.",
    "input": "",
    "output": ".wrapper {\n  position: relative;\n  box-sizing: border-box;\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n}\n\n.inner {\n  position: relative;\n  padding-top: 200px;\n  padding-bottom: 120px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding-bottom: 80px;\n    padding-top: 80px;\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  font-size: 62px;\n  font-weight: 500;\n  line-height: 1.1;\n  margin: 0;\n  padding: 0;\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 42px;\n    line-height: 1.2;\n  }\n}\n\n.description {\n  margin-top: var(--mantine-spacing-xl);\n  font-size: 24px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 18px;\n  }\n}\n\n.controls {\n  margin-top: calc(var(--mantine-spacing-xl) * 2);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    margin-top: var(--mantine-spacing-xl);\n  }\n}\n\n.control {\n  height: 54px;\n  padding-left: 38px;\n  padding-right: 38px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    height: 54px;\n    padding-left: 18px;\n    padding-right: 18px;\n    flex: 1;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** HeroTitle.jsx\n\n**Purpose:**\n\nThe HeroTitle.jsx file is a React component that serves as the title of a story. It uses the StoryWrapper component to render a title with associated attributes.\n\n**Components:**\n\n* **StoryWrapper:** A reusable component that takes in attributes and a component to render. It provides additional styling and functionality.\n* **HeroTitle:** The component that renders the title.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroTitle } from './HeroTitle';\n\nexport default { title: 'HeroTitle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroTitle} />;\n}\n```\n\n**Explanation:**\n\n* **Imports:**\n    * `StoryWrapper` is imported from the `StoryWrapper` component.\n    * `attributes.json` is imported as an object containing attributes for the title.\n    * `HeroTitle` is imported as a component.\n\n* **Default Export:**\n    * An object is exported with the title `HeroTitle`.\n\n* **Usage Function:**\n    * A `Usage` function is exported.\n    * It returns a `StoryWrapper` component with the following props:\n        * `attributes`: The `attributes` object imported from `attributes.json`.\n        * `component`: The `HeroTitle` component.\n\n**How the Component Works:**\n\n1. The `StoryWrapper` component receives the `attributes` prop.\n2. It renders the `HeroTitle` component with the specified attributes.\n3. The `HeroTitle` component displays the title text with the applied attributes.\n\n**Purpose of attributes.json:**\n\nThe `attributes.json` file likely contains JSON data that defines the styling and formatting of the title. This data can include font size, color, alignment, and other CSS properties.\n\n**Overall Function:**\n\nThe HeroTitle.jsx file creates a reusable component that renders a title with specific attributes. It uses the StoryWrapper component to provide additional styling and functionality to the title.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { HeroTitle } from './HeroTitle';\n\nexport default { title: 'HeroTitle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={HeroTitle} />;\n}\n"
  },
  {
    "instruction": "**File Name:** HeroTitle.js\n\n**Description:**\n\nThe `HeroTitle.js` file is a React component that serves as the hero section of a website or application. It is responsible for displaying a title, description, and call-to-actions.\n\n**Code Breakdown:**\n\n* **Imports:**\n    * The component imports necessary Mantine UI components and icons.\n* **Function:**\n    * The `HeroTitle()` function is the main component.\n* **JSX:**\n    * The component returns JSX code that defines the hero section layout.\n    * It includes:\n        * A `Container` element with a fixed width of 700 pixels.\n        * A `h1` element with a title that includes a gradient-colored text segment.\n        * A `Text` element with a description.\n        * A `Group` element containing two buttons:\n            * A gradient-colored \"Get started\" button.\n            * An \"GitHub\" button with a GitHub icon.\n* **CSS Classes:**\n    * The `classes` object contains CSS classes used to style the components.\n\n**Purpose:**\n\n* To showcase the key features and benefits of the Mantine library.\n* To provide clear call-to-actions for users to get started or explore the code on GitHub.\n\n**Benefits:**\n\n* **Visually appealing:** The hero section uses a combination of text, gradients, and icons to create an engaging user experience.\n* **Informative:** It provides clear and concise information about the Mantine library.\n* **Actionable:** It includes prominent call-to-actions that guide users towards the desired actions.\n\n**Usage:**\n\nThis component can be used in any React application where a hero section is needed. It can be rendered by importing the `HeroTitle` component into the desired component and calling it.\n\n**Example:**\n\n```\n<HeroTitle />\n```",
    "input": "",
    "output": "import { Button, Container, Group, Text } from '@mantine/core';\nimport { GithubIcon } from '@mantinex/dev-icons';\nimport classes from './HeroTitle.module.css';\n\nexport function HeroTitle() {\n  return (\n    <div className={classes.wrapper}>\n      <Container size={700} className={classes.inner}>\n        <h1 className={classes.title}>\n          A{' '}\n          <Text component=\"span\" variant=\"gradient\" gradient={{ from: 'blue', to: 'cyan' }} inherit>\n            fully featured\n          </Text>{' '}\n          React components and hooks library\n        </h1>\n\n        <Text className={classes.description} color=\"dimmed\">\n          Build fully functional accessible web applications with ease – Mantine includes more than\n          100 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Group className={classes.controls}>\n          <Button\n            size=\"xl\"\n            className={classes.control}\n            variant=\"gradient\"\n            gradient={{ from: 'blue', to: 'cyan' }}\n          >\n            Get started\n          </Button>\n\n          <Button\n            component=\"a\"\n            href=\"https://github.com/mantinedev/mantine\"\n            size=\"xl\"\n            variant=\"default\"\n            className={classes.control}\n            leftSection={<GithubIcon size={20} />}\n          >\n            GitHub\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a banner component. It defines the layout, style, and functionality of the banner.\n\n**Properties:**\n\n**title:**\n- The title of the banner. In this case, it is \"Banner with image and action\".\n\n**category:**\n- The category of the banner. In this case, it is \"banners\".\n\n**canvas:**\n- An object that specifies the canvas settings for the banner.\n\n**center:**\n- A boolean value that determines if the banner should be centered horizontally. In this case, it is set to `true`.\n\n**maxWidth:**\n- The maximum width of the banner in pixels. In this case, it is set to `480`.\n\n**Usage:**\n\nThe configuration file defines the following elements for the banner:\n\n- **Centering:** The banner will be centered horizontally within its container.\n- **Maximum Width:** The banner's maximum width will be 480 pixels.\n\n**Purpose:**\n\nThe purpose of this configuration file is to specify the layout and style of a banner component that includes an image and an action button. The banner can be used to display important announcements, promotions, or other information.\n\n**Additional Notes:**\n\n- The banner image and action button are not included in the configuration file. They would need to be added separately.\n- The canvas settings can be customized to adjust the size, position, and layout of the banner.\n- The file name and location of the configuration file may vary depending on the specific application or framework being used.",
    "input": "",
    "output": "{\n  \"title\": \"Banner with image and action\",\n  \"category\": \"banners\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 480\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS file that styles a web page or component. It defines a set of CSS classes that are used to format the elements on the page.\n\n**Purpose:**\n\nThe primary purpose of this CSS file is to create a visually appealing and informative card layout. The card displays an image, title, description, and an action button.\n\n**Structure:**\n\nThe CSS file consists of four major CSS classes:\n\n- `.card`: Defines the overall style of the card, including its height, background image, and positioning.\n- `.content`: Styles the content area within the card, including its padding, positioning, and z-index.\n- `.action`: Styles the action button, including its positioning and z-index.\n- `.title`: Styles the title text, including its color and margin.\n- `.description`: Styles the description text, including its color and maximum width.\n- `.overlay`: Styles an overlay element that provides a gradient background over the image.\n\n**Key Features:**\n\n- **Responsive design:** The card scales to different screen sizes and devices.\n- **Visually appealing layout:** The card features an image, title, description, and an action button.\n- **Gradient overlay:** An overlay with a gradient background is applied to the card to enhance its visual appeal.\n- **Customizable colors and spacing:** The style of the card can be customized by changing the values of the CSS variables.\n\n**Usage:**\n\nThe CSS classes can be used in a HTML file to create an instance of the card. The HTML would typically include elements such as `h2`, `p`, and a button.\n\n**Example:**\n\n```html\n<div class=\"card\">\n  <div class=\"overlay\"></div>\n  <div class=\"content\">\n    <h2 class=\"title\">Card Title</h2>\n    <p class=\"description\">Card description goes here.</p>\n  </div>\n  <button class=\"action\">Action Button</button>\n</div>\n```\n\n**Conclusion:**\n\nThe CSS file provides a convenient and versatile way to create visually appealing and functional card layouts. It can be easily customized to suit different needs and preferences.",
    "input": "",
    "output": ".card {\n  height: 240px;\n  background-size: cover;\n  background-position: center;\n  background-image: url(https://images.unsplash.com/photo-1596394516093-501ba68a0ba6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80);\n}\n\n.content {\n  position: absolute;\n  inset: 0;\n  padding: var(--mantine-spacing-xl);\n  z-index: 1;\n}\n\n.action {\n  position: absolute;\n  bottom: var(--mantine-spacing-xl);\n  right: var(--mantine-spacing-xl);\n}\n\n.title {\n  color: var(--mantine-color-white);\n  margin-bottom: calc(var(--mantine-spacing-xs) / 2);\n}\n\n.description {\n  color: var(--mantine-color-white);\n  max-width: 220px;\n}\n\n.overlay {\n  background-color: transparent;\n  background-image: linear-gradient(\n    105deg,\n    var(--mantine-color-black) 20%,\n    #312f2f 50%,\n    var(--mantine-color-gray-4) 100%\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** ImageActionBanner.js\n\n**File Function:**\n\nThe ImageActionBanner.js file is a React component that represents an image action banner. It is part of a storybook application that demonstrates and showcases the component.\n\n**Components:**\n\n* **StoryWrapper:** A custom React component that wraps the ImageActionBanner component and provides additional context and configuration.\n* **ImageActionBanner:** The main component that displays the image action banner.\n\n**Import Statements:**\n\n* `StoryWrapper` is imported from the `StoryWrapper` component located in the `components/StoryWrapper` directory.\n* `attributes.json` is imported as a JSON object that provides the attributes for the ImageActionBanner component.\n* `ImageActionBanner` is imported as a React component.\n\n**Export Statements:**\n\n* `export default { title: 'ImageActionBanner' };` exports an object with the title `ImageActionBanner`. This title is used to identify the component in the storybook documentation.\n* `export function Usage() {...}` exports a function called `Usage`. This function is responsible for rendering the ImageActionBanner component in the storybook.\n\n**Usage Function:**\n\nThe `Usage` function creates an instance of the `StoryWrapper` component with the following props:\n\n* `attributes`: The `attributes.json` object, which provides the attributes for the ImageActionBanner component.\n* `component`: The `ImageActionBanner` component.\n\n**Storybook Function:**\n\nThe `StoryWrapper` component provides additional context and configuration for the ImageActionBanner component, such as:\n\n* Setting the title of the component.\n* Providing a description of the component.\n* Creating a sandbox environment where the component can be interacted with.\n\n**Purpose:**\n\nThe ImageActionBanner.js file is designed to:\n\n* Showcase the ImageActionBanner component.\n* Demonstrate how to use the component with Storybook.\n* Provide an interactive environment for testing and debugging the component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ImageActionBanner } from './ImageActionBanner';\n\nexport default { title: 'ImageActionBanner' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ImageActionBanner} />;\n}\n"
  },
  {
    "instruction": "**ImageActionBanner.js**\n\nThis file is a React functional component that renders an image action banner. The banner displays a promotional message with a call-to-action button.\n\n**Components Used:**\n\n* `Card`: A card component from the Mantine library, which provides a container with rounded corners and a shadow.\n* `Overlay`: An overlay component that darkens the background of the card with an opacity of 55%.\n* `Text`: A text component from the Mantine library, used to display the title and description.\n* `Button`: A button component from the Mantine library, used to provide a call-to-action.\n\n**CSS Classes:**\n\nThe file imports a CSS module named `ImageActionBanner.module.css`. This module defines styles for the various components used in the banner.\n\n**Function Logic:**\n\nThe `ImageActionBanner()` function renders the following components:\n\n* A `Card` with rounded corners and a shadow.\n* An `Overlay` that darkens the background with an opacity of 55%.\n* A `div` containing the banner content.\n* A `Text` component with a large font size and bold weight, displaying the title \"Plan & save\".\n* A `Text` component with a smaller font size, displaying the promotional description.\n* A `Button` with a white background and a dark color, with the text \"Book now\".\n\n**Purpose:**\n\nThe purpose of this component is to promote a special offer at Fifth Season Hotels. It provides a visually appealing and informative banner that encourages users to book their stay.\n\n**Usage:**\n\nThe `ImageActionBanner()` component can be used to display the promotional banner on a website or web application. It can be embedded within other components or sections as needed.\n\n**Additional Notes:**\n\n* The specific styles and design of the banner can be customized by modifying the CSS module.\n* The call-to-action button can be linked to a booking page or other relevant destination.\n* The promotional message and offer details can be updated as needed.",
    "input": "",
    "output": "import { Button, Card, Overlay, Text } from '@mantine/core';\nimport classes from './ImageActionBanner.module.css';\n\nexport function ImageActionBanner() {\n  return (\n    <Card radius=\"md\" className={classes.card}>\n      <Overlay className={classes.overlay} opacity={0.55} zIndex={0} />\n\n      <div className={classes.content}>\n        <Text size=\"lg\" fw={700} className={classes.title}>\n          Plan & save\n        </Text>\n\n        <Text size=\"sm\" className={classes.description}>\n          Save up to 25% at Fifth Season Hotels in Europe, the Middle East, Africa and Asia Pacific\n        </Text>\n\n        <Button className={classes.action} variant=\"white\" color=\"dark\" size=\"xs\">\n          Book now\n        </Button>\n      </div>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the layout and settings for a card with an image as its background. It is part of a content management system or website framework.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with image as background\",\n  \"category\": \"article-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Fields:**\n\n* **title:** The title of the card, which is displayed as a header.\n* **category:** The category of the card, which is used for organizational purposes. In this case, it is set to \"article-cards\".\n* **canvas:** An object that defines the layout of the card.\n    * **center:** A boolean value that specifies whether the content should be centered within the card. In this case, it is set to true.\n    * **maxWidth:** An integer value that specifies the maximum width of the card. In this case, it is set to 320.\n\n**Purpose:**\n\nThe purpose of this file is to define the layout and settings for a card that will be displayed on a website or content management system. The card will have an image as its background and will be centered within its container.\n\n**Usage:**\n\nThis file can be used to create a new card in a content management system or website framework. The card can be added to a page or blog post and will be rendered according to the settings specified in the JSON file.\n\n**Additional Notes:**\n\n* The image for the card should be included in the content management system or website framework.\n* The canvas settings can be customized to adjust the layout and settings of the card as needed.\n* The category field can be used to group cards together for organizational purposes.",
    "input": "",
    "output": "{\n  \"title\": \"Card with image as background\",\n  \"category\": \"article-cards\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS code snippet you provided defines the style of a card element used in a user interface. It creates a visually appealing and informative card layout with a blurred background image, title, body text, and author information.\n\n**Key Features:**\n\n- **Card Container:**\n    - Positioned relatively to allow for absolute positioning of child elements.\n    - Height: 280px.\n    - Background color: Light gray or dark gray, depending on the theme.\n\n- **Image:**\n    - Positioned absolutely to fill the entire card area.\n    - Background size: Cover to ensure the image fills the entire container.\n    - Transition: Transforms the image on hover with a scale of 1.03.\n\n- **Overlay:**\n    - Positioned absolutely over the image.\n    - Top: 20% to create a fading effect.\n    - Background image: A linear gradient with transparency at the top and a semi-transparent black at the bottom.\n\n- **Content:**\n    - Positioned relative to ensure it appears above the overlay.\n    - Flexbox layout to vertically align content at the bottom.\n    - Height: 100% to fill the card area.\n\n- **Title:**\n    - White text color.\n    - Margin bottom: 5px.\n\n- **Body Text:**\n    - Dark gray text color.\n    - Margin left: 7px.\n\n- **Author:**\n    - Dark gray text color.\n\n**Usage:**\n\nThe CSS code can be used to create individual cards within a collection or grid layout. Each card would have its own image, title, body text, and author information.\n\n**Hover Effect:**\n\nWhen a user hovers over a card, the image transforms with a slight zoom effect, providing a visual cue for interactivity.\n\n**Theme Variations:**\n\nThe background color of the card can be adjusted based on the theme or design preferences.\n\n**Conclusion:**\n\nThe CSS code snippet provides a versatile and aesthetically pleasing template for creating user interface cards. It includes all the necessary elements to display title, body text, author information, and an image with a blurred background.",
    "input": "",
    "output": ".card {\n  position: relative;\n  height: 280px;\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n\n  @mixin hover {\n    & .image {\n      transform: scale(1.03);\n    }\n  }\n}\n\n.image {\n  position: absolute;\n  inset: 0;\n  background-size: cover;\n  transition: transform 500ms ease;\n}\n\n.overlay {\n  position: absolute;\n  top: 20%;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.85) 90%);\n}\n\n.content {\n  height: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  z-index: 1;\n}\n\n.title {\n  color: var(--mantine-color-white);\n  margin-bottom: 5px;\n}\n\n.bodyText {\n  color: var(--mantine-color-dark-2);\n  margin-left: 7px;\n}\n\n.author {\n  color: var(--mantine-color-dark-2);\n}\n"
  },
  {
    "instruction": "**File Name:** ImageCard.jsx\n\n**Purpose:**\n\nThe ImageCard.jsx file appears to be a React component that represents an image card. It is responsible for displaying an image and associated attributes.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that provides a convenient way to render the ImageCard component with predefined attributes.\n* **ImageCard:** The main component that renders the image and attributes.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains the attributes for the image card, such as title, description, and image source.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n* Imports the necessary components and data from other files.\n* `StoryWrapper` is a custom component that provides a convenient way to render the `ImageCard` component with predefined attributes.\n* `attributes.json` contains the attributes for the image card.\n* `ImageCard` is the main component that renders the image and attributes.\n\n**2. Export Statements:**\n\n* Exports a `title` property with the value `ImageCard`.\n* Exports a `Usage()` function that renders the `StoryWrapper` component with the `ImageCard` component and predefined attributes from `attributes.json`.\n\n**Functionality:**\n\n* The `ImageCard` component receives attributes as props, including title, description, and image source.\n* It renders an image with the specified source and displays the title and description.\n* The `StoryWrapper` component provides a convenient way to render the `ImageCard` component with predefined attributes, simplifying the development process.\n\n**Usage:**\n\nThe `Usage()` function is responsible for rendering the `StoryWrapper` component with the `ImageCard` component and predefined attributes. This allows developers to easily integrate the image card component into their applications.\n\n**Conclusion:**\n\nThe ImageCard.jsx file is a React component that represents an image card. It provides a convenient way to display an image with associated attributes, such as title, description, and image source. The `StoryWrapper` component simplifies the development process by providing predefined attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ImageCard } from './ImageCard';\n\nexport default { title: 'ImageCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ImageCard} />;\n}\n"
  },
  {
    "instruction": "**ImageCard.js**\n\nThis file is a React functional component that renders an image card with a title, author, and engagement metrics. It utilizes the Mantine and Tabler React libraries for styling and icons.\n\n**Functionality:**\n\n- **Imports:**\n    - IconEye and IconMessageCircle icons from the Tabler React library.\n    - Card, Center, Group, Text, and useMantineTheme components from the Mantine library.\n    - CSS styles defined in the ImageCard.module.css file.\n\n- **Component:**\n    - Renders a Card component with the following features:\n        - Padding: large\n        - Shadow: large\n        - Border radius: medium\n        - Component: a (hyperlink)\n        - Target: _blank (opens the linked URL in a new tab)\n        - Link: https://mantine.dev/\n\n- **Image:**\n    - Displays an image with the following properties:\n        - Background image set to a landscape image from Unsplash.\n        - Overlayed with a translucent black overlay.\n\n- **Content:**\n    - Title: Journey to Swiss Alps\n    - Author: Robert Gluesticker\n    - Engagement metrics:\n        - Views: 7847\n        - Comments: 5\n\n- **Icons:**\n    - Eye icon for views\n    - Message circle icon for comments\n\n- **Styling:**\n    - Uses CSS classes from the ImageCard.module.css file for styling the card, image, overlay, content, title, author, and engagement metrics.\n\n**Purpose:**\n\nThe purpose of this component is to display an image card with information about a travel destination, including a title, author, views, and comments. It can be used on a website or blog to showcase travel experiences or provide information about popular destinations.\n\n**Additional Notes:**\n\n- The image and author details can be customized as needed.\n- The engagement metrics can be updated dynamically based on user interactions.\n- The component can be embedded within other React components to create a more complex layout.",
    "input": "",
    "output": "import { IconEye, IconMessageCircle } from '@tabler/icons-react';\nimport { Card, Center, Group, Text, useMantineTheme } from '@mantine/core';\nimport classes from './ImageCard.module.css';\n\nexport function ImageCard() {\n  const theme = useMantineTheme();\n\n  return (\n    <Card\n      p=\"lg\"\n      shadow=\"lg\"\n      className={classes.card}\n      radius=\"md\"\n      component=\"a\"\n      href=\"https://mantine.dev/\"\n      target=\"_blank\"\n    >\n      <div\n        className={classes.image}\n        style={{\n          backgroundImage:\n            'url(https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80)',\n        }}\n      />\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <div>\n          <Text size=\"lg\" className={classes.title} fw={500}>\n            Journey to Swiss Alps\n          </Text>\n\n          <Group justify=\"space-between\" gap=\"xs\">\n            <Text size=\"sm\" className={classes.author}>\n              Robert Gluesticker\n            </Text>\n\n            <Group gap=\"lg\">\n              <Center>\n                <IconEye size={16} stroke={1.5} color={theme.colors.dark[2]} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  7847\n                </Text>\n              </Center>\n              <Center>\n                <IconMessageCircle size={16} stroke={1.5} color={theme.colors.dark[2]} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  5\n                </Text>\n              </Center>\n            </Group>\n          </Group>\n        </div>\n      </div>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user interface element named \"Checkbox with image\". It is part of a category called \"inputs\" and is used to create a checkbox with an associated image.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Checkbox with image\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1080\n  }\n}\n```\n\n**Properties:**\n\n* **title:** Specifies the title of the checkbox. In this case, it is \"Checkbox with image\".\n* **category:** Indicates the category to which the element belongs, which is \"inputs\".\n* **canvas:** An object that defines the layout and configuration of the element.\n\n**canvas Object:**\n\n* **center:** Set to `true`, indicating that the checkbox should be centered horizontally within its container.\n* **maxWidth:** Specifies the maximum width of the checkbox, with a value of 1080.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a checkbox with an associated image. The checkbox can be used to allow users to make selections or preferences.\n\n**Usage:**\n\nThis file can be used to create a checkbox with an image in a user interface. The checkbox can be added to a form or other interactive element.\n\n**Additional Notes:**\n\n* The image associated with the checkbox is not specified in this file. It would need to be added separately.\n* The `center` property ensures that the checkbox is positioned correctly within its container.\n* The `maxWidth` property ensures that the checkbox does not exceed a certain width.",
    "input": "",
    "output": "{\n  \"title\": \"Checkbox with image\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 1080\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines the styles for a button and its corresponding body element.\n\n**Button Styles:**\n\n- The `button` class defines the styles for a button element.\n- It is a flex container with centered alignment.\n- It has a width of 100%.\n- It has a transition property for smooth color changes (background-color and border-color) over a duration of 150 milliseconds.\n- It has a border-radius of `--mantine-radius-sm`.\n- It has padding of `--mantine-spacing-sm`.\n- It has a border with a width of 1px, a color determined by the `light-dark()` function based on the current theme mode (light or dark).\n- The background-color is also determined by the `light-dark()` function.\n- If the button has the `data-checked` attribute, it changes its border-color to `--mantine-color-blue-filled` and its background-color to `--mantine-color-blue-light`.\n\n**Body Styles:**\n\n- The `body` class defines the styles for the body element.\n- It takes up the remaining available space by setting its `flex` property to `1`.\n- It has a left margin of `--mantine-spacing-md`.\n\n**Purpose:**\n\nThe CSS file styles a button element and its corresponding body element. The button is typically used to trigger an action, while the body provides additional content or information.\n\n**Additional Notes:**\n\n- The `--mantine-color-*` variables represent the primary color palette of the Mantine UI framework.\n- The `light-dark()` function determines the appropriate color based on the current theme mode (light or dark).\n- The transition property allows for smooth visual transitions when the button is checked or unchecked.",
    "input": "",
    "output": ".button {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  transition:\n    background-color 150ms ease,\n    border-color 150ms ease;\n  border-radius: var(--mantine-radius-sm);\n  padding: var(--mantine-spacing-sm);\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-8));\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-8));\n\n  &[data-checked] {\n    border-color: var(--mantine-color-blue-filled);\n    background-color: var(--mantine-color-blue-light);\n  }\n}\n\n.body {\n  flex: 1;\n  margin-left: var(--mantine-spacing-md);\n}\n"
  },
  {
    "instruction": "**File Name:** ImageCheckboxes.jsx\n\n**Purpose:**\n\nThe `ImageCheckboxes.jsx` file is a React component that provides a user interface element for selecting and checking images. It serves as a showcase for the `StoryWrapper` component and demonstrates how it can be used to render a specific component with its associated attributes.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the `ImageCheckboxes` component and provides additional functionality, such as rendering attributes and handling user interactions.\n* **ImageCheckboxes:** The main component that displays the image selection interface.\n\n**Key Features:**\n\n* Imports the `StoryWrapper` and `ImageCheckboxes` components from separate files.\n* Defines the component title as \"ImageCheckboxes\".\n* Creates a `Usage()` function that renders the `StoryWrapper` component with the following parameters:\n    * `attributes`: A JSON object containing attributes to be rendered with the `ImageCheckboxes` component.\n    * `component`: The `ImageCheckboxes` component itself.\n\n**Usage:**\n\nThe `Usage()` function renders the `StoryWrapper` component, which in turn displays the `ImageCheckboxes` component with the specified attributes. This allows users to interact with the image selection interface.\n\n**Additional Notes:**\n\n* The `attributes.json` file likely contains configuration data for the `ImageCheckboxes` component, such as the images to display and their corresponding labels.\n* The `ImageCheckboxes` component likely handles user interactions with the images, such as checking and unchecking them.\n* The `StoryWrapper` component is responsible for rendering the `ImageCheckboxes` component and its attributes, as well as providing additional functionality as needed.\n\n**Conclusion:**\n\nThe `ImageCheckboxes.jsx` file is a demonstration of how the `StoryWrapper` component can be used to render a specific component with its associated attributes. It provides a user interface element for selecting and checking images, and serves as a showcase for the overall functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ImageCheckboxes } from './ImageCheckboxes';\n\nexport default { title: 'ImageCheckboxes' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ImageCheckboxes} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ImageCheckboxes.jsx\n\n**Purpose:**\n\nThe `ImageCheckboxes.jsx` file is a React component that creates a grid of image checkboxes with descriptions and titles. Users can click on an image checkbox to toggle its state (checked/unchecked).\n\n**Description:**\n\n**ImageCheckbox Component:**\n\n* **Props:**\n    * `checked`: Whether the checkbox is checked.\n    * `defaultChecked`: Whether the checkbox is checked by default.\n    * `onChange`: Callback function that is called when the checkbox state changes.\n    * `title`: The title of the checkbox.\n    * `description`: The description of the checkbox.\n    * `image`: The path to the image to be displayed.\n\n* **Functionality:**\n    * Uses the `useUncontrolled` hook to manage the checkbox state.\n    * Renders an `UnstyledButton` with an image, description, and title.\n    * Includes a checkbox that is linked to the `value` state.\n    * Changes the checkbox state when the button is clicked.\n\n**ImageCheckboxes Component:**\n\n* **Purpose:**\n    * Renders a grid of `ImageCheckbox` components.\n\n* **Data:**\n    * Uses mock data to create the checkboxes.\n\n* **Layout:**\n    * Uses a `SimpleGrid` component to display the checkboxes in a grid layout.\n\n**Features:**\n\n* Each checkbox has an image, description, and title.\n* Users can click on an image checkbox to toggle its state.\n* The checkbox state is managed using a controlled component pattern.\n\n**Usage:**\n\nTo use the `ImageCheckboxes` component, simply import it into your React application and render it.\n\n**Code Example:**\n\n```jsx\n<ImageCheckboxes />\n```\n\n**Additional Notes:**\n\n* The `icons.sea`, `icons.city`, `icons.mountain`, and `icons.winter` variables represent the paths to the images used in the checkboxes.\n* The `ImageCheckboxes.module.css` file likely contains styles for the component.\n* The `SimpleGrid` component from the `@mantine/core` library provides a convenient way to create a grid layout.",
    "input": "",
    "output": "import { Checkbox, Image, SimpleGrid, Text, UnstyledButton } from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport icons from './icons';\nimport classes from './ImageCheckboxes.module.css';\n\ninterface ImageCheckboxProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?: (checked: boolean) => void;\n  title: string;\n  description: string;\n  image: string;\n}\n\nexport function ImageCheckbox({\n  checked,\n  defaultChecked,\n  onChange,\n  title,\n  description,\n  className,\n  image,\n  ...others\n}: ImageCheckboxProps & Omit<React.ComponentPropsWithoutRef<'button'>, keyof ImageCheckboxProps>) {\n  const [value, handleChange] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  return (\n    <UnstyledButton\n      {...others}\n      onClick={() => handleChange(!value)}\n      data-checked={value || undefined}\n      className={classes.button}\n    >\n      <Image src={image} alt={title} w={40} h={40} />\n\n      <div className={classes.body}>\n        <Text c=\"dimmed\" size=\"xs\" lh={1} mb={5}>\n          {description}\n        </Text>\n        <Text fw={500} size=\"sm\" lh={1}>\n          {title}\n        </Text>\n      </div>\n\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        styles={{ input: { cursor: 'pointer' } }}\n      />\n    </UnstyledButton>\n  );\n}\n\nconst mockdata = [\n  { description: 'Sun and sea', title: 'Beach vacation', image: icons.sea },\n  { description: 'Sightseeing', title: 'City trips', image: icons.city },\n  { description: 'Mountains', title: 'Hiking vacation', image: icons.mountain },\n  { description: 'Snow and ice', title: 'Winter vacation', image: icons.winter },\n];\n\nexport function ImageCheckboxes() {\n  const items = mockdata.map((item) => <ImageCheckbox {...item} key={item.title} />);\n  return <SimpleGrid cols={{ base: 1, sm: 2, md: 4 }}>{items}</SimpleGrid>;\n}\n"
  },
  {
    "instruction": "**File Name:** `images.js`\n\n**Purpose:**\n\nThe `images.js` file serves as a centralized resource file for importing and exporting image assets. It defines a JavaScript object containing references to four image files: `city.png`, `mountain.png`, `sea.png`, and `winter.png`.\n\n**Code Breakdown:**\n\n**1. Image Imports:**\n\n- The file begins by importing four image files located in the current directory:\n    - `city.png`\n    - `mountain.png`\n    - `sea.png`\n    - `winter.png`\n\n**2. Export Object:**\n\n- The `export default` statement defines an object with four properties:\n    - `city`: Points to the `src` property of the `city` image object.\n    - `mountain`: Points to the `src` property of the `mountain` image object.\n    - `sea`: Points to the `src` property of the `sea` image object.\n    - `winter`: Points to the `src` property of the `winter` image object.\n\n**Usage:**\n\nThe `images.js` file can be imported into other JavaScript files using the `import` statement. For example:\n\n```javascript\nimport images from './images.js';\n\nconsole.log(images.city); // Output: the path to the city.png image\n```\n\n**Purpose:**\n\nThe `images.js` file provides a convenient way to:\n\n- Organize image assets in a centralized location.\n- Export references to these images for use in other JavaScript files.\n- Avoid repeating the same image import statements in multiple files.\n\n**Benefits:**\n\n- Improved code organization and maintainability.\n- Reduced code duplication.\n- Easier access to image assets from other files.\n\n**Additional Notes:**\n\n- The `src` property of each image object contains the absolute path to the image file.\n- The file extension (`.png`) is included in the `src` value.\n- The image files are assumed to be located in the same directory as the `images.js` file.",
    "input": "",
    "output": "import city from './city.png';\nimport mountain from './mountain.png';\nimport sea from './sea.png';\nimport winter from './winter.png';\n\nexport default {\n  city: city.src,\n  mountain: mountain.src,\n  sea: sea.src,\n  winter: winter.src,\n};\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines the configuration for a user interface element. It represents an input element with a tooltip.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Inputs with tooltip\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** A string value that represents the title of the input element. In this case, it is \"Inputs with tooltip\".\n* **category:** A string value that specifies the category of the input element. In this case, it is \"inputs\".\n* **canvas:** An object that defines the canvas configuration for the input element.\n\n**Canvas Configuration:**\n\n* **center:** A boolean value that determines if the input element should be centered within the canvas. In this case, it is set to `true`.\n* **maxWidth:** A number value that specifies the maximum width of the input element. In this case, it is set to `420`.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure an input element with a tooltip. The input element will be displayed within a user interface with a title of \"Inputs with tooltip\" and will be categorized as an input element.\n\n**Usage:**\n\nThis JSON file can be used to create a user interface element with a tooltip in a JavaScript application. The configuration can be loaded and used to create the input element using a JavaScript library or framework.\n\n**Additional Notes:**\n\n* The tooltip can be used to provide additional information or help to users when they hover over the input element.\n* The `maxWidth` property can be used to ensure that the input element does not exceed a certain width.\n* The `center` property can be used to vertically center the input element within the canvas.",
    "input": "",
    "output": "{\n  \"title\": \"Inputs with tooltip\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file `InputTooltip.jsx` is a React component that implements an input tooltip. It provides a visual aid that displays helpful information when users hover over an input field.\n\n**Components:**\n\n* **StoryWrapper:** A reusable component that wraps the `InputTooltip` component and provides a set of attributes.\n* **InputTooltip:** The main component that renders the tooltip.\n\n**Import Statements:**\n\n* `StoryWrapper` is imported from the `StoryWrapper` component.\n* `attributes.json` is imported as a JSON object containing the attributes for the `InputTooltip`.\n* `InputTooltip` is imported from the current file.\n\n**Code Structure:**\n\n* **Default Export:** The file exports an object with a `title` property set to `InputTooltip`. This is used to display the component's title in a documentation or testing environment.\n* **Usage Function:** The `Usage` function is exported and returns a `StoryWrapper` component. This component sets the `attributes` prop to the imported `attributes.json` object and the `component` prop to the `InputTooltip` component.\n* **StoryWrapper:** The `StoryWrapper` component receives the `attributes` prop and passes it to the `InputTooltip` component. This allows the tooltip to be configured with specific attributes.\n\n**Purpose:**\n\nThe `InputTooltip` component provides a visual aid to help users understand the purpose of input fields. When users hover over an input field, a tooltip will appear with helpful information such as:\n\n* Placeholder text\n* Data validation rules\n* Input format\n\n**Benefits:**\n\n* Improved user experience by providing clear and helpful information.\n* Reduced confusion and frustration among users.\n* Enhanced accessibility by ensuring that input fields are clearly labeled and understood.\n\n**Usage:**\n\nTo use the `InputTooltip` component, import it into your React application and configure it with the necessary attributes. You can then render the component within your input fields to display the tooltip.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { InputTooltip } from './InputTooltip';\n\nexport default { title: 'InputTooltip' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={InputTooltip} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file `InputTooltip.js` is a React component that demonstrates the use of tooltips to provide additional information or validation feedback to users.\n\n**Components:**\n\n* **TooltipIcon:**\n    * Creates a text input field with an icon in the right section.\n    * When the user hovers over the icon, a tooltip appears with the message \"We store your data securely\".\n\n* **TooltipFocus:**\n    * Creates a password input field.\n    * When the user focuses on the input field, a tooltip appears with validation feedback based on the length of the password.\n\n**Functionality:**\n\n* The `TooltipIcon` component uses the `Tooltip` component from the `@mantine/core` library to create a tooltip that appears when the user hovers over the icon.\n* The `TooltipFocus` component uses the `Tooltip` component to create a tooltip that appears when the user focuses on the input field.\n* The tooltip content is dynamically determined based on the state of the component.\n\n**Key Features:**\n\n* **Hover-triggered tooltip:** The tooltip appears when the user hovers over the icon.\n* **Focus-triggered tooltip:** The tooltip appears when the user focuses on the input field.\n* **Validation feedback:** The tooltip provides validation feedback based on the input value.\n* **Customization:** The tooltip label, position, and transition can be customized.\n\n**Usage:**\n\nThe `InputTooltip` component can be used to enhance user experience by providing additional information or validation feedback.\n\n**Example:**\n\n```\n<InputTooltip />\n```\n\n**Conclusion:**\n\nThe `InputTooltip.js` file demonstrates how to use tooltips effectively to provide helpful and informative feedback to users. It highlights the ability to trigger tooltips based on user interactions (hover and focus) and to display dynamic content based on component state.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { IconInfoCircle } from '@tabler/icons-react';\nimport { Center, PasswordInput, Text, TextInput, Tooltip } from '@mantine/core';\n\nfunction TooltipIcon() {\n  const rightSection = (\n    <Tooltip\n      label=\"We store your data securely\"\n      position=\"top-end\"\n      withArrow\n      transitionProps={{ transition: 'pop-bottom-right' }}\n    >\n      <Text component=\"div\" c=\"dimmed\" style={{ cursor: 'help' }}>\n        <Center>\n          <IconInfoCircle size={18} stroke={1.5} />\n        </Center>\n      </Text>\n    </Tooltip>\n  );\n\n  return (\n    <TextInput\n      rightSection={rightSection}\n      label=\"Tooltip shown on icon hover\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n\nfunction TooltipFocus() {\n  const [opened, setOpened] = useState(false);\n  const [value, setValue] = useState('');\n  const valid = value.trim().length >= 6;\n  return (\n    <Tooltip\n      label={valid ? 'All good!' : 'Password must include at least 6 characters'}\n      position=\"bottom-start\"\n      withArrow\n      opened={opened}\n      color={valid ? 'teal' : undefined}\n      withinPortal\n    >\n      <PasswordInput\n        label=\"Tooltip shown onFocus\"\n        required\n        placeholder=\"Your password\"\n        onFocus={() => setOpened(true)}\n        onBlur={() => setOpened(false)}\n        mt=\"md\"\n        value={value}\n        onChange={(event) => setValue(event.currentTarget.value)}\n      />\n    </Tooltip>\n  );\n}\n\nexport function InputTooltip() {\n  return (\n    <>\n      <TooltipIcon />\n      <TooltipFocus />\n    </>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file describes a user interface component called an \"Input with custom validation styles\". It specifies the following configuration parameters:\n\n**1. Title:**\n- The title of the input field, displayed as a label.\n\n**2. Category:**\n- The category of the input, which in this case is \"inputs\".\n\n**3. Canvas:**\n- Defines the layout and settings for the component.\n    - **center:** Specifies that the component should be centered horizontally.\n    - **maxWidth:** Sets the maximum width of the component to 420 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to define the configuration and style of an input field with custom validation styles. This includes:\n\n- The label text.\n- The input field type.\n- Validation rules.\n- Custom CSS styles for valid and invalid states.\n\n**Additional Information:**\n\n- The file name suggests that it might be part of a user interface framework or development kit.\n- The specific details of the input field, validation rules, and CSS styles are not included in the provided JSON snippet.\n- The configuration parameters could be used to generate a dynamically rendered input field with customized validation behavior and visual feedback.\n\n**Example Usage:**\n\n```\n<input type=\"text\" name=\"email\" data-validation-rules=\"email\">\n```\n\nThis input field would have the label \"Email\" and would be validated as an email address using the `email` validation rule.\n\n**Conclusion:**\n\nThe JSON file describes a user interface component with a specific title, category, and canvas configuration. It provides a blueprint for creating an input field with custom validation styles, including validation rules and CSS styles for valid and invalid states.",
    "input": "",
    "output": "{\n  \"title\": \"Input with custom validation styles\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS file that defines two CSS classes: `.invalid` and `.icon`. These classes are likely used in a web application to style elements based on their validity or state.\n\n**`.invalid` Class:**\n\n- Sets the background color of elements with the class `.invalid` to the `--mantine-color-red-light` CSS variable.\n- The `--mantine-color-red-light` CSS variable is likely defined elsewhere in the CSS file or a separate CSS module.\n\n**`.icon` Class:**\n\n- Sets the color of elements with the class `.icon` to a value that is light or dark depending on the current theme mode (light or dark mode).\n- Uses the `light-dark()` function to dynamically set the color based on the theme mode.\n- The `var(--mantine-color-red-6)` and `var(--mantine-color-red-7)` CSS variables are likely defined elsewhere in the CSS file or a separate CSS module.\n\n**Purpose:**\n\nThe purpose of these CSS classes is to style elements that represent invalid data or states, such as:\n\n- Form fields that contain invalid input\n- Buttons that cannot be clicked\n- Icons that indicate errors or warnings\n\n**Usage:**\n\nThe `.invalid` class can be applied to elements to indicate their invalid state, while the `.icon` class can be applied to icons that are associated with invalid data or states.\n\n**Example:**\n\n```css\n<input type=\"text\" class=\"invalid\">\n<button disabled class=\"icon\">\n  <i class=\"error-icon\"></i>\n</button>\n```\n\n**Conclusion:**\n\nThe CSS file defines two classes that provide styling for invalid data or states in a web application. The `.invalid` class sets a background color, while the `.icon` class sets a color based on the theme mode.",
    "input": "",
    "output": ".invalid {\n  background-color: var(--mantine-color-red-light);\n}\n\n.icon {\n  color: light-dark(var(--mantine-color-red-6), var(--mantine-color-red-7));\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a React component module named `InputValidation.jsx`. It is responsible for rendering a user interface component that performs input validation.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * `StoryWrapper` is imported from the `StoryWrapper` component.\n    * `attributes.json` is imported as a JSON object containing attributes for the component.\n    * `InputValidation` is imported as a functional component.\n\n* **Component Definition:**\n    * The module exports an object with a `title` property set to `\"InputValidation\"`. This likely serves as a description of the component.\n\n* **Usage Function:**\n    * The `Usage()` function is exported and returns a React component.\n    * It renders a `StoryWrapper` component with the following props:\n        * `attributes`: The imported `attributes.json` object.\n        * `component`: The `InputValidation` functional component.\n\n**Purpose:**\n\nThe `InputValidation.jsx` module is likely part of a React application that includes a component for input validation. The component uses the `StoryWrapper` component to display the `InputValidation` component with the specified attributes.\n\n**Expected Functionality:**\n\nThe `InputValidation` component is expected to perform input validation based on the attributes provided in `attributes.json`. It may display error messages or take other actions if the input is invalid.\n\n**Additional Notes:**\n\n* The `attributes.json` file is assumed to contain JSON data that defines the validation rules and other configuration options for the `InputValidation` component.\n* The `StoryWrapper` component is likely used for displaying and testing the `InputValidation` component within the React application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { InputValidation } from './InputValidation';\n\nexport default { title: 'InputValidation' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={InputValidation} />;\n}\n"
  },
  {
    "instruction": "**File Name:** InputValidation.js\n\n**Purpose:**\n\nThe file defines a React functional component called `InputValidation`. It is responsible for rendering an input field with custom validation styles and an error message.\n\n**Functionality:**\n\n- **Imports:**\n    - `IconAlertTriangle` component from the `@tabler/icons-react` library for displaying an alert icon.\n    - `TextInput` component from the `@mantine/core` library for creating an input field.\n    - `classes` object imported from the `InputValidation.module.css` file for styling.\n\n- **Component Definition:**\n    - The `InputValidation` function is exported and defines the component.\n    - It returns a `TextInput` component with the following properties:\n        - **label:** \"Custom validation styles\"\n        - **error:** \"Invalid email\"\n        - **defaultValue:** \"hello!gmail.com\"\n        - **classNames:** An object containing a custom CSS class `classes.invalid` applied to the input field.\n        - **rightSection:** An icon component `<IconAlertTriangle>` with styling and a CSS class `classes.icon`.\n\n**Output:**\n\nWhen the component is rendered, it will display an input field with the following characteristics:\n\n- A label titled \"Custom validation styles\"\n- An error message indicating \"Invalid email\"\n- A default value of \"hello!gmail.com\"\n- An alert icon displayed on the right side of the input field\n\n**Styling:**\n\nThe `InputValidation.module.css` file likely defines CSS styles for the following elements:\n\n- `.invalid`: styles for the input field when it is in an invalid state.\n- `.icon`: styles for the alert icon.\n\n**Purpose:**\n\nThe purpose of this component is to demonstrate how to implement custom validation styles and display an error message when the input is invalid. It serves as an example of how to use React components and styling with validation logic.",
    "input": "",
    "output": "import { IconAlertTriangle } from '@tabler/icons-react';\nimport { TextInput } from '@mantine/core';\nimport classes from './InputValidation.module.css';\n\nexport function InputValidation() {\n  return (\n    <TextInput\n      label=\"Custom validation styles\"\n      error=\"Invalid email\"\n      defaultValue=\"hello!gmail.com\"\n      classNames={{ input: classes.invalid }}\n      rightSection={<IconAlertTriangle stroke={1.5} size={18} className={classes.icon} />}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user interface component called \"Input with contained button\". It is categorized under the \"inputs\" category and specifies the layout and behavior of the component.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Input with contained button\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 520\n  }\n}\n```\n\n**Properties:**\n\n- **title:** The title of the component, which is displayed in the user interface. In this case, it is \"Input with contained button\".\n- **category:** The category of the component, which is \"inputs\".\n- **canvas:** An object that defines the layout of the component.\n\n**canvas Object:**\n\n- **center:** A boolean value that specifies whether the component should be centered horizontally. In this case, it is set to `true`.\n- **maxWidth:** An integer value that specifies the maximum width of the component. In this case, it is set to 520.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a user interface component that includes an input field and a contained button. The component is centered horizontally with a maximum width of 520 pixels.\n\n**Usage:**\n\nThis JSON file can be used to create a user interface component in a JavaScript application. The component can be displayed and interacted with by users, allowing them to enter input and submit it using a button.\n\n**Additional Notes:**\n\n- The specific layout and behavior of the component may vary depending on the JavaScript code that implements it.\n- The `center` property ensures that the component is visually aligned in the middle of the screen or other container.\n- The `maxWidth` property prevents the component from becoming too wide on larger screens.",
    "input": "",
    "output": "{\n  \"title\": \"Input with contained button\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 520\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided file is a JavaScript module that exports a React component named `InputWithButton`. It is part of a larger application that allows users to input data and submit it using a button.\n\n**Components:**\n\n* **StoryWrapper:** This is a custom React component that wraps the `InputWithButton` component and provides additional functionality.\n* **InputWithButton:** This is the main component that handles user input and button clicks.\n* **attributes.json:** This file contains JSON data that represents the input attributes, such as label, type, and placeholder.\n\n**Workflow:**\n\n1. The `Usage()` function imports the `StoryWrapper` and `InputWithButton` components.\n2. It renders a `StoryWrapper` component with the following props:\n    * `attributes`: The JSON data from `attributes.json`.\n    * `component`: The `InputWithButton` component.\n3. The `InputWithButton` component displays an input field and a button.\n4. When the user enters input and clicks the button, the component submits the data to the server or performs other actions as specified in the application logic.\n\n**Additional Notes:**\n\n* The `title` property in the export statement sets the title of the component for documentation purposes.\n* The `StoryWrapper` component likely provides additional features such as form validation, error handling, and logging.\n* The specific functionality of the application is not provided in the given code snippet.\n\n**Purpose of the File:**\n\nThe purpose of this file is to create a reusable React component that handles user input and button clicks. The component can be used in other parts of the application to collect data from users.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { InputWithButton } from './InputWithButton';\n\nexport default { title: 'InputWithButton' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={InputWithButton} />;\n}\n"
  },
  {
    "instruction": "**File Name:** InputWithButton.tsx\n\n**Purpose:**\n\nThe file defines a React functional component called `InputWithButton`. This component creates an input field with a search icon on the left and an arrow icon on the right. It is likely used to allow users to search for questions.\n\n**Functionality:**\n\n- Imports necessary components from the `@tabler/icons-react` and `@mantine/core` libraries.\n- Uses the `useMantineTheme()` hook to access the current theme.\n- Renders a `TextInput` component with the following configurations:\n    - Radius: \"xl\"\n    - Size: \"md\"\n    - Placeholder: \"Search questions\"\n    - Right section width: 42px\n    - Left section: A search icon\n    - Right section: An action icon with an arrow right icon\n- Passes any additional props provided to the component to the `TextInput` component.\n\n**Key Features:**\n\n- **Search Icon:** The left section of the input field displays a magnifying glass icon.\n- **Arrow Icon:** The right section of the input field displays an arrow right icon, indicating that the user can submit their search query.\n- **Theme Compatibility:** The component is styled based on the current Mantine theme.\n- **Props Support:** The component accepts additional props, which can be passed to the `TextInput` component.\n\n**Usage:**\n\nThe `InputWithButton` component can be used to create a search input field in any React application that uses the Mantine library.\n\n```\n<InputWithButton />\n```\n\n**Additional Notes:**\n\n- The `IconSearch` and `IconArrowRight` components are from the `@tabler/icons-react` library.\n- The `TextInputProps` type is used to define the props that can be passed to the `TextInput` component.\n- The `useMantineTheme()` hook provides access to the Mantine theme, which is used to style the component.",
    "input": "",
    "output": "import { IconArrowRight, IconSearch } from '@tabler/icons-react';\nimport { ActionIcon, TextInput, TextInputProps, useMantineTheme } from '@mantine/core';\n\nexport function InputWithButton(props: TextInputProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <TextInput\n      radius=\"xl\"\n      size=\"md\"\n      placeholder=\"Search questions\"\n      rightSectionWidth={42}\n      leftSection={<IconSearch size={18} stroke={1.5} />}\n      rightSection={\n        <ActionIcon size={32} radius=\"xl\" color={theme.primaryColor} variant=\"filled\">\n          <IconArrowRight size={18} stroke={1.5} />\n        </ActionIcon>\n      }\n      {...props}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe JSON file you provided defines a user interface element called a \"language picker\". Its purpose is to allow users to select a preferred language from a list of options.\n\n**Properties:**\n\n**title:** \"Language picker\"\n- This specifies the title of the picker, which will be displayed above the list of language options.\n\n**category:** \"inputs\"\n- This categorizes the element as an input field.\n\n**canvas:**\n- **center:** true\n- Centers the picker vertically within its designated space.\n- **maxWidth:** 220\n- Sets the maximum width of the picker to 220 pixels.\n\n**Additional Notes:**\n\n- The JSON file does not provide any information about the specific language options or their corresponding values.\n- The picker could be implemented as a drop-down menu, a radio button group, or any other suitable interface element.\n- The selected language could be stored in a user session or other persistent storage mechanism.\n- The picker's functionality may be integrated with a localization system to provide content in the selected language.\n\n**Purpose of the File:**\n\nThe primary purpose of this JSON file is to define the visual and functional characteristics of a language picker user interface element. It provides guidance on the title, category, and canvas settings for the picker.\n\n**Usage:**\n\nThis file can be used by developers or designers to create a language picker user interface element in an application or website. The information provided in the file can be used to configure the picker's appearance, behavior, and integration with other functionalities.",
    "input": "",
    "output": "{\n  \"title\": \"Language picker\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 220\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a control component with an expandable label and an icon.\n\n**Functionality:**\n\n- **.control:**\n    - Width: 200px\n    - Display: flex\n    - Justify-content: space-between\n    - Align-items: center\n    - Padding: margin and padding variables\n    - Border-radius: medium radius\n    - Border: 1px solid a light-dark variation of gray or dark color\n    - Transition: background-color with a duration of 150ms\n    - Background-color: a light-dark variation of white or dark color\n    - Changes background-color on hover or when expanded\n\n- **.label:**\n    - Font-weight: 500\n    - Font-size: small font size\n\n- **.icon:**\n    - Transition: transform with a duration of 150ms\n    - Rotate: 0deg\n    - Rotates 180deg when the parent element has the \"data-expanded\" attribute set\n\n**Usage:**\n\nThe control component is likely used to toggle additional content or options when clicked. The label provides a brief description, and the icon indicates the expanded or collapsed state.\n\n**Key Features:**\n\n- Expandable state\n- Customizable styles\n- Responsiveness\n- Smooth transitions\n\n**Benefits:**\n\n- Enhanced user experience\n- Improved accessibility\n- Consistent design\n\n**Additional Notes:**\n\n- The code uses the `light-dark()` function to specify different colors based on the current theme (light or dark).\n- The `hover()` mixin defines a common style for the hover state.\n- The `data-expanded` attribute is likely used to toggle the expanded state of the control.",
    "input": "",
    "output": ".control {\n  width: 200px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-md);\n  border-radius: var(--mantine-radius-md);\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-6));\n  transition: background-color 150ms ease;\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-6));\n\n  &[data-expanded] {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));\n  }\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));\n  }\n}\n\n.label {\n  font-weight: 500;\n  font-size: var(--mantine-font-size-sm);\n}\n\n.icon {\n  transition: transform 150ms ease;\n  transform: rotate(0deg);\n\n  [data-expanded] & {\n    transform: rotate(180deg);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** LanguagePicker.jsx\n\n**Purpose:**\n\nThe `LanguagePicker.jsx` file is a React component that allows users to select a language for the application. It renders a `StoryWrapper` component, which provides a container for the language picker and its associated content.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the language picker component and provides additional functionality, such as handling user interactions and data binding.\n* **LanguagePicker:** The main component responsible for displaying the language options and handling user selection.\n\n**Data:**\n\nThe file imports an `attributes.json` file, which likely contains configuration data related to the language picker, such as the available languages, their labels, and default settings.\n\n**Usage:**\n\nThe `Usage()` function renders the `StoryWrapper` component with the following configuration:\n\n* `attributes`: The data loaded from the `attributes.json` file.\n* `component`: The `LanguagePicker` component.\n\n**Functionality:**\n\nWhen the user selects a language, the following steps occur:\n\n* The `LanguagePicker` component updates its state to reflect the selected language.\n* The `StoryWrapper` component handles the state change and updates its internal data accordingly.\n* The application re-renders with the selected language applied.\n\n**Additional Notes:**\n\n* The `title` property in the `export default` statement is likely used for navigation or display purposes.\n* The `",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { LanguagePicker } from './LanguagePicker';\n\nexport default { title: 'LanguagePicker' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={LanguagePicker} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `LanguagePicker.js` file is a React component that allows users to select a language from a dropdown menu. It provides a visually appealing and user-friendly interface for switching between different languages.\n\n**Features:**\n\n- **Multiple Languages:** The component supports five languages: English, German, Italian, French, and Polish.\n- **Image Selection:** Each language is represented by an image, providing a visual cue for the user.\n- **Dropdown Menu:** When the user clicks on the selected language, a dropdown menu appears with a list of available options.\n- **Language Selection:** Clicking on a language in the dropdown menu updates the selected language and the corresponding image.\n- **Accessibility:** The component is accessible by keyboard and screen readers.\n\n**Implementation:**\n\n- **State Management:** The component uses the `useState` hook to manage the state of the dropdown menu (opened/closed) and the selected language.\n- **Data Structure:** The `data` variable contains an array of objects, each representing a language with its label and image.\n- **Dropdown Menu:** The `items` variable maps the `data` array to an array of `Menu.Item` components, each representing a language option.\n- **Target Button:** The `UnstyledButton` component serves as the target for the dropdown menu. It displays the selected language and an arrow icon.\n- **Portal:** The `withinPortal` prop enables the dropdown menu to be rendered outside the component's DOM tree, improving performance and accessibility.\n\n**Usage:**\n\nThe `LanguagePicker` component can be used by importing it into another React component and rendering it.\n\n**Example:**\n\n```\n<LanguagePicker />\n```\n\n**Benefits:**\n\n- **Enhanced User Experience:** The language picker provides a smooth and intuitive way for users to switch languages.\n- **Improved Accessibility:** The component is accessible to all users, regardless of their language preferences.\n- **Easy Integration:** The component can be easily integrated into any React application.\n\n**Conclusion:**\n\nThe `LanguagePicker.js` file is a valuable tool for any application that needs to support multiple languages. It provides a user-friendly and accessible way for users to switch languages, enhancing the overall user experience.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { IconChevronDown } from '@tabler/icons-react';\nimport { Group, Image, Menu, UnstyledButton } from '@mantine/core';\nimport images from './images';\nimport classes from './LanguagePicker.module.css';\n\nconst data = [\n  { label: 'English', image: images.english },\n  { label: 'German', image: images.german },\n  { label: 'Italian', image: images.italian },\n  { label: 'French', image: images.french },\n  { label: 'Polish', image: images.polish },\n];\n\nexport function LanguagePicker() {\n  const [opened, setOpened] = useState(false);\n  const [selected, setSelected] = useState(data[0]);\n  const items = data.map((item) => (\n    <Menu.Item\n      leftSection={<Image src={item.image} width={18} height={18} />}\n      onClick={() => setSelected(item)}\n      key={item.label}\n    >\n      {item.label}\n    </Menu.Item>\n  ));\n\n  return (\n    <Menu\n      onOpen={() => setOpened(true)}\n      onClose={() => setOpened(false)}\n      radius=\"md\"\n      width=\"target\"\n      withinPortal\n    >\n      <Menu.Target>\n        <UnstyledButton className={classes.control} data-expanded={opened || undefined}>\n          <Group gap=\"xs\">\n            <Image src={selected.image} w={22} h={22} />\n            <span className={classes.label}>{selected.label}</span>\n          </Group>\n          <IconChevronDown size={16} className={classes.icon} stroke={1.5} />\n        </UnstyledButton>\n      </Menu.Target>\n      <Menu.Dropdown>{items}</Menu.Dropdown>\n    </Menu>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** languages.js\n\n**Purpose:**\n\nThe `languages.js` file exports an object containing the file paths of five different language images: English, French, German, Italian, and Polish.\n\n**File Structure:**\n\n* **Imports:**\n    * Imports five image files named `english.png`, `french.png`, `german.png`, `italian.png`, and `polish.png`.\n* **Object Export:**\n    * Creates an object with five properties, each representing a language.\n    * For each property, it sets the value to the `src` property of the corresponding imported image object.\n\n**Code Explanation:**\n\n```\nimport english from './english.png';\nimport french from './French.png';\nimport german from './german.png';\nimport italian from './italian.png';\nimport polish from './polish.png';\n\nexport default {\n  english: english.src,\n  french: french.src,\n  german: german.src,\n  italian: italian.src,\n  polish: polish.src,\n};\n```\n\n* **Import Statements:**\n    * These statements import the five language image files into the JavaScript code.\n* **Object Definition:**\n    * The `export default` statement defines an object with five properties.\n* **Property Values:**\n    * Each property value is set to the `src` property of the corresponding image object. This provides the file path of the image.\n\n**Usage:**\n\nThe `languages.js` file can be imported into other JavaScript files to access the file paths of the language images. For example, in a React component:\n\n```\nimport languages from './languages.js';\n\n<img src={languages.english} alt=\"English\" />\n```\n\n**Benefits:**\n\n* **Code organization:** The file separates the language image files from the code, keeping the project structure organized.\n* **Code reusability:** The language file paths can be easily accessed and used in multiple components or files.\n* **Maintainability:** Changes to the language image files only require updating the corresponding property in the `languages.js` file.",
    "input": "",
    "output": "import english from './english.png';\nimport french from './french.png';\nimport german from './german.png';\nimport italian from './italian.png';\nimport polish from './polish.png';\n\nexport default {\n  english: english.src,\n  french: french.src,\n  german: german.src,\n  italian: italian.src,\n  polish: polish.src,\n};\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration for a grid layout in a user interface. It contains metadata and settings that describe the layout and appearance of the grid.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Grid with leading item\",\n  \"category\": \"grids\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties:**\n\n* **title:** A string value that specifies the title of the grid layout. In this case, it is \"Grid with leading item\".\n* **category:** A string value that specifies the category or group to which the grid layout belongs. In this case, it is \"grids\".\n* **responsive:** A boolean value that indicates whether the grid layout should be responsive and adapt to different screen sizes. In this case, it is set to `true`.\n* **canvas:** An object that contains settings for the grid canvas.\n    * **center:** A boolean value that specifies whether the grid items should be centered within the canvas. In this case, it is set to `false`.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a grid layout with the following characteristics:\n\n* A title of \"Grid with leading item\"\n* Categorized as a \"grid\" layout\n* Responsive and adaptable to different screen sizes\n* Grid items are not centered within the canvas\n\n**Usage:**\n\nThis JSON file can be used to configure a grid layout in a user interface framework or tool. The settings specified in the file can be used to customize the layout, including the number of rows and columns, the spacing between items, and the alignment of items.\n\n**Additional Notes:**\n\n* The specific settings and options available for configuring a grid layout may vary depending on the user interface framework or tool being used.\n* The file can be saved with a `.json` extension.\n* The JSON syntax used in the file is valid and compliant with the JSON standard.",
    "input": "",
    "output": "{\n  \"title\": \"Grid with leading item\",\n  \"category\": \"grids\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** LeadGrid.jsx\n\n**Purpose:**\n\nThe `LeadGrid.jsx` file is a React component that serves as a lead generation form. It is part of a storybook application that allows developers to preview and test different UI components.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that provides a wrapper around the `LeadGrid` component, allowing it to be easily displayed in a storybook environment.\n- **LeadGrid:** The main component that represents the lead generation form. It receives an `attributes` prop that contains configuration data for the form.\n\n**Data:**\n\n- **attributes.json:** A JSON file that contains the configuration data for the `LeadGrid` component. This data includes fields such as the form title, input fields, and submit button text.\n\n**Usage:**\n\n- The `Usage()` function renders a `StoryWrapper` component with the following props:\n    - `attributes`: The configuration data from `attributes.json`.\n    - `component`: The `LeadGrid` component.\n- The `StoryWrapper` component provides a visual representation of the `LeadGrid` component with the specified attributes.\n\n**Purpose of the File:**\n\nThe `LeadGrid.jsx` file serves the following purposes:\n\n- To provide a user interface component for lead generation.\n- To allow developers to preview and test the component in a storybook environment.\n- To configure the form fields and layout using JSON data.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component is a custom component that is not part of the standard React library.\n- The `LeadGrid` component assumes that the `attributes.json` file is available in the same directory as the component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { LeadGrid } from './LeadGrid';\n\nexport default { title: 'LeadGrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={LeadGrid} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `LeadGrid.jsx` file is a React component that renders a grid layout with a primary column and three secondary columns. It is used to display a set of skeletons, which are placeholders for actual content.\n\n**Component Structure:**\n\n- **Container:** The component uses a `Container` component with a margin of `md` to provide spacing around the grid.\n- **SimpleGrid:** A `SimpleGrid` component with two columns is used to display the primary and secondary columns.\n    - **Primary Column:** A `Skeleton` component with a height of `PRIMARY_COL_HEIGHT` is used to represent the primary column.\n    - **Secondary Columns:** Three `Skeleton` components with a height of `SECONDARY_COL_HEIGHT` are used to represent the secondary columns.\n- **Grid:** A `Grid` component with a gutter of `md` is used to layout the secondary columns.\n    - **Grid.Col:** Three `Grid.Col` components are used to represent the three secondary columns, each with a span of 6.\n\n**Styling:**\n\n- `PRIMARY_COL_HEIGHT` is a constant defined with a value of `300px`.\n- `SECONDARY_COL_HEIGHT` is calculated using a CSS `calc()` function to be half the height of `PRIMARY_COL_HEIGHT` minus half the spacing between columns.\n\n**Usage:**\n\nThe `LeadGrid` component can be imported and rendered in other components to display the grid layout with skeletons.\n\n**Purpose of Skeletons:**\n\nSkeletons are used to provide a visual placeholder for actual content that is still being loaded or processed. They help to improve the user experience by avoiding awkward empty spaces.\n\n**Conclusion:**\n\nThe `LeadGrid.jsx` file is a React component that provides a grid layout with a primary and three secondary columns. It is used to display a set of skeletons, which are placeholders for actual content. The component is styled using CSS variables and provides a visually appealing representation of the grid layout.",
    "input": "",
    "output": "import { Container, Grid, SimpleGrid, Skeleton } from '@mantine/core';\n\nconst PRIMARY_COL_HEIGHT = '300px';\n\nexport function LeadGrid() {\n  const SECONDARY_COL_HEIGHT = `calc(${PRIMARY_COL_HEIGHT} / 2 - var(--mantine-spacing-md) / 2)`;\n\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={{ base: 1, sm: 2 }} spacing=\"md\">\n        <Skeleton height={PRIMARY_COL_HEIGHT} radius=\"md\" animate={false} />\n        <Grid gutter=\"md\">\n          <Grid.Col>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n        </Grid>\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a user interface element in a web application. It defines the properties and settings for a \"Collapsible links group\" component within a navbar.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Collapsible links group\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the collapsible links group, which will be displayed as a heading.\n* **category:** The category of the component, which is set to \"navbars\".\n* **canvas:** An object that contains additional settings for the component.\n\n**Canvas Properties:**\n\n* **center:** A boolean value that determines if the links should be centered within the navbar.\n* **maxWidth:** An integer value that specifies the maximum width of the collapsible links group.\n\n**Purpose:**\n\nThe purpose of this file is to configure a collapsible links group component within a navbar. The settings specified in the file will determine the title, layout, and behavior of the component.\n\n**Example Usage:**\n\n```\n<div class=\"collapsible-links-group\">\n  <h3>Collapsible Links Group</h3>\n  <ul>\n    <li><a href=\"#\">Link 1</a></li>\n    <li><a href=\"#\">Link 2</a></li>\n    <li><a href=\"#\">Link 3</a></li>\n  </ul>\n</div>\n```\n\n**Additional Notes:**\n\n* The `canvas` property can be used to customize the styling and layout of the collapsible links group.\n* The `center` property ensures that the links are aligned in the center of the navbar.\n* The `maxWidth` property prevents the links group from becoming too wide on smaller screens.",
    "input": "",
    "output": "{\n  \"title\": \"Collapsible links group\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** Unknown (based on the provided code)\n\n**Purpose:**\n\nThe file appears to be a CSS stylesheet used to style HTML elements on a web page. It defines styles for three CSS classes:\n\n- `.control`\n- `.link`\n- `.chevron`\n\n**Description:**\n\n**`.control` Class:**\n\n- Sets the font weight to 500 (medium).\n- Displays the element as a block element.\n- Sets the width to 100%.\n- Adds padding to the element using the `--mantine-spacing-xs` and `--mantine-spacing-md` variables.\n- Sets the color of the element to `--mantine-color-text`.\n- Sets the font size to `--mantine-font-size-sm`.\n- Defines a `hover` mixin that changes the background color and text color on hover.\n\n**`.link` Class:**\n\n- Inherits the styles from `.control`.\n- Adds additional padding to the left.\n- Sets a left margin.\n- Adds a 1px solid border to the left.\n\n**`.chevron` Class:**\n\n- Sets a transition property with a duration of 200ms and an ease timing function.\n\n**Usage:**\n\nThese styles are likely applied to HTML elements within a web page using the corresponding CSS classes. The `.control` class is likely applied to a control element, while the `.link` class is likely applied to a link element. The `.chevron` class is likely applied to an element that represents a chevron icon.\n\n**Additional Notes:**\n\n- The `--mantine-spacing-*` and `--mantine-color-*` variables are likely defined elsewhere in the CSS or JavaScript code.\n- The `@mixin hover` directive is a Sass mixin that can be used to define a hover effect.\n- The `light-dark()` function is likely used to set the background and text colors based on the user's theme preference.",
    "input": "",
    "output": ".control {\n  font-weight: 500;\n  display: block;\n  width: 100%;\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-md);\n  color: var(--mantine-color-text);\n  font-size: var(--mantine-font-size-sm);\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-7));\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-dark-0));\n  }\n}\n\n.link {\n  font-weight: 500;\n  display: block;\n  text-decoration: none;\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-md);\n  padding-left: var(--mantine-spacing-md);\n  margin-left: var(--mantine-spacing-xl);\n  font-size: var(--mantine-font-size-sm);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  border-left: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-7));\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-dark-0));\n  }\n}\n\n.chevron {\n  transition: transform 200ms ease;\n}\n"
  },
  {
    "instruction": "**File Name:** NavbarLinksGroup.jsx\n\n**Purpose:**\n\nThe `NavbarLinksGroup.jsx` file is a React component that represents a group of navigation links in a navbar. It is responsible for rendering and handling the display of these links.\n\n**Description:**\n\n* **Imports:**\n    * `StoryWrapper` component from the `StoryWrapper` module.\n    * `attributes.json` file, which contains the attributes and configuration options for the `NavbarLinksGroup` component.\n    * `NavbarLinksGroup` component from the current file.\n\n* **Component Declaration:**\n    * The component is declared with a `title` prop, which is used for documentation purposes.\n\n* **Usage Function:**\n    * The `Usage()` function renders a `StoryWrapper` component.\n    * The `attributes` prop of the `StoryWrapper` component is set to the `attributes.json` file.\n    * The `component` prop of the `StoryWrapper` component is set to the `NavbarLinksGroup` component.\n\n**How the File Works:**\n\n1. When the component is rendered, it receives the `attributes` prop from the `StoryWrapper`.\n2. The `attributes` prop contains the configuration options for the component, such as the list of navigation links.\n3. The component iterates over the navigation links in the `attributes` prop and renders a `<li>` element for each link.\n4. Each `<li>` element contains an `<a>` tag with the link's URL and text.\n5. The component handles the click event of the links and performs any necessary actions, such as navigation or logging.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain an array of objects with `href` and `text` properties.\n* The `StoryWrapper` component is used to provide a convenient way to render and document the `NavbarLinksGroup` component.\n* The `NavbarLinksGroup` component can be used to create a navbar with a group of navigation links.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarLinksGroup } from './NavbarLinksGroup';\n\nexport default { title: 'NavbarLinksGroup' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarLinksGroup} />;\n}\n"
  },
  {
    "instruction": "**NavbarLinksGroup.js**\n\nThis file is a React component that displays a group of links within a navigation bar. It provides an expandable interface where users can toggle the visibility of sublinks by clicking on the main link.\n\n**Purpose:**\n\n- To organize and navigate through a set of links related to releases.\n- To provide a visually appealing and user-friendly interface.\n\n**Features:**\n\n- **Icon:** A custom icon is displayed before the label.\n- **Label:** A text label that identifies the group of links.\n- **Sublinks:** A list of individual links that are collapsed by default.\n- **Toggle Button:** A button that allows users to expand or collapse the sublinks.\n\n**Components:**\n\n- **LinksGroup:** The main component that handles the group of links and toggle functionality.\n- **NavbarLinksGroup:** A helper component that provides a sample instance of LinksGroup with mocked data.\n\n**Code Breakdown:**\n\n- **Imports:** React components and icons are imported from external libraries.\n- **Interface:** A TypeScript interface defines the props for the LinksGroup component.\n- **LinksGroup Component:**\n    - Takes props for icon, label, initial opening state, and links.\n    - Creates a state variable to track whether the sublinks are opened.\n    - Maps the links prop to an array of Text components for each link.\n    - Renders a button to toggle the sublinks and displays the sublinks if open.\n- **NavbarLinksGroup Component:**\n    - Uses the LinksGroup component with mocked data for demonstration purposes.\n\n**Usage:**\n\nThe NavbarLinksGroup component can be used to display a group of links related to releases within a navigation bar. It provides a convenient way for users to navigate through different sections of the application.\n\n**Example:**\n\n```\n<NavbarLinksGroup />\n```\n\n**Conclusion:**\n\nThe NavbarLinksGroup.js file is a well-structured and functional component that simplifies the creation of expandable navigation links. It is an essential part of any user interface that requires navigation through a set of related links.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { IconCalendarStats, IconChevronRight } from '@tabler/icons-react';\nimport { Box, Collapse, Group, Text, ThemeIcon, UnstyledButton } from '@mantine/core';\nimport classes from './NavbarLinksGroup.module.css';\n\ninterface LinksGroupProps {\n  icon: React.FC<any>;\n  label: string;\n  initiallyOpened?: boolean;\n  links?: { label: string; link: string }[];\n}\n\nexport function LinksGroup({ icon: Icon, label, initiallyOpened, links }: LinksGroupProps) {\n  const hasLinks = Array.isArray(links);\n  const [opened, setOpened] = useState(initiallyOpened || false);\n  const items = (hasLinks ? links : []).map((link) => (\n    <Text<'a'>\n      component=\"a\"\n      className={classes.link}\n      href={link.link}\n      key={link.label}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </Text>\n  ));\n\n  return (\n    <>\n      <UnstyledButton onClick={() => setOpened((o) => !o)} className={classes.control}>\n        <Group justify=\"space-between\" gap={0}>\n          <Box style={{ display: 'flex', alignItems: 'center' }}>\n            <ThemeIcon variant=\"light\" size={30}>\n              <Icon size={18} />\n            </ThemeIcon>\n            <Box ml=\"md\">{label}</Box>\n          </Box>\n          {hasLinks && (\n            <IconChevronRight\n              className={classes.chevron}\n              stroke={1.5}\n              size={16}\n              style={{ transform: opened ? 'rotate(-90deg)' : 'none' }}\n            />\n          )}\n        </Group>\n      </UnstyledButton>\n      {hasLinks ? <Collapse in={opened}>{items}</Collapse> : null}\n    </>\n  );\n}\n\nconst mockdata = {\n  label: 'Releases',\n  icon: IconCalendarStats,\n  links: [\n    { label: 'Upcoming releases', link: '/' },\n    { label: 'Previous releases', link: '/' },\n    { label: 'Releases schedule', link: '/' },\n  ],\n};\n\nexport function NavbarLinksGroup() {\n  return (\n    <Box mih={220} p=\"md\">\n      <LinksGroup {...mockdata} />\n    </Box>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided describes a UI component called \"Navbar with tooltips\". It appears to be part of a UI framework or design system.\n\n**Content of the File:**\n\n```json\n{\n  \"title\": \"Navbar with tooltips\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Key Fields:**\n\n- **title:** This field specifies the title of the UI component, which is \"Navbar with tooltips\".\n- **category:** This field specifies the category of the UI component, which is \"navbars\".\n- **canvas:** This field contains additional configuration options for the component.\n\n**canvas Configuration:**\n\n- **center:** This field specifies whether the component should be centered within its container. In this case, it is set to `false`, indicating that the component should not be centered.\n\n**Purpose:**\n\nThe purpose of this file is to provide metadata and configuration options for a \"Navbar with tooltips\" component. This component is likely a type of navigation bar that includes buttons or links with tooltips for additional information.\n\n**Usage:**\n\nThis file can be used by a UI framework or design system to render the \"Navbar with tooltips\" component in a user interface. The configuration options in the `canvas` field can be used to customize the component's appearance and behavior.\n\n**Additional Notes:**\n\n- The `category` field suggests that this component is part of a broader category of navigation bars.\n- The `title` field serves as a unique identifier for the component.\n- The `center` configuration option is likely used to align the navbar with the content of the page.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with tooltips\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a navbar component. It is responsible for the visual layout and design of the navigation menu.\n\n**Components:**\n\n* **.navbar:**\n    * Width: 80px\n    * Height: 750px\n    * Padding: Medium spacing (var(--mantine-spacing-md))\n    * Display: flex\n    * Flex-direction: column\n    * Border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))\n\n* **.navbarMain:**\n    * Flex: 1\n    * Margin-top: 50px\n\n* **.link:**\n    * Width: 50px\n    * Height: 50px\n    * Border-radius: Medium radius (var(--mantine-radius-md))\n    * Display: flex\n    * Align-items: center\n    * Justify-content: center\n    * Color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0))\n\n    * **Hover state:**\n        * Background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5))\n\n    * **Active state:**\n        * Background-color: var(--mantine-color-blue-light)\n        * Color: var(--mantine-color-blue-light-color)\n\n**Functionality:**\n\nThe CSS code defines the following functionality:\n\n* A vertically oriented navigation menu with a fixed width and height.\n* Links within the menu with specified dimensions, rounded corners, and hover and active states.\n* A visual separation between the navbar and the content area.\n\n**Usage:**\n\nThe CSS file can be included in a web page to style the navbar component. The HTML code for the navbar should contain elements with the appropriate class names (e.g., .navbar, .link) to apply the styles.\n\n**Note:**\n\nThe CSS variables and functions used in the code (e.g., var(--mantine-spacing-md)) are likely defined in a separate CSS file or style sheet.",
    "input": "",
    "output": ".navbar {\n  width: 80px;\n  height: 750px;\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.navbarMain {\n  flex: 1;\n  margin-top: 50px;\n}\n\n.link {\n  width: 50px;\n  height: 50px;\n  border-radius: var(--mantine-radius-md);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      background-color: var(--mantine-color-blue-light);\n      color: var(--mantine-color-blue-light-color);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file `NavbarMinimal.jsx` is a React component that renders a minimal navigation bar. It is part of a storybook configuration that allows for interactive component documentation.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `NavbarMinimal` component and provides additional attributes for the storybook.\n* **NavbarMinimal:** The actual navigation bar component.\n* **attributes.json:** A JSON file containing attributes to be passed to the `NavbarMinimal` component.\n\n**Code Breakdown:**\n\n**1. Imports:**\n\n* `StoryWrapper` is imported from the `StoryWrapper` component.\n* `attributes.json` is imported to provide attributes for the `NavbarMinimal` component.\n* `NavbarMinimal` is imported as a separate component.\n\n**2. Default Export:**\n\n* The file exports an object with the title `NavbarMinimal`.\n\n**3. Usage Function:**\n\n* The `Usage` function renders a `StoryWrapper` component.\n* The `attributes` prop is passed to the `StoryWrapper`, which in turn passes it to the `NavbarMinimal` component.\n* The `component` prop of the `StoryWrapper` specifies that the `NavbarMinimal` component should be rendered.\n\n**Purpose:**\n\nThe purpose of this file is to create an interactive story for the `NavbarMinimal` component. The story allows developers to preview and interact with the component with different attributes.\n\n**Storybook Configuration:**\n\nThe `NavbarMinimal.jsx` file is part of a storybook configuration. Storybook is a tool that enables developers to document and showcase their React components in an interactive way.\n\n**Additional Notes:**\n\n* The `attributes.json` file can be used to define different sets of attributes for the `NavbarMinimal` component.\n* The `StoryWrapper` component can be customized to provide additional functionality or attributes.\n* The `NavbarMinimal` component can be further customized to add additional features or styles.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarMinimal } from './NavbarMinimal';\n\nexport default { title: 'NavbarMinimal' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarMinimal} />;\n}\n"
  },
  {
    "instruction": "**NavbarMinimal.jsx**\n\nThis file creates a minimal navigation bar component for a React application using the Mantine and Tabler icons libraries. It renders a list of links with icons and allows users to switch between different pages.\n\n**Key Functionality:**\n\n- **NavbarLinks:** Each link in the navigation bar is represented by a `NavbarLink` component.\n- **Icons:** The component uses icons from the Tabler icons library.\n- **Tooltip:** Each link has a tooltip that displays the label of the link.\n- **Active State:** The `active` prop of each link indicates whether it is currently selected.\n- **State Management:** The `useState` hook is used to manage the active link.\n- **Mock Data:** The `mockdata` array provides the data for the navigation links.\n\n**How it Works:**\n\n1. The `NavbarMinimal` function renders the navigation bar.\n2. It uses `map()` to generate a list of `NavbarLink` components based on the `mockdata`.\n3. Each `NavbarLink` component receives the icon, label, active state, and onClick event handler from the `mockdata`.\n4. Clicking on a link triggers the `onClick` handler, which sets the active state in the state management.\n\n**Components:**\n\n- **NavbarLink:** A component that displays a single navigation link with an icon and a tooltip.\n- **NavbarMinimal:** The main component that renders the entire navigation bar.\n\n**Features:**\n\n- Easy to use and customize.\n- Accessible with keyboard navigation.\n- Provides clear and concise navigation options.\n\n**Usage:**\n\nThis component can be used to navigate between different pages in a React application. It can be integrated into any React application using the `NavbarMinimal` component.\n\n**Example:**\n\n```\n<NavbarMinimal />\n```\n\n**Note:**\n\n- The `classes.navbar`, `classes.navbarMain`, and `classes.link` variables are defined in the `NavbarMinimal.module.css` file.\n- The `MantineLogo` component is from the `@mantinex/mantine-logo` package.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  IconCalendarStats,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconGauge,\n  IconHome2,\n  IconLogout,\n  IconSettings,\n  IconSwitchHorizontal,\n  IconUser,\n} from '@tabler/icons-react';\nimport { Center, Stack, Tooltip, UnstyledButton } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './NavbarMinimal.module.css';\n\ninterface NavbarLinkProps {\n  icon: typeof IconHome2;\n  label: string;\n  active?: boolean;\n  onClick?: () => void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  return (\n    <Tooltip label={label} position=\"right\" transitionProps={{ duration: 0 }}>\n      <UnstyledButton onClick={onClick} className={classes.link} data-active={active || undefined}>\n        <Icon size={20} stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nexport function NavbarMinimal() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <Center>\n        <MantineLogo type=\"mark\" size={30} />\n      </Center>\n\n      <div className={classes.navbarMain}>\n        <Stack justify=\"center\" gap={0}>\n          {links}\n        </Stack>\n      </div>\n\n      <Stack justify=\"center\" gap={0}>\n        <NavbarLink icon={IconSwitchHorizontal} label=\"Change account\" />\n        <NavbarLink icon={IconLogout} label=\"Logout\" />\n      </Stack>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a UI component called \"Navbar with tooltips\". It is part of a category called \"navbars\" and specifies configuration options for the component.\n\n**Component Properties:**\n\n- **title:** The title of the component, which is displayed in the user interface.\n- **category:** The category of the component, which is used for organization and navigation.\n- **canvas:** An object that contains configuration options for the canvas element where the component will be rendered.\n    - **center:** A boolean value that specifies whether the component should be centered within the canvas.\n\n**Purpose:**\n\nThe purpose of this file is to provide configuration data for a specific UI component. The configuration data includes the title, category, and canvas settings. These settings determine how the component will be rendered and interacted with by users.\n\n**Additional Notes:**\n\n- The `canvas` property is used to specify layout and positioning options for the component.\n- The `center` property determines whether the component should be aligned horizontally in the center of the canvas.\n- This JSON file is typically used in a UI framework or tool to define and configure reusable UI components.\n- The configuration data can be used to dynamically generate and render the component in the user interface.\n\n**Usage:**\n\nThis JSON file can be used in conjunction with a UI framework or tool to create and render the \"Navbar with tooltips\" component. The configuration data can be loaded and used to configure the component's properties and behavior.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with tooltips\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the style of a navigation bar. It is responsible for the layout, appearance, and behavior of the navigation links.\n\n**Structure:**\n\nThe file consists of three main CSS classes:\n\n- `.navbar`: Styles the main navigation container.\n- `.navbarMain`: Styles the main content area within the navigation bar.\n- `.link`: Styles the individual navigation links.\n\n**`.navbar` Class:**\n\n- Sets the width, height, padding, display, flex-direction, and background color of the navigation bar.\n- The `width` is set to 80px, the `height` is set to 750px, and the `padding` is set to the predefined `var(--mantine-spacing-md)` value.\n- The `display` is set to `flex`, the `flex-direction` is set to `column`, and the `background-color` is set to the predefined `var(--mantine-color-blue-filled)` value.\n\n**`.navbarMain` Class:**\n\n- Sets the `flex` property to 1, indicating that it should take up the remaining space within the `.navbar` container.\n- Sets the `margin-top` to 50px.\n\n**`.link` Class:**\n\n- Sets the width, height, border-radius, display, align-items, justify-content, and color of the navigation links.\n- The `width` is set to 50px, the `height` is set to 50px, the `border-radius` is set to the predefined `var(--mantine-radius-md)` value, and the `color` is set to the predefined `var(--mantine-color-white)` value.\n- Implements hover and active states for the links:\n    - On hover, the `background-color` changes to `var(--mantine-color-blue-7)`.\n    - When a link is active, the `box-shadow`, `background-color`, and `color` are set to predefined values.\n\n**Usage:**\n\nThese CSS classes can be used in HTML code to create a navigation bar with links. The `data-active` attribute can be used to indicate the active link.\n\n**Note:**\n\nThe CSS file assumes the use of a CSS framework called Mantine. The specific values and styles used in the file may vary depending on the Mantine theme and configuration.",
    "input": "",
    "output": ".navbar {\n  width: 80px;\n  height: 750px;\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  flex-direction: column;\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.navbarMain {\n  flex: 1;\n  margin-top: 50px;\n}\n\n.link {\n  width: 50px;\n  height: 50px;\n  border-radius: var(--mantine-radius-md);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--mantine-color-white);\n\n  &:hover {\n    background-color: var(--mantine-color-blue-7);\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      box-shadow: var(--mantine-shadow-sm);\n      background-color: var(--mantine-color-white);\n      color: var(--mantine-color-blue-6);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** NavbarMinimalColored.jsx\n\n**File Function:**\n\nThe `NavbarMinimalColored.jsx` file is a React component that serves as a minimal, colored navigation bar. It is part of a larger application or project.\n\n**File Structure:**\n\n- **Import Statements:**\n    - `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper`.\n    - `attributes.json` file containing attributes for the component.\n    - `NavbarMinimalColored` component itself.\n\n- **Default Export:**\n    - An object with a `title` property set to `'NavbarMinimalColored'`. This title is likely used for documentation or identification purposes.\n\n- **Function Component:**\n    - `Usage` function component that renders the `StoryWrapper` component.\n    - The `StoryWrapper` component receives the following props:\n        - `attributes`: An object containing attributes for the `NavbarMinimalColored` component.\n        - `component`: The `NavbarMinimalColored` component itself.\n\n**Usage:**\n\nThe `Usage` function component renders the `StoryWrapper` component, which in turn renders the `NavbarMinimalColored` component with the specified attributes. The `StoryWrapper` component is likely used for testing, documentation, or other purposes.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains attributes such as color, font size, and padding for the navigation bar.\n- The `NavbarMinimalColored` component likely renders a navigation bar with a minimal design and a specified color.\n- The `StoryWrapper` component is a custom component that may provide additional functionality or styling.\n\n**Purpose:**\n\nThe `NavbarMinimalColored.jsx` file creates a React component that represents a minimal, colored navigation bar. The component is intended to be used as part of a larger application or project.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarMinimalColored } from './NavbarMinimalColored';\n\nexport default { title: 'NavbarMinimalColored' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarMinimalColored} />;\n}\n"
  },
  {
    "instruction": "**NavbarMinimalColored.jsx**\n\nThis React component represents a minimal, colored navigation bar. It provides links to different sections of an application and includes options for account management and logout.\n\n**Key Features:**\n\n- Uses the `@tabler/icons-react` and `@mantine/core` libraries for icons and layout.\n- Features a logo, a list of navigation links, and options for account management and logout.\n- Implements state management using `useState` to track the active link.\n- Uses a `NavbarLink` component to render each navigation link.\n\n**How it Works:**\n\n- The component starts by importing necessary components and icons.\n- It defines an interface `NavbarLinkProps` to represent the props for each navigation link.\n- It defines a `NavbarLink` component that renders a tooltip with an icon and label.\n- The `mockdata` array contains the navigation link data, including icons and labels.\n- The component renders the navigation links using `map()` to create an array of `NavbarLink` components.\n- The component also includes links for account management and logout.\n- The component uses `useState` to manage the active link and updates it based on user interactions.\n\n**Usage:**\n\nThe `NavbarMinimalColored` component can be used in any React application to provide a minimal, colored navigation bar.\n\n**Example:**\n\n```\n<NavbarMinimalColored />\n```\n\n**Output:**\n\nThe component will render a navigation bar with a logo, a list of navigation links, and options for account management and logout. The active link will be highlighted based on the state management.\n\n**Additional Notes:**\n\n- The `NavbarMinimalColored.module.css` file contains CSS styles for the navigation bar and its components.\n- The `Icon` components from `@tabler/icons-react` provide the icons for the navigation links.\n- The `MantineLogo` component from `@mantinex/mantine-logo` provides the logo.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  IconCalendarStats,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconGauge,\n  IconHome2,\n  IconLogout,\n  IconSettings,\n  IconSwitchHorizontal,\n  IconUser,\n} from '@tabler/icons-react';\nimport { Center, Stack, Tooltip, UnstyledButton } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './NavbarMinimalColored.module.css';\n\ninterface NavbarLinkProps {\n  icon: typeof IconHome2;\n  label: string;\n  active?: boolean;\n  onClick?: () => void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  return (\n    <Tooltip label={label} position=\"right\" transitionProps={{ duration: 0 }}>\n      <UnstyledButton onClick={onClick} className={classes.link} data-active={active || undefined}>\n        <Icon size={20} stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nexport function NavbarMinimalColored() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <Center>\n        <MantineLogo type=\"mark\" inverted size={30} />\n      </Center>\n\n      <div className={classes.navbarMain}>\n        <Stack justify=\"center\" gap={0}>\n          {links}\n        </Stack>\n      </div>\n\n      <Stack justify=\"center\" gap={0}>\n        <NavbarLink icon={IconSwitchHorizontal} label=\"Change account\" />\n        <NavbarLink icon={IconLogout} label=\"Logout\" />\n      </Stack>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that describes a specific component for a user interface framework or application. The file defines a \"Navbar with nested links\" component with the following properties:\n\n**Title:**\n* The title of the component is \"Navbar with nested links.\"\n\n**Category:**\n* The category of the component is \"navbars.\"\n\n**Canvas:**\n* The \"canvas\" property specifies the layout of the component.\n* The \"center\" property is set to \"false,\" indicating that the component should not be centered within its container.\n\n**Overall Function:**\n\nThis JSON file serves as a blueprint or template for creating a navbar component with nested links. The navbar typically includes a horizontal menu with links that navigate between different sections or pages within an application. The nested links allow users to access subcategories or additional levels of navigation within a specific section.\n\n**Example Usage:**\n\nThe configuration provided can be used by a UI framework or application to render a navbar with nested links. The framework or application would then use the information in the file to create the necessary HTML and CSS elements to display the navbar with its links.\n\n**Additional Notes:**\n\n* The specific implementation of the navbar component and its nested links may vary depending on the UI framework or application being used.\n* The configuration file may contain additional properties or settings that are specific to the UI framework or application.\n* The \"category\" property can be used to group related components or to facilitate navigation within the UI framework or application.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with nested links\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "The code provided is a React functional component that renders an SVG image. The image depicts a map of the Earth with various locations highlighted.\n\n**Component Properties:**\n\n* **start_of_turn:** This is a custom prop specific to this component. It is not a standard HTML or React prop.\n* **className:** The class name of the SVG element.\n* **viewBox:** The viewport dimensions of the SVG image.\n* **xmlns:** The XML namespace of the SVG element.\n\n**Image Features:**\n\n* The map covers most of the Earth, with continents, countries, and oceans depicted.\n* Major cities are marked with circles.\n* Specific locations are highlighted with different colors or symbols.\n\n**Purpose:**\n\nThe purpose of this component is to visually represent geographic information or locations. It could be used in various contexts, such as:\n\n* Travel planning\n* Geographic research\n* Educational purposes\n\n**Technical Details:**\n\n* The SVG image is created using the `svg` element.\n* The individual locations are represented as `path` elements.\n* The colors and styles of the map elements are specified within the `style` attribute.\n\n**Additional Notes:**\n\n* The `start_of_turn` prop is a custom prop specific to this component and may not be recognized by other React components or frameworks.\n* The image is relatively large, with a `viewBox` of `-180 -90 360 180`.\n* The specific locations and colors used in the image are not defined in the code snippet provided.",
    "input": "",
    "output": "export function Logo(props: React.ComponentPropsWithoutRef<'svg'>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 623 163\">\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <path\n          fill=\"#339AF0\"\n          fillRule=\"nonzero\"\n          d=\"M162.162 81.5c0-45.011-36.301-81.5-81.08-81.5C36.301 0 0 36.489 0 81.5 0 126.51 36.301 163 81.081 163s81.081-36.49 81.081-81.5z\"\n        />\n        <g fill=\"#FFF\">\n          <path\n            fillRule=\"nonzero\"\n            d=\"M65.983 43.049a6.234 6.234 0 00-.336 6.884 6.14 6.14 0 001.618 1.786c9.444 7.036 14.866 17.794 14.866 29.52 0 11.726-5.422 22.484-14.866 29.52a6.142 6.142 0 00-1.616 1.786 6.211 6.211 0 00-.694 4.693c.197.79.546 1.533 1.028 2.186a6.154 6.154 0 008.634 1.284 50.112 50.112 0 007.947-7.39h17.493c3.406 0 6.174-2.772 6.174-6.194s-2.762-6.194-6.174-6.194h-9.655a49.166 49.166 0 004.071-19.69 49.166 49.166 0 00-4.07-19.692h9.66c3.406 0 6.173-2.771 6.173-6.194 0-3.422-2.762-6.193-6.173-6.193H82.574a50.11 50.11 0 00-7.952-7.397 6.149 6.149 0 00-4.578-1.153 6.189 6.189 0 00-4.055 2.438h-.006z\"\n          />\n          <path d=\"M56.236 79.391a9.342 9.342 0 01.632-3.608 9.261 9.261 0 011.967-3.077 9.143 9.143 0 012.994-2.063 9.06 9.06 0 017.103 0 9.144 9.144 0 012.995 2.063 9.261 9.261 0 011.967 3.077 9.34 9.34 0 01.63 3.608 9.299 9.299 0 01-2.755 6.395 9.094 9.094 0 01-6.388 2.63 9.094 9.094 0 01-6.39-2.63 9.299 9.299 0 01-2.755-6.395z\" />\n        </g>\n        <path\n          fill=\"currentColor\"\n          fillRule=\"nonzero\"\n          d=\"M291.736 126.644c1.984 0 3.823-.434 5.518-1.302 1.695-.868 2.542-2.129 2.542-3.782v-77.5c0-2.976-.827-5.063-2.48-6.262-1.653-1.199-3.513-1.798-5.58-1.798-1.901 0-3.555.207-4.96.62-1.405.413-2.666 1.24-3.782 2.48s-2.418 3.059-3.906 5.456l-15.252 27.776-15.128-27.776c-1.323-2.397-2.583-4.216-3.782-5.456-1.199-1.24-2.48-2.067-3.844-2.48-1.364-.413-3.038-.62-5.022-.62-1.984 0-3.823.6-5.518 1.798-1.695 1.199-2.542 3.286-2.542 6.262v77.5c0 1.653.847 2.914 2.542 3.782 1.695.868 3.534 1.302 5.518 1.302 2.067 0 3.927-.434 5.58-1.302 1.653-.868 2.48-2.129 2.48-3.782V67.248l14.26 26.784c.744 1.24 1.591 2.087 2.542 2.542.95.455 1.88.682 2.79.682.992 0 1.984-.248 2.976-.744s1.86-1.323 2.604-2.48l14.384-25.792v53.32c0 1.653.847 2.914 2.542 3.782 1.695.868 3.534 1.302 5.518 1.302zm34.375 1.116c4.298 0 7.956-.992 10.974-2.976 3.017-1.984 5.642-4.257 7.874-6.82v3.596c0 1.405.682 2.604 2.046 3.596 1.364.992 3.08 1.488 5.146 1.488 2.232 0 4.092-.496 5.58-1.488 1.488-.992 2.232-2.19 2.232-3.596V91.18c0-4.216-.889-8.143-2.666-11.78-1.778-3.637-4.609-6.613-8.494-8.928-3.886-2.315-9.052-3.472-15.5-3.472-2.894 0-5.87.372-8.928 1.116-3.059.744-5.642 1.798-7.75 3.162-2.108 1.364-3.162 2.914-3.162 4.65 0 1.819.475 3.596 1.426 5.332.95 1.736 2.294 2.604 4.03 2.604 1.074 0 2.066-.33 2.976-.992.91-.661 2.211-1.302 3.906-1.922 1.694-.62 4.112-.93 7.254-.93 2.81 0 4.98.579 6.51 1.736 1.53 1.157 2.645 2.604 3.348 4.34a14.092 14.092 0 011.054 5.332v1.612h-5.084c-5.704 0-10.726.537-15.066 1.612-4.34 1.075-7.73 2.935-10.168 5.58-2.439 2.645-3.658 6.324-3.658 11.036 0 5.621 1.591 9.775 4.774 12.462 3.182 2.687 6.964 4.03 11.346 4.03zm6.448-11.904c-1.819 0-3.369-.537-4.65-1.612-1.282-1.075-1.922-2.77-1.922-5.084 0-2.315.764-4.03 2.294-5.146 1.53-1.116 3.534-1.84 6.014-2.17 2.48-.33 5.084-.496 7.812-.496h1.86v2.604c0 1.984-.6 3.885-1.798 5.704-1.199 1.819-2.666 3.307-4.402 4.464-1.736 1.157-3.472 1.736-5.208 1.736zm84.169 10.788c2.067 0 3.927-.434 5.58-1.302 1.653-.868 2.48-2.129 2.48-3.782V92.172c0-4.63-.971-8.845-2.914-12.648-1.943-3.803-4.526-6.84-7.75-9.114C410.9 68.137 407.345 67 403.46 67c-4.133 0-7.626.971-10.478 2.914-2.852 1.943-4.898 4.113-6.138 6.51v-3.72c0-1.488-.682-2.687-2.046-3.596-1.364-.91-3.038-1.364-5.022-1.364-2.315 0-4.216.455-5.704 1.364-1.488.91-2.232 2.108-2.232 3.596v48.856c0 1.24.744 2.397 2.232 3.472 1.488 1.075 3.39 1.612 5.704 1.612 2.232 0 4.133-.537 5.704-1.612 1.57-1.075 2.356-2.232 2.356-3.472V92.172c0-2.315.496-4.299 1.488-5.952.992-1.653 2.273-2.935 3.844-3.844 1.57-.91 3.183-1.364 4.836-1.364 1.984 0 3.803.558 5.456 1.674 1.653 1.116 2.955 2.5 3.906 4.154a10.52 10.52 0 011.426 5.332v29.388c0 1.653.868 2.914 2.604 3.782 1.736.868 3.513 1.302 5.332 1.302zm47.432 0c2.315 0 4.03-.703 5.146-2.108 1.116-1.405 1.674-2.976 1.674-4.712 0-1.653-.558-3.183-1.674-4.588-1.116-1.405-2.831-2.108-5.146-2.108h-4.836c-2.563 0-4.36-.496-5.394-1.488-1.033-.992-1.55-2.687-1.55-5.084V79.4h14.632c1.323 0 2.335-.6 3.038-1.798.703-1.199 1.054-2.542 1.054-4.03 0-1.488-.351-2.831-1.054-4.03-.703-1.199-1.715-1.798-3.038-1.798H452.38V46.416c0-1.488-.847-2.687-2.542-3.596-1.695-.91-3.534-1.364-5.518-1.364-1.819 0-3.596.455-5.332 1.364-1.736.91-2.604 2.108-2.604 3.596v60.14c0 6.944 1.963 12.028 5.89 15.252 3.927 3.224 9.61 4.836 17.05 4.836h4.836zM487.232 54.6c2.397 0 4.443-.806 6.138-2.418 1.695-1.612 2.542-3.41 2.542-5.394 0-2.15-.847-3.989-2.542-5.518-1.695-1.53-3.74-2.294-6.138-2.294-2.397 0-4.464.765-6.2 2.294-1.736 1.53-2.604 3.369-2.604 5.518 0 1.984.868 3.782 2.604 5.394 1.736 1.612 3.803 2.418 6.2 2.418zm0 72.044c2.232 0 4.133-.537 5.704-1.612 1.57-1.075 2.356-2.232 2.356-3.472V72.704c0-1.488-.785-2.687-2.356-3.596-1.57-.91-3.472-1.364-5.704-1.364-2.315 0-4.216.455-5.704 1.364-1.488.91-2.232 2.108-2.232 3.596v48.856c0 1.24.744 2.397 2.232 3.472 1.488 1.075 3.39 1.612 5.704 1.612zm65.247 0c2.066 0 3.926-.434 5.58-1.302 1.653-.868 2.48-2.129 2.48-3.782V92.172c0-4.63-.972-8.845-2.914-12.648-1.943-3.803-4.526-6.84-7.75-9.114-3.224-2.273-6.779-3.41-10.664-3.41-4.134 0-7.626.971-10.478 2.914-2.852 1.943-4.898 4.113-6.138 6.51v-3.72c0-1.488-.682-2.687-2.046-3.596-1.364-.91-3.038-1.364-5.022-1.364-2.315 0-4.216.455-5.704 1.364-1.488.91-2.232 2.108-2.232 3.596v48.856c0 1.24.744 2.397 2.232 3.472 1.488 1.075 3.39 1.612 5.704 1.612 2.232 0 4.133-.537 5.704-1.612 1.57-1.075 2.356-2.232 2.356-3.472V92.172c0-2.315.496-4.299 1.488-5.952.992-1.653 2.273-2.935 3.844-3.844 1.57-.91 3.182-1.364 4.836-1.364 1.984 0 3.802.558 5.456 1.674 1.653 1.116 2.955 2.5 3.906 4.154a10.52 10.52 0 011.426 5.332v29.388c0 1.653.868 2.914 2.604 3.782 1.736.868 3.513 1.302 5.332 1.302zm47.68 1.116c4.464 0 8.328-.558 11.594-1.674 3.265-1.116 5.786-2.48 7.564-4.092 1.777-1.612 2.666-3.12 2.666-4.526 0-.827-.248-1.798-.744-2.914a8.641 8.641 0 00-2.108-2.914c-.91-.827-1.984-1.24-3.224-1.24-1.158 0-2.398.372-3.72 1.116-1.323.744-2.894 1.53-4.712 2.356-1.819.827-4.092 1.24-6.82 1.24-4.299 0-7.792-1.095-10.478-3.286-2.687-2.19-4.03-5.063-4.03-8.618v-1.86h25.172c1.901 0 3.74-.186 5.518-.558 1.777-.372 3.244-1.323 4.402-2.852 1.157-1.53 1.736-4.071 1.736-7.626 0-4.63-1.199-8.68-3.596-12.152-2.398-3.472-5.518-6.2-9.362-8.184-3.844-1.984-8.08-2.976-12.71-2.976-5.043 0-9.61 1.137-13.702 3.41-4.092 2.273-7.358 5.29-9.796 9.052-2.439 3.761-3.658 7.874-3.658 12.338v10.54c0 5.043 1.281 9.486 3.844 13.33 2.562 3.844 6.096 6.82 10.602 8.928 4.505 2.108 9.692 3.162 15.562 3.162zm4.092-35.836h-18.104v-3.472c0-1.984.516-3.7 1.55-5.146 1.033-1.447 2.376-2.563 4.03-3.348 1.653-.785 3.43-1.178 5.332-1.178 1.984 0 3.802.413 5.456 1.24 1.653.827 2.976 1.984 3.968 3.472s1.488 3.183 1.488 5.084c0 1.323-.269 2.211-.806 2.666-.538.455-1.509.682-2.914.682z\"\n        />\n      </g>\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided CSS code defines the styles for a user interface layout, specifically a navigation bar.\n\n**Purpose:**\n\nThe goal of this CSS file is to define the visual appearance and layout of a navigation bar for an application or website.\n\n**Components:**\n\n- **.navbar:**\n    - Background color is set using the `light-dark()` function, which automatically chooses between white or dark-6 based on the theme.\n    - Height: 800px\n    - Width: 300px\n    - Padding: var(--mantine-spacing-md) (excluding the bottom padding)\n    - Flexbox layout with column direction\n    - Border right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))\n\n- **.header:**\n    - Padding: var(--mantine-spacing-md) (excluding the top padding)\n    - Margin left and right: -var(--mantine-spacing-md)\n    - Text color: light-dark(var(--mantine-color-black), var(--mantine-color-white))\n    - Border bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))\n\n- **.links:**\n    - Flexible element that takes up the remaining vertical space\n    - Margin left and right: -var(--mantine-spacing-md)\n\n- **.linksInner:**\n    - Padding top and bottom: var(--mantine-spacing-xl)\n\n- **.footer:**\n    - Margin left and right: -var(--mantine-spacing-md)\n    - Border top: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4))\n\n**Purpose of Each Section:**\n\n- The header section typically contains the application logo or title.\n- The links section typically contains a list of navigation links.\n- The footer section may contain additional information or settings.\n\n**Overall Layout:**\n\nThe navigation bar is a vertical layout with a header, links section, and footer. It is styled with appropriate padding, borders, and colors. The navigation links are typically styled as buttons or links, providing users with easy access to different sections of the application.",
    "input": "",
    "output": ".navbar {\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-6));\n  height: 800px;\n  width: 300px;\n  padding: var(--mantine-spacing-md);\n  padding-bottom: 0;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.header {\n  padding: var(--mantine-spacing-md);\n  padding-top: 0;\n  margin-left: calc(var(--mantine-spacing-md) * -1);\n  margin-right: calc(var(--mantine-spacing-md) * -1);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.links {\n  flex: 1;\n  margin-left: calc(var(--mantine-spacing-md) * -1);\n  margin-right: calc(var(--mantine-spacing-md) * -1);\n}\n\n.linksInner {\n  padding-top: var(--mantine-spacing-xl);\n  padding-bottom: var(--mantine-spacing-xl);\n}\n\n.footer {\n  margin-left: calc(var(--mantine-spacing-md) * -1);\n  margin-right: calc(var(--mantine-spacing-md) * -1);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n"
  },
  {
    "instruction": "**File Name:** NavbarNested.jsx\n\n**Purpose:**\n\nThe `NavbarNested.jsx` file is a React component that serves as a nested navigation bar. It is likely part of a larger application or website.\n\n**Components:**\n\n* `StoryWrapper`: A custom React component that provides a testing environment for the `NavbarNested` component.\n* `NavbarNested`: The main component that represents the nested navigation bar.\n* `attributes.json`: A JSON file containing the attributes used to configure the `NavbarNested` component.\n\n**File Structure:**\n\n* **import statements:** Import the necessary React components and JSON file.\n* **default export:** Defines the title of the component as `NavbarNested`.\n* **Usage function:**\n    * Creates an instance of the `StoryWrapper` component.\n    * Sets the `attributes` prop to the `attributes.json` file.\n    * Passes the `NavbarNested` component as the `component` prop.\n    * Renders the `StoryWrapper` component with the configured `NavbarNested` component.\n\n**How the File Works:**\n\n* The `NavbarNested` component receives the `attributes` prop from the `StoryWrapper`.\n* The `attributes.json` file defines the configuration options for the `NavbarNested` component, such as the navigation links and styling.\n* The `StoryWrapper` provides a testing environment where the `NavbarNested` component can be tested with different configurations.\n\n**Conclusion:**\n\nThe `NavbarNested.jsx` file is a React component that implements a nested navigation bar. It is used to organize and navigate through a website or application. The `attributes.json` file provides a way to customize the navigation links and styling of the `NavbarNested` component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarNested } from './NavbarNested';\n\nexport default { title: 'NavbarNested' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarNested} />;\n}\n"
  },
  {
    "instruction": "**NavbarNested.jsx**\n\nThis file renders a nested navigation menu for a web application.\n\n**Features:**\n\n- Navigation links grouped into categories (Market news, Releases, Analytics, Contracts, Settings, Security)\n- Subcategories within each category (e.g., Market news includes Overview, Forecasts, Outlook, Real time)\n- Icons associated with each category and subcategory\n- Scrollable links section\n- User button in the footer\n\n**Components:**\n\n- **NavbarLinksGroup:** A component that renders a group of links with an icon and label.\n- **Logo:** A component that displays the application logo.\n- **UserButton:** A component that displays a user profile picture and provides access to user settings.\n\n**Data:**\n\n- The `mockdata` array defines the navigation structure, including the categories, subcategories, icons, and links.\n\n**Rendering:**\n\n1. The `NavbarNested` function iterates over the `mockdata` array to create `LinksGroup` components for each category.\n2. Inside each `LinksGroup`, the function renders a list of links based on the `links` property of the category object.\n3. The navigation menu is wrapped in a `nav` element with a CSS class for styling.\n4. The header section displays the application logo and version number.\n5. The footer section contains the `UserButton`.\n\n**Purpose:**\n\nThe purpose of this component is to provide a user-friendly and organized navigation structure for accessing different parts of the application.\n\n**Usage:**\n\nThis component can be used by importing it into other components or files where navigation is required.\n\n**Example:**\n\n```jsx\n<NavbarNested />\n```\n\n**Note:**\n\n- The icons used in the navigation menu are from the `@tabler/icons-react` package.\n- The CSS styles for the navigation menu are defined in the `NavbarNested.module.css` file.",
    "input": "",
    "output": "import {\n  IconAdjustments,\n  IconCalendarStats,\n  IconFileAnalytics,\n  IconGauge,\n  IconLock,\n  IconNotes,\n  IconPresentationAnalytics,\n} from '@tabler/icons-react';\nimport { Code, Group, ScrollArea } from '@mantine/core';\nimport { LinksGroup } from '../NavbarLinksGroup/NavbarLinksGroup';\nimport { UserButton } from '../UserButton/UserButton';\nimport { Logo } from './Logo';\nimport classes from './NavbarNested.module.css';\n\nconst mockdata = [\n  { label: 'Dashboard', icon: IconGauge },\n  {\n    label: 'Market news',\n    icon: IconNotes,\n    initiallyOpened: true,\n    links: [\n      { label: 'Overview', link: '/' },\n      { label: 'Forecasts', link: '/' },\n      { label: 'Outlook', link: '/' },\n      { label: 'Real time', link: '/' },\n    ],\n  },\n  {\n    label: 'Releases',\n    icon: IconCalendarStats,\n    links: [\n      { label: 'Upcoming releases', link: '/' },\n      { label: 'Previous releases', link: '/' },\n      { label: 'Releases schedule', link: '/' },\n    ],\n  },\n  { label: 'Analytics', icon: IconPresentationAnalytics },\n  { label: 'Contracts', icon: IconFileAnalytics },\n  { label: 'Settings', icon: IconAdjustments },\n  {\n    label: 'Security',\n    icon: IconLock,\n    links: [\n      { label: 'Enable 2FA', link: '/' },\n      { label: 'Change password', link: '/' },\n      { label: 'Recovery codes', link: '/' },\n    ],\n  },\n];\n\nexport function NavbarNested() {\n  const links = mockdata.map((item) => <LinksGroup {...item} key={item.label} />);\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.header}>\n        <Group justify=\"space-between\">\n          <Logo style={{ width: 120 }} />\n          <Code fw={700}>v3.1.2</Code>\n        </Group>\n      </div>\n\n      <ScrollArea className={classes.links}>\n        <div className={classes.linksInner}>{links}</div>\n      </ScrollArea>\n\n      <div className={classes.footer}>\n        <UserButton />\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** navbar_with_search.json\n\n**Purpose:**\n\nThe file defines a React component called \"Navbar with search\". It is likely part of a user interface library or application.\n\n**Content:**\n\n```json\n{\n  \"title\": \"Navbar with search\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Explanation:**\n\n* **title:** This field specifies the title of the component, which is \"Navbar with search\".\n* **category:** This field categorizes the component as a \"navbar\".\n* **canvas:**\n    * **center:** This property is set to \"false\". It likely indicates that the navbar should not be centered on the screen.\n\n**Usage:**\n\nThis file likely represents a configuration or template for creating a navbar component with a search functionality. The component would likely have the following features:\n\n* A navigation bar with brand logo and navigation links.\n* A search input field for users to search for content.\n\n**Additional Notes:**\n\n* The file extension \".json\" suggests that it is a JSON file.\n* The contents of the file are likely used by a React library or framework to render the component.\n* The \"center\" property in the \"canvas\" object may be used to adjust the positioning of the navbar on the screen.\n\n**Conclusion:**\n\nThe file \"navbar_with_search.json\" defines a React component called \"Navbar with search\". It provides configuration information such as the title, category, and positioning of the component. The contents of the file are likely used to render a navbar with search functionality in a user interface.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with search\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a sidebar navigation menu. It is responsible for the layout, appearance, and functionality of the sidebar, including the search bar, navigation links, and collection links.\n\n**Components:**\n\n**1. .navbar:**\n- Background color: Matches the body background color.\n- Height: 700px.\n- Width: 300px.\n- Padding: Medium spacing, with no padding at the top.\n- Display: Flexbox, with a column direction.\n- Border-right: 1px solid light-dark(gray-3, dark-4).\n\n**2. .section:**\n- Margin-left and margin-right: Negative medium spacing to eliminate padding.\n- Margin-bottom: Medium spacing.\n- Border-bottom: 1px solid light-dark(gray-3, dark-4) for all sections except the last one.\n\n**3. .searchCode:**\n- Font-weight: Bold (700).\n- Font-size: 10px.\n- Background-color: light-dark(gray-0, dark-7).\n- Border: 1px solid light-dark(gray-2, dark-7).\n\n**4. .mainLinks:**\n- Padding-left and padding-right: Medium spacing with small spacing offset.\n- Padding-bottom: Medium spacing.\n\n**5. .mainLink:**\n- Display: Flexbox, aligned vertically.\n- Width: 100%.\n- Font-size: Extra-small (xs).\n- Padding: 8px small spacing.\n- Border-radius: Small.\n- Font-weight: Medium (500).\n- Color: light-dark(gray-7, dark-0) (text).\n\n**6. .mainLinkInner:**\n- Display: Flexbox, aligned vertically.\n- Flex-grow: 1.\n\n**7. .mainLinkIcon:**\n- Margin-right: Small spacing.\n- Color: light-dark(gray-6, dark-2) (icons).\n\n**8. .mainLinkBadge:**\n- Padding: 0.\n- Width and height: 20px.\n- Pointer-events: none (to prevent badge interaction with links).\n\n**9. .collections:**\n- Padding-left and padding-right: Medium spacing with 6px offset.\n- Padding-bottom: Medium spacing.\n\n**10. .collectionsHeader:**\n- Padding-left: Medium spacing with 2px offset.\n- Padding-right: Medium spacing.\n- Margin-bottom: 5px.\n\n**11. .collectionLink:**\n- Display: Block (single-line).\n- Padding: 8px small spacing.\n- Text-decoration: None.\n- Border-radius: Small.\n- Font-size: Extra-small (xs).\n- Color: light-dark(gray-7, dark-0) (text).\n- Line-height: 1.\n- Font-weight: Medium (500).\n\n**Purpose:**\n\nThe CSS file defines the styles for a sidebar navigation menu that provides users with quick access to various sections of the application. It includes sections for searching, main links, collections, and a search code input field. The navigation menu is visually appealing, well-organized, and user-friendly.",
    "input": "",
    "output": ".navbar {\n  background-color: var(--mantine-color-body);\n  height: 700px;\n  width: 300px;\n  padding: var(--mantine-spacing-md);\n  padding-top: 0;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.section {\n  margin-left: calc(var(--mantine-spacing-md) * -1);\n  margin-right: calc(var(--mantine-spacing-md) * -1);\n  margin-bottom: var(--mantine-spacing-md);\n\n  &:not(:last-of-type) {\n    border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n  }\n}\n\n.searchCode {\n  font-weight: 700;\n  font-size: 10px;\n  background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-7));\n  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-7));\n}\n\n.mainLinks {\n  padding-left: calc(var(--mantine-spacing-md) - var(--mantine-spacing-xs));\n  padding-right: calc(var(--mantine-spacing-md) - var(--mantine-spacing-xs));\n  padding-bottom: var(--mantine-spacing-md);\n}\n\n.mainLink {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  font-size: var(--mantine-font-size-xs);\n  padding: 8px var(--mantine-spacing-xs);\n  border-radius: var(--mantine-radius-sm);\n  font-weight: 500;\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n    color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  }\n}\n\n.mainLinkInner {\n  display: flex;\n  align-items: center;\n  flex: 1;\n}\n\n.mainLinkIcon {\n  margin-right: var(--mantine-spacing-sm);\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-2));\n}\n\n.mainLinkBadge {\n  padding: 0;\n  width: 20px;\n  height: 20px;\n  pointer-events: none;\n}\n\n.collections {\n  padding-left: calc(var(--mantine-spacing-md) - 6px);\n  padding-right: calc(var(--mantine-spacing-md) - 6px);\n  padding-bottom: var(--mantine-spacing-md);\n}\n\n.collectionsHeader {\n  padding-left: calc(var(--mantine-spacing-md) + 2px);\n  padding-right: var(--mantine-spacing-md);\n  margin-bottom: 5px;\n}\n\n.collectionLink {\n  display: block;\n  padding: 8px var(--mantine-spacing-xs);\n  text-decoration: none;\n  border-radius: var(--mantine-radius-sm);\n  font-size: var(--mantine-font-size-xs);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  line-height: 1;\n  font-weight: 500;\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n    color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-0));\n  }\n}\n"
  },
  {
    "instruction": "**Filename:** NavbarSearch.jsx\n\n**Purpose:**\n\nThe file appears to be a React component named `NavbarSearch`. It's likely responsible for rendering a navigation bar with a search functionality.\n\n**Code Breakdown:**\n\n- **Imports:**\n    - `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper`.\n    - `attributes.json` file containing configuration attributes for the `NavbarSearch` component.\n    - `NavbarSearch` component itself.\n\n- **Default Export:**\n    - An object with a `title` property set to `'NavbarSearch'`. This title is likely used for documentation purposes.\n\n- **Usage Function:**\n    - Returns a `StoryWrapper` component.\n    - Passes the `attributes` and `NavbarSearch` components as props to the `StoryWrapper`.\n\n**StoryWrapper Component:**\n\n- The `StoryWrapper` component is likely used for rendering and testing React components.\n- It receives the `attributes` and `NavbarSearch` components as props.\n- The `attributes` prop likely contains configuration options for the `NavbarSearch` component.\n- The `NavbarSearch` component is likely responsible for rendering the navigation bar with a search functionality.\n\n**attributes.json File:**\n\n- The `attributes.json` file likely contains configuration attributes for the `NavbarSearch` component.\n- These attributes could include options such as:\n    - Search input placeholder text\n    - Search button label\n    - Navigation links\n\n**Conclusion:**\n\nThe `NavbarSearch.jsx` file is a React component that renders a navigation bar with a search functionality. It uses the `StoryWrapper` component for rendering and testing purposes. The `attributes.json` file contains configuration options for the `NavbarSearch` component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarSearch } from './NavbarSearch';\n\nexport default { title: 'NavbarSearch' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarSearch} />;\n}\n"
  },
  {
    "instruction": "**NavbarSearch.js**\n\nThis file is a React component that renders a navigation bar with search functionality and navigation links.\n\n**Purpose:**\n\nThe `NavbarSearch` component provides a user interface for searching and navigating within an application. It includes:\n\n- A search bar for finding specific content.\n- Navigation links for accessing different sections of the application.\n- A collection of emoji-labeled links for quick access to specific collections.\n\n**Components:**\n\nThe component uses various Mantine and Tabler components, including:\n\n- `TextInput`: The search input field.\n- `UnstyledButton`: Navigation links.\n- `Badge`: Notification badges.\n- `Group`: Container for the collection links.\n- `Box`: Emoji icons.\n\n**Data:**\n\nThe component receives data for navigation links and collections through two arrays:\n\n- `links`: An array of objects containing icons, labels, and notification counts.\n- `collections`: An array of objects containing emoji and label for each collection.\n\n**Functionality:**\n\n- The component renders navigation links based on the `links` data.\n- Each link includes an icon, label, and notification badge (if present).\n- The component also renders a collection of emoji-labeled links based on the `collections` data.\n- Clicking on a collection link does nothing (preventDefault).\n- A tooltip is provided for creating new collections.\n\n**Rendering:**\n\nThe component renders a `nav` element with three sections:\n\n- A section for the user button.\n- A section for the search input field.\n- A section for the navigation links and collections.\n\n**Usage:**\n\nThis component can be used to provide a search and navigation functionality within any React application.\n\n**Example:**\n\n```\n<NavbarSearch />\n```\n\n**Note:**\n\n- The `UserButton` component is assumed to be imported from another component.\n- The `NavbarSearch.module.css` file contains the styles for the component.",
    "input": "",
    "output": "import { IconBulb, IconCheckbox, IconPlus, IconSearch, IconUser } from '@tabler/icons-react';\nimport {\n  ActionIcon,\n  Badge,\n  Box,\n  Code,\n  Group,\n  Text,\n  TextInput,\n  Tooltip,\n  UnstyledButton,\n} from '@mantine/core';\nimport { UserButton } from '../UserButton/UserButton';\nimport classes from './NavbarSearch.module.css';\n\nconst links = [\n  { icon: IconBulb, label: 'Activity', notifications: 3 },\n  { icon: IconCheckbox, label: 'Tasks', notifications: 4 },\n  { icon: IconUser, label: 'Contacts' },\n];\n\nconst collections = [\n  { emoji: '👍', label: 'Sales' },\n  { emoji: '🚚', label: 'Deliveries' },\n  { emoji: '💸', label: 'Discounts' },\n  { emoji: '💰', label: 'Profits' },\n  { emoji: '✨', label: 'Reports' },\n  { emoji: '🛒', label: 'Orders' },\n  { emoji: '📅', label: 'Events' },\n  { emoji: '🙈', label: 'Debts' },\n  { emoji: '💁‍♀️', label: 'Customers' },\n];\n\nexport function NavbarSearch() {\n  const mainLinks = links.map((link) => (\n    <UnstyledButton key={link.label} className={classes.mainLink}>\n      <div className={classes.mainLinkInner}>\n        <link.icon size={20} className={classes.mainLinkIcon} stroke={1.5} />\n        <span>{link.label}</span>\n      </div>\n      {link.notifications && (\n        <Badge size=\"sm\" variant=\"filled\" className={classes.mainLinkBadge}>\n          {link.notifications}\n        </Badge>\n      )}\n    </UnstyledButton>\n  ));\n\n  const collectionLinks = collections.map((collection) => (\n    <a\n      href=\"#\"\n      onClick={(event) => event.preventDefault()}\n      key={collection.label}\n      className={classes.collectionLink}\n    >\n      <Box component=\"span\" mr={9} fz={16}>\n        {collection.emoji}\n      </Box>{' '}\n      {collection.label}\n    </a>\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.section}>\n        <UserButton />\n      </div>\n\n      <TextInput\n        placeholder=\"Search\"\n        size=\"xs\"\n        leftSection={<IconSearch size={12} stroke={1.5} />}\n        rightSectionWidth={70}\n        rightSection={<Code className={classes.searchCode}>Ctrl + K</Code>}\n        styles={{ section: { pointerEvents: 'none' } }}\n        mb=\"sm\"\n      />\n\n      <div className={classes.section}>\n        <div className={classes.mainLinks}>{mainLinks}</div>\n      </div>\n\n      <div className={classes.section}>\n        <Group className={classes.collectionsHeader} justify=\"space-between\">\n          <Text size=\"xs\" fw={500} c=\"dimmed\">\n            Collections\n          </Text>\n          <Tooltip label=\"Create collection\" withArrow position=\"right\">\n            <ActionIcon variant=\"default\" size={18}>\n              <IconPlus size={12} stroke={1.5} />\n            </ActionIcon>\n          </Tooltip>\n        </Group>\n        <div className={classes.collections}>{collectionLinks}</div>\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file for a user interface component. It defines the properties of a \"Navbar with SegmentedControl\" element.\n\n**Purpose:**\n\nThe purpose of this file is to provide configuration options for a specific UI component. In this case, it specifies the title, category, and layout properties of a navbar with a segmented control.\n\n**Properties:**\n\n* **title:** The title of the navbar, which is \"Navbar with SegmentedControl\".\n* **category:** The category of the navbar, which is \"navbars\".\n* **canvas:** An object containing the canvas properties.\n    * **center:** Whether the navbar should be centered on the screen. In this case, it is set to `false`.\n\n**Layout:**\n\nThe configuration file does not specify the layout of the navbar or segmented control. The actual layout and appearance of these elements would be determined by the framework or code that is using the configuration file.\n\n**Usage:**\n\nThis configuration file can be used to create and configure a navbar with a segmented control in a user interface. It can be used in conjunction with a UI framework or development tool to render the component with the specified properties.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Navbar with SegmentedControl\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Additional Notes:**\n\n* The `start_of_turn` tags are not part of the JSON configuration file. They are used to indicate the start and end of the prompt.\n* The `canvas` property is an object that contains additional configuration options for the canvas where the navbar will be rendered.\n* The specific properties and options available in the `canvas` object may vary depending on the framework or tool being used.",
    "input": "",
    "output": "{\n  \"title\": \"Navbar with SegmentedControl\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines the styles for a navigation bar (navbar) in a web application. It specifies the layout, appearance, and behavior of different elements within the navbar.\n\n**Navbar Structure:**\n\n- **.navbar:**\n    - Background color set to the `--mantine-color-body` variable, which typically represents the main background color of the page.\n    - Height and width of 840px and 300px, respectively.\n    - Padding of `--mantine-spacing-md` (typically 16px).\n    - Display as a flexbox container with a column direction.\n    - Border right with a 1px solid line in light-dark variation of gray-3 or dark-4.\n\n- **.navbarMain:**\n    - Flex property set to 1, allowing it to take up the remaining available space in the navbar.\n    - Margin-top of `--mantine-spacing-xl` (typically 48px).\n\n- **.title:**\n    - Text transformed to uppercase.\n    - Letter spacing of -0.25px.\n\n- **.link:**\n    - Display as a flexbox container with center alignment.\n    - Text decoration set to none.\n    - Font size of `--mantine-font-size-sm`.\n    - Color in light-dark variation of gray-7 or dark-1.\n    - Padding of `--mantine-spacing-xs` and `--mantine-spacing-sm`.\n    - Border radius of `--mantine-radius-sm`.\n    - Font weight of 500.\n\n    - **Hover state:**\n        - Background color set to light-dark variation of gray-0 or dark-6.\n        - Color set to light-dark variation of black or white.\n        - .linkIcon color updated accordingly.\n\n    - **Active state:**\n        - Background color set to `--mantine-color-blue-light`.\n        - Color and .linkIcon color set to `--mantine-color-blue-light-color`.\n\n- **.linkIcon:**\n    - Color in light-dark variation of gray-6 or dark-2.\n    - Margin-right of `--mantine-spacing-sm`.\n    - Width and height of 25px.\n\n- **.footer:**\n    - Border-top with a 1px solid line in light-dark variation of gray-3 or dark-4.\n    - Padding-top of `--mantine-spacing-md`.\n\n**Purpose:**\n\nThe purpose of this CSS file is to define the visual and interactive elements of a navigation bar. It provides the styles for the navbar's layout, navigation links, branding elements, and any other necessary components.\n\n**Additional Notes:**\n\n- The CSS file uses the `light-dark()` function to automatically adjust the colors based on the user's theme preference (light or dark mode).\n- The `--mantine-color-*` variables likely represent predefined colors within the Mantine CSS framework.\n- The specific values and configurations used in the CSS file may vary depending on the design requirements and chosen Mantine theme.",
    "input": "",
    "output": ".navbar {\n  background-color: var(--mantine-color-body);\n  height: 840px;\n  width: 300px;\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.navbarMain {\n  flex: 1;\n  margin-top: var(--mantine-spacing-xl);\n}\n\n.title {\n  text-transform: uppercase;\n  letter-spacing: -0.25px;\n}\n\n.link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  font-size: var(--mantine-font-size-sm);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1));\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);\n  border-radius: var(--mantine-radius-sm);\n  font-weight: 500;\n\n  &:hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n\n    & .linkIcon {\n      color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n    }\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      background-color: var(--mantine-color-blue-light);\n      color: var(--mantine-color-blue-light-color);\n\n      & .linkIcon {\n        color: var(--mantine-color-blue-light-color);\n      }\n    }\n  }\n}\n\n.linkIcon {\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-2));\n  margin-right: var(--mantine-spacing-sm);\n  width: 25px;\n  height: 25px;\n}\n\n.footer {\n  border-top: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n  padding-top: var(--mantine-spacing-md);\n}\n"
  },
  {
    "instruction": "**File Name:** `NavbarSegmented.jsx`\n\n**File Purpose:**\n\nThe `NavbarSegmented.jsx` file is a React component that serves as a segmented navigation bar. It provides a user interface with a set of options or segments, allowing users to navigate between different sections of an application.\n\n**Components:**\n\n- `StoryWrapper`: A custom component that wraps the `NavbarSegmented` component and provides additional functionality for rendering and testing.\n- `NavbarSegmented`: The main component that renders the segmented navigation bar.\n\n**Imports:**\n\n- `StoryWrapper`: Imports the `StoryWrapper` component from the `StoryWrapper` module.\n- `attributes.json`: Imports an JSON file that defines the attributes for the `NavbarSegmented` component.\n- `NavbarSegmented`: Imports the `NavbarSegmented` component itself.\n\n**Code Structure:**\n\n- **Export Default:** Exports an object with a `title` property set to `NavbarSegmented`. This title is used for documentation purposes.\n- **Usage Function:** Defines a `Usage` function that returns a `StoryWrapper` component. The `attributes` prop is set to the imported `attributes.json` file, while the `component` prop is set to the `NavbarSegmented` component.\n\n**How the File Works:**\n\n- The `Usage` function creates an instance of the `StoryWrapper` component.\n- The `StoryWrapper` component wraps the `NavbarSegmented` component and provides additional rendering and testing functionality.\n- The `NavbarSegmented` component renders a segmented navigation bar based on the attributes specified in the `attributes.json` file.\n\n**Purpose of attributes.json:**\n\nThe `attributes.json` file defines the following attributes for the `NavbarSegmented` component:\n\n- `segments`: An array of objects that represent the segments of the navigation bar. Each object should have a `label` property (the text displayed on the segment) and an `onClick` property (a function that is called when the segment is clicked).\n\n**Usage:**\n\nTo use the `NavbarSegmented` component, import it into your React application and specify the `attributes` prop with the desired segment configuration.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component is used for rendering and testing purposes.\n- The `NavbarSegmented` component can be customized with additional styles and functionality.\n- The `attributes.json` file allows for easy configuration of the navigation bar segments.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarSegmented } from './NavbarSegmented';\n\nexport default { title: 'NavbarSegmented' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarSegmented} />;\n}\n"
  },
  {
    "instruction": "**NavbarSegmented.js**\n\n**Purpose:**\n\nThe `NavbarSegmented.js` file is a React component that creates a segmented navigation bar with two sections: \"Account\" and \"System\". Each section includes a list of links with icons.\n\n**Components:**\n\n* **React:** The component is built using React components.\n* **Mantine:** The `SegmentedControl` and `Text` components are used from the Mantine library for styling and layout.\n* **Tabler Icons:** The component uses icons from the Tabler Icons library for the navigation links.\n\n**Data:**\n\nThe component defines an object called `tabs` that contains two sections:\n- `account`: An array of links related to account settings.\n- `general`: An array of links related to system management.\n\n**State Management:**\n\n- `section`: A state variable that tracks the currently selected section.\n- `active`: A state variable that tracks the currently active link within the selected section.\n\n**Functionality:**\n\n- The component renders a navigation bar with two sections.\n- Each section includes a list of links with icons.\n- Clicking on a link changes the `active` state variable to highlight the selected link.\n- Clicking on the \"Change account\" or \"Logout\" links triggers a click event handler but prevents navigation to prevent unwanted redirects.\n\n**CSS:**\n\nThe `NavbarSegmented.module.css` file contains styles for the component, including:\n- Navigation bar layout\n- Link styles\n- Icon styles\n\n**Usage:**\n\nThe `NavbarSegmented` component can be used to provide a segmented navigation bar within a React application.\n\n**Example:**\n\n```\n<NavbarSegmented />\n```\n\n**Additional Notes:**\n\n- The `start_of_turn` tag in the prompt indicates the start of a new section of text.\n- The code snippet provided contains a complete React component that can be used as-is.\n- The component is well-documented with comments explaining the functionality of each section.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  Icon2fa,\n  IconBellRinging,\n  IconDatabaseImport,\n  IconFileAnalytics,\n  IconFingerprint,\n  IconKey,\n  IconLicense,\n  IconLogout,\n  IconMessage2,\n  IconMessages,\n  IconReceipt2,\n  IconReceiptRefund,\n  IconSettings,\n  IconShoppingCart,\n  IconSwitchHorizontal,\n  IconUsers,\n} from '@tabler/icons-react';\nimport { SegmentedControl, Text } from '@mantine/core';\nimport classes from './NavbarSegmented.module.css';\n\nconst tabs = {\n  account: [\n    { link: '', label: 'Notifications', icon: IconBellRinging },\n    { link: '', label: 'Billing', icon: IconReceipt2 },\n    { link: '', label: 'Security', icon: IconFingerprint },\n    { link: '', label: 'SSH Keys', icon: IconKey },\n    { link: '', label: 'Databases', icon: IconDatabaseImport },\n    { link: '', label: 'Authentication', icon: Icon2fa },\n    { link: '', label: 'Other Settings', icon: IconSettings },\n  ],\n  general: [\n    { link: '', label: 'Orders', icon: IconShoppingCart },\n    { link: '', label: 'Receipts', icon: IconLicense },\n    { link: '', label: 'Reviews', icon: IconMessage2 },\n    { link: '', label: 'Messages', icon: IconMessages },\n    { link: '', label: 'Customers', icon: IconUsers },\n    { link: '', label: 'Refunds', icon: IconReceiptRefund },\n    { link: '', label: 'Files', icon: IconFileAnalytics },\n  ],\n};\n\nexport function NavbarSegmented() {\n  const [section, setSection] = useState<'account' | 'general'>('account');\n  const [active, setActive] = useState('Billing');\n\n  const links = tabs[section].map((item) => (\n    <a\n      className={classes.link}\n      data-active={item.label === active || undefined}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <div>\n        <Text fw={500} size=\"sm\" className={classes.title} c=\"dimmed\" mb=\"xs\">\n          bgluesticker@mantine.dev\n        </Text>\n\n        <SegmentedControl\n          value={section}\n          onChange={(value: any) => setSection(value)}\n          transitionTimingFunction=\"ease\"\n          fullWidth\n          data={[\n            { label: 'Account', value: 'account' },\n            { label: 'System', value: 'general' },\n          ]}\n        />\n      </div>\n\n      <div className={classes.navbarMain}>{links}</div>\n\n      <div className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a simple navbar with the following properties:\n\n**Title:** Simple navbar\n**Category:** navbars\n\n**Canvas Configuration:**\n\n* **center:** false\n\n**Purpose:**\n\nThe purpose of this file is to configure a navbar in a UI framework or tool. The navbar is typically a navigation menu that provides links to different sections or pages within a website or application.\n\n**Properties:**\n\n* **title:** This property specifies the title of the navbar. In this case, the title is \"Simple navbar\".\n* **category:** This property defines the category or group to which the navbar belongs. In this case, the category is \"navbars\".\n* **canvas:** This property contains configuration options for the canvas where the navbar will be displayed. In this case, the center property is set to false, indicating that the navbar should not be centered within the canvas.\n\n**Usage:**\n\nThis JSON file can be used in conjunction with a UI framework or tool that supports the configuration of navigation menus. The file can be loaded and used to create a navbar with the specified title, category, and canvas configuration.\n\n**Example:**\n\nAssuming the JSON file is saved as \"navbar.json\", the following command could be used to create a navbar in the UI framework or tool:\n\n```\nnavbar --file navbar.json\n```\n\n**Additional Notes:**\n\n* The specific UI framework or tool used will determine how the navbar is created and implemented.\n* The canvas configuration options may vary depending on the framework or tool being used.\n* The \"center\" property can be used to specify whether the navbar should be centered within the canvas or not.\n* The \"category\" property can be used to group navbars together for easy management and navigation.",
    "input": "",
    "output": "{\n  \"title\": \"Simple navbar\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a navigation bar component, commonly used in web applications to provide navigation links and a visual layout.\n\n**Components:**\n\n* **.navbar:**\n    * Represents the entire navigation bar.\n    * Has a fixed height of 700px and width of 300px.\n    * Uses padding to create spacing within the navbar.\n    * Uses flexbox to layout its child elements in a column direction.\n    * Adds a right border with a light-dark variation of gray or dark gray, depending on the theme.\n\n* **.navbarMain:**\n    * Flex-grow property set to 1, allowing it to take up the remaining vertical space within the navbar.\n\n* **.header:**\n    * Contains header content.\n    * Has padding and margin at the bottom and top, respectively.\n    * Adds a bottom border with a light-dark variation of gray or dark gray.\n\n* **.footer:**\n    * Contains footer content.\n    * Has padding and margin at the top and bottom, respectively.\n    * Adds a top border with a light-dark variation of gray or dark gray.\n\n* **.link:**\n    * Represents a navigation link.\n    * Uses flexbox to align the icon and text vertically.\n    * Has text decoration set to none.\n    * Uses font size, color, padding, border radius, and font weight for styling.\n    * Includes hover and active states:\n        * On hover, changes background color, text color, and icon color.\n        * In the active state, highlights the link with a blue background and text color, along with a blue icon color.\n\n* **.linkIcon:**\n    * Represents the icon displayed in the navigation link.\n    * Uses color, margin, width, and height for styling.\n\n**Usage:**\n\nThe CSS file provides a template for creating a navigation bar with different sections, icons, and hover/active effects. This component can be integrated into web pages to provide users with easy navigation options.\n\n**Additional Notes:**\n\n* The CSS uses the Mantine CSS framework, which provides a set of predefined styles and utilities.\n* The light-dark() function is used to specify the color variations based on the theme.\n* The @mixin hover selector is used to define the hover styles.",
    "input": "",
    "output": ".navbar {\n  height: 700px;\n  width: 300px;\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.navbarMain {\n  flex: 1;\n}\n\n.header {\n  padding-bottom: var(--mantine-spacing-md);\n  margin-bottom: calc(var(--mantine-spacing-md) * 1.5);\n  border-bottom: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.footer {\n  padding-top: var(--mantine-spacing-md);\n  margin-top: var(--mantine-spacing-md);\n  border-top: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n}\n\n.link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  font-size: var(--mantine-font-size-sm);\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1));\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);\n  border-radius: var(--mantine-radius-sm);\n  font-weight: 500;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n    color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n\n    .linkIcon {\n      color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\n    }\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      background-color: var(--mantine-color-blue-light);\n      color: var(--mantine-color-blue-light-color);\n\n      .linkIcon {\n        color: var(--mantine-color-blue-light-color);\n      }\n    }\n  }\n}\n\n.linkIcon {\n  color: light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-2));\n  margin-right: var(--mantine-spacing-sm);\n  width: 25px;\n  height: 25px;\n}\n"
  },
  {
    "instruction": "**File Name:** NavbarSimple.jsx\n\n**Purpose:**\n\nThe `NavbarSimple.jsx` file is a React component that serves as a simple navigation bar. It is part of a React application and is responsible for displaying a navigation menu with a few key elements.\n\n**Functionality:**\n\n- **Imports:**\n    - `StoryWrapper`: A custom React component used for storybook documentation.\n    - `attributes.json`: A JSON file containing configuration attributes for the `NavbarSimple` component.\n    - `NavbarSimple`: The component itself.\n\n- **Component Declaration:**\n    - The file exports an object with the title `NavbarSimple`. This object is likely used to generate documentation or metadata for the component.\n\n- **Usage Function:**\n    - The `Usage` function creates an instance of the `StoryWrapper` component.\n    - It passes the `attributes` and `NavbarSimple` components as props to the `StoryWrapper`.\n    - The `StoryWrapper` renders the `NavbarSimple` component with the specified attributes.\n\n**Components:**\n\n- **StoryWrapper:** A React component that provides a convenient way to display and document React components.\n- **NavbarSimple:** The actual navigation bar component.\n- **attributes.json:** A JSON file containing attributes for the `NavbarSimple` component, such as button labels, navigation links, and styles.\n\n**Usage:**\n\nThe `NavbarSimple.jsx` file can be used to create a simple navigation bar in a React application. The `StoryWrapper` component provides a convenient way to document and showcase the component's functionality.\n\n**Additional Notes:**\n\n- The `attributes.json` file should contain the necessary configuration for the `NavbarSimple` component, such as the navigation links and button labels.\n- The `NavbarSimple` component should be styled using CSS or other styling techniques.\n- The `StoryWrapper` component can be customized to provide additional features or functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarSimple } from './NavbarSimple';\n\nexport default { title: 'NavbarSimple' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarSimple} />;\n}\n"
  },
  {
    "instruction": "**NavbarSimple.js**\n\nThis file is a React component that represents a simple navigation bar. It provides a list of links with icons and a logout button.\n\n**Purpose:**\n\n* To navigate between different sections of the application.\n* To provide access to user settings and account management options.\n\n**Features:**\n\n* **Links:**\n    * Seven links with labels such as \"Notifications\", \"Billing\", \"Security\", etc.\n    * Each link is associated with an icon from the '@tabler/icons-react' library.\n    * The `active` state variable is used to highlight the current link.\n* **Footer:**\n    * A link to change the account.\n    * A logout button.\n\n**Implementation:**\n\n* Uses the `useState` hook to manage the `active` state.\n* Maps the `data` array to render the links.\n* Uses CSS classes from the `NavbarSimple.module.css` file to style the components.\n\n**Data:**\n\nThe `data` array defines the links and their corresponding icons:\n\n```\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  // ...\n  { link: '', label: 'Logout', icon: IconLogout },\n];\n```\n\n**Usage:**\n\nThe `NavbarSimple` component can be imported and rendered in other parts of the application.\n\n**Example:**\n\n```\n<NavbarSimple />\n```\n\n**Output:**\n\nA navigation bar with seven links, an account change link, and a logout button. The current link is highlighted based on the `active` state.\n\n**Additional Notes:**\n\n* The `MantineLogo` component is used to display the application logo.\n* The `Code` component from the `@mantine/core` library is used to display the version number.\n* The `onClick` event handler prevents the default link behavior and updates the `active` state.\n* The `data-active` attribute is used to add a CSS class to the active link.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  Icon2fa,\n  IconBellRinging,\n  IconDatabaseImport,\n  IconFingerprint,\n  IconKey,\n  IconLogout,\n  IconReceipt2,\n  IconSettings,\n  IconSwitchHorizontal,\n} from '@tabler/icons-react';\nimport { Code, Group } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './NavbarSimple.module.css';\n\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  { link: '', label: 'Billing', icon: IconReceipt2 },\n  { link: '', label: 'Security', icon: IconFingerprint },\n  { link: '', label: 'SSH Keys', icon: IconKey },\n  { link: '', label: 'Databases', icon: IconDatabaseImport },\n  { link: '', label: 'Authentication', icon: Icon2fa },\n  { link: '', label: 'Other Settings', icon: IconSettings },\n];\n\nexport function NavbarSimple() {\n  const [active, setActive] = useState('Billing');\n\n  const links = data.map((item) => (\n    <a\n      className={classes.link}\n      data-active={item.label === active || undefined}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.navbarMain}>\n        <Group className={classes.header} justify=\"space-between\">\n          <MantineLogo size={28} />\n          <Code fw={700}>v3.1.2</Code>\n        </Group>\n        {links}\n      </div>\n\n      <div className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** Simple navbar\n\n**File Type:** JSON\n\n**Description:**\n\nThe JSON file you provided defines a simple navbar configuration for a design tool or platform. It contains the following information:\n\n**Title:** Simple navbar\n**Category:** navbars\n\n**Canvas Configuration:**\n\n* **center:** false\n\n**Purpose:**\n\nThe purpose of this JSON file is to define the structure and settings for a simple navbar. The navbar will typically contain navigation links, branding elements, and other visual components.\n\n**Key Points:**\n\n* **title:** The title of the navbar, which is displayed as a heading or title.\n* **category:** The category or group to which the navbar belongs. In this case, it is categorized as \"navbars\".\n* **canvas:**\n    * **center:** This property specifies whether the navbar should be centered on the screen. In this case, it is set to \"false\", indicating that the navbar should be aligned to the left.\n\n**Usage:**\n\nThis JSON file can be used to configure and create a simple navbar within a design tool or platform. It provides the necessary information for rendering the navbar, including its title, category, and canvas settings.\n\n**Additional Notes:**\n\n* The specific design and layout of the navbar will depend on the design tool or platform being used.\n* Additional properties and settings may be available depending on the tool or platform being used.\n* The JSON file can be saved with a .json extension.",
    "input": "",
    "output": "{\n  \"title\": \"Simple navbar\",\n  \"category\": \"navbars\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a navigation bar with a sidebar layout. It includes the layout, spacing, colors, and hover effects for different elements within the navigation bar.\n\n**Structure:**\n\nThe CSS file consists of a series of selectors that define the styles for different HTML elements. The selectors are grouped into sections, each representing a distinct element or group of elements.\n\n**Key Elements:**\n\n* **.navbar:** Represents the entire navigation bar.\n* **.navbarMain:** Represents the main content area within the navigation bar.\n* **.header:** Represents the header section of the navigation bar.\n* **.footer:** Represents the footer section of the navigation bar.\n* **.version:** Represents the version information displayed in the navigation bar.\n* **.link:** Represents a navigation link.\n* **.linkIcon:** Represents an icon displayed next to each navigation link.\n\n**Styles:**\n\n* **Navbar:**\n    * Height: 700px\n    * Width: 300px\n    * Padding: Medium spacing\n    * Display: flex\n    * Flex-direction: column\n    * Background-color: Blue (filled)\n* **Link:**\n    * Display: flex\n    * Align-items: center\n    * Text-decoration: none\n    * Font-size: Small\n    * Color: White\n    * Padding: Extra small spacing and small spacing\n    * Border-radius: Small radius\n    * Font-weight: 500\n    * Hover effects:\n        * Background-color: Blue (7)\n        * Color: White\n        * LinkIcon color: White\n* **Active Link:**\n    * Box-shadow: Small shadow\n    * Background-color: White\n    * Color: Blue (filled)\n    * LinkIcon color: Blue (filled)\n* **LinkIcon:**\n    * Color: Blue (1)\n    * Margin-right: Small spacing\n    * Width: 25px\n    * Height: 25px\n\n**Purpose:**\n\nThe purpose of this CSS file is to style the navigation bar to provide a consistent and visually appealing user interface. It includes features such as:\n\n* A sidebar layout\n* A header section\n* A footer section\n* Navigation links\n* Version information\n* Hover effects on navigation links\n\n**Additional Notes:**\n\n* The CSS file uses variables for spacing, colors, and font sizes.\n* The `@mixin hover` rule defines a set of styles that are applied when hovering over a navigation link.\n* The `[data-active]` selector is used to target the active navigation link.",
    "input": "",
    "output": ".navbar {\n  height: 700px;\n  width: 300px;\n  padding: var(--mantine-spacing-md);\n  display: flex;\n  flex-direction: column;\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.navbarMain {\n  flex: 1;\n}\n\n.header {\n  padding-bottom: var(--mantine-spacing-md);\n  margin-bottom: calc(var(--mantine-spacing-md) * 1.5);\n  border-bottom: 1px solid var(--mantine-color-blue-7);\n}\n\n.footer {\n  padding-top: var(--mantine-spacing-md);\n  margin-top: var(--mantine-spacing-md);\n  border-top: 1px solid var(--mantine-color-blue-7);\n}\n\n.version {\n  background-color: var(--mantine-color-blue-7);\n  color: var(--mantine-color-white);\n}\n\n.link {\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  font-size: var(--mantine-font-size-sm);\n  color: var(--mantine-color-white);\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);\n  border-radius: var(--mantine-radius-sm);\n  font-weight: 500;\n\n  @mixin hover {\n    background-color: var(--mantine-color-blue-7);\n    color: var(--mantine-color-white);\n\n    .linkIcon {\n      color: var(--mantine-color-white);\n    }\n  }\n\n  &[data-active] {\n    &,\n    &:hover {\n      box-shadow: var(--mantine-shadow-sm);\n      background-color: var(--mantine-color-white);\n      color: var(--mantine-color-blue-filled);\n\n      .linkIcon {\n        color: var(--mantine-color-blue-filled);\n      }\n    }\n  }\n}\n\n.linkIcon {\n  color: var(--mantine-color-blue-1);\n  margin-right: var(--mantine-spacing-sm);\n  width: 25px;\n  height: 25px;\n}\n"
  },
  {
    "instruction": "**File Name:** NavbarSimpleColored.jsx\n\n**Purpose:**\n\nThe file is a React component that displays a simple colored navbar. It is part of a storybook project, which is used to showcase and document React components.\n\n**Components:**\n\n* **NavbarSimpleColored:** A React component that renders the simple colored navbar.\n* **StoryWrapper:** A React component that provides a consistent and reusable environment for showcasing components.\n* **attributes.json:** A JSON file that contains the attributes for the `NavbarSimpleColored` component.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * Imports the `StoryWrapper` component from the `StoryWrapper` module.\n    * Imports the `attributes` JSON file.\n    * Imports the `NavbarSimpleColored` component.\n* **Default Export:**\n    * Exports an object with the title `'NavbarSimpleColored'`.\n* **Usage Function:**\n    * Returns a `StoryWrapper` component with the following props:\n        * `attributes`: The `attributes` JSON file.\n        * `component`: The `NavbarSimpleColored` component.\n\n**Storybook Usage:**\n\nThe `NavbarSimpleColored.jsx` file is used in a storybook project to demonstrate how the `NavbarSimpleColored` component works. When this component is included in a storybook project, it will render the simple colored navbar along with any attributes specified in the `attributes.json` file.\n\n**Additional Notes:**\n\n* The `attributes.json` file likely contains properties such as the navbar's background color, font size, and padding.\n* The `StoryWrapper` component provides a convenient way to showcase components with different attributes and configurations.\n* Storybook is a popular tool for building and documenting React components.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NavbarSimpleColored } from './NavbarSimpleColored';\n\nexport default { title: 'NavbarSimpleColored' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NavbarSimpleColored} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file `NavbarSimpleColored.js` is a React component that represents a simple navigation bar with colored links and icons. It provides a user interface for navigation and access to various features within the application.\n\n**Functionality:**\n\n- **Links:** The component displays a list of links, each representing a different section or setting.\n- **Icons:** Each link is accompanied by an icon from the `@tabler/icons-react` library.\n- **Active State:** The state of the active link is managed using the `useState` hook.\n- **Click Handling:** Clicking on a link triggers an event handler that updates the active state and prevents the default link behavior.\n- **Header:** The navigation bar includes a logo and a version number.\n- **Footer:** The footer provides links for account change and logout.\n\n**Data:**\n\nThe component uses an array of objects to define the links and their corresponding icons:\n\n```\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  // ...\n];\n```\n\n**Usage:**\n\nThe `NavbarSimpleColored` component can be imported and rendered within an application. It will automatically generate the navigation links and icons based on the `data` array.\n\n**Styling:**\n\nThe component uses a CSS module named `NavbarSimpleColored.module.css` to style the navigation links, icons, and other elements.\n\n**Key Features:**\n\n- Simple and intuitive navigation structure.\n- Visually appealing with colored links and icons.\n- Active state indication for the current page.\n- Logout and account change options in the footer.\n\n**Purpose:**\n\nThe purpose of this component is to provide a user-friendly navigation experience within an application. It allows users to easily access different sections, settings, and features.",
    "input": "",
    "output": "import { useState } from 'react';\nimport {\n  Icon2fa,\n  IconBellRinging,\n  IconDatabaseImport,\n  IconFingerprint,\n  IconKey,\n  IconLogout,\n  IconReceipt2,\n  IconSettings,\n  IconSwitchHorizontal,\n} from '@tabler/icons-react';\nimport { Code, Group } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\nimport classes from './NavbarSimpleColored.module.css';\n\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  { link: '', label: 'Billing', icon: IconReceipt2 },\n  { link: '', label: 'Security', icon: IconFingerprint },\n  { link: '', label: 'SSH Keys', icon: IconKey },\n  { link: '', label: 'Databases', icon: IconDatabaseImport },\n  { link: '', label: 'Authentication', icon: Icon2fa },\n  { link: '', label: 'Other Settings', icon: IconSettings },\n];\n\nexport function NavbarSimpleColored() {\n  const [active, setActive] = useState('Billing');\n\n  const links = data.map((item) => (\n    <a\n      className={classes.link}\n      data-active={item.label === active || undefined}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <nav className={classes.navbar}>\n      <div className={classes.navbarMain}>\n        <Group className={classes.header} justify=\"space-between\">\n          <MantineLogo size={28} inverted style={{ color: 'white' }} />\n          <Code fw={700} className={classes.version}>\n            v3.1.2\n          </Code>\n        </Group>\n        {links}\n      </div>\n\n      <div className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </div>\n    </nav>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided describes a configuration for a 404 (Page Not Found) page. It specifies the title, category, responsiveness, and layout of the page.\n\n**Title:**\n\n- `title`: \"404 page with image\"\n\n**Category:**\n\n- `category`: \"error-pages\"\n\n**Responsiveness:**\n\n- `responsive`: true\n\n**Canvas Layout:**\n\n- `canvas`:\n    - `center`: false\n\n**Explanation:**\n\n- **Title:** The title of the page is set to \"404 page with image.\"\n- **Category:** The page is categorized as an \"error-pages\" page.\n- **Responsiveness:** The page is designed to be responsive and automatically adapt to different screen sizes.\n- **Canvas Layout:**\n    - `center`: False indicates that the content should not be centered within the canvas.\n\n**Purpose:**\n\nThe purpose of this configuration file is to define the layout and content of a 404 page. This page is displayed when a user navigates to a non-existent page on the website.\n\n**Additional Notes:**\n\n- The specific content and design of the page are not included in this configuration file.\n- The `center` property in the `canvas` object determines whether the content should be centered within the canvas.\n- The `category` property is used for organizational purposes and can be used to group similar pages together.",
    "input": "",
    "output": "{\n  \"title\": \"404 page with image\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file is a CSS stylesheet that defines styling rules for a web page. It is responsible for defining the visual appearance of elements on the page, such as padding, font size, and display properties.\n\n**Key Features:**\n\n**1. Padding:**\n- `padding-top: 80px;`: Adds a 80px padding to the top of the root element.\n- `padding-bottom: 80px;`: Adds a 80px padding to the bottom of the root element.\n\n**2. Title:**\n- `font-weight: 500;`: Sets the font weight to 500 (medium).\n- `font-size: 34px;`: Sets the font size to 34px.\n- `margin-bottom: var(--mantine-spacing-md);`: Adds a spacing of the value specified by the `--mantine-spacing-md` CSS variable to the bottom of the title element.\n- `font-family: Outfit, var(--mantine-font-family);`: Sets the font family to Outfit, followed by the value specified by the `--mantine-font-family` CSS variable.\n- Media query for small screens (max-width: $mantine-breakpoint-sm):\n    - `font-size: 32px;`: Sets the font size to 32px on small screens.\n\n**3. Control:**\n- Media query for small screens (max-width: $mantine-breakpoint-sm):\n    - `width: 100%;`: Sets the width to 100% on small screens.\n\n**4. Mobile and Desktop Images:**\n- `@media (min-width: 48em)`:\n    - `display: none;`: Hides the element on screens with a minimum width of 768px (desktop).\n- `@media (max-width: 47.99em)`:\n    - `display: none;`: Hides the element on screens with a maximum width of 767px (mobile).\n\n**Conclusion:**\n\nThe CSS file defines a set of styling rules that control the appearance of elements on a web page, including padding, font size, display properties, and media queries for responsiveness. The file aims to create a consistent and visually appealing user experience across different screen sizes.",
    "input": "",
    "output": ".root {\n  padding-top: 80px;\n  padding-bottom: 80px;\n}\n\n.title {\n  font-weight: 500;\n  font-size: 34px;\n  margin-bottom: var(--mantine-spacing-md);\n  font-family: Outfit, var(--mantine-font-family);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n\n.control {\n  @media (max-width: $mantine-breakpoint-sm) {\n    width: 100%;\n  }\n}\n\n.mobileImage {\n  @media (min-width: 48em) {\n    display: none;\n  }\n}\n\n.desktopImage {\n  @media (max-width: 47.99em) {\n    display: none;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** NotFoundImage.jsx\n\n**Purpose:**\n\nThe `NotFoundImage.jsx` file is a React component that displays a placeholder image when a requested resource is not found.\n\n**Components:**\n\n* `StoryWrapper`: A React component that provides a convenient way to render and test other components with predefined attributes.\n* `NotFoundImage`: The main component that renders the placeholder image.\n\n**Functionality:**\n\n* Imports the necessary components and data from other files.\n* Defines the component's title as \"NotFoundImage\".\n* Defines a `Usage()` function that:\n    * Creates an instance of `StoryWrapper` with the following props:\n        * `attributes`: An object containing attributes to be passed to the `NotFoundImage` component.\n        * `component`: The `NotFoundImage` component itself.\n    * Renders the `StoryWrapper` component.\n\n**Data:**\n\n* `attributes.json`: An JSON file containing attributes for the `NotFoundImage` component, such as image source and dimensions.\n\n**Rendering:**\n\nWhen the `NotFoundImage` component is rendered, it will display a placeholder image specified in the `attributes.json` file. The image will be displayed with the dimensions specified in the `attributes`.\n\n**Usage:**\n\nThe `Usage()` function provides a convenient way to render and test the `NotFoundImage` component with predefined attributes. It can be used in other React components or applications to display placeholder images for missing resources.\n\n**Additional Notes:**\n\n* The `NotFoundImage` component assumes that an `attributes.json` file is available in the same directory as the component.\n* The `StoryWrapper` component is a third-party component that is used for testing purposes.\n* The `NotFoundImage` component can be customized by modifying the `attributes.json` file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NotFoundImage } from './NotFoundImage';\n\nexport default { title: 'NotFoundImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NotFoundImage} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `NotFoundImage.tsx` file is a React functional component that renders a visually appealing message for when a user accesses a page that does not exist.\n\n**Functionality:**\n\n* **Imports:**\n    * `@mantine/core` library for UI components.\n    * `image.svg` as an image source for the not found image.\n    * `NotFoundImage.module.css` for styling.\n\n* **Component Definition:**\n    * The `NotFoundImage()` function defines the component.\n\n* **Rendering:**\n    * Renders a `Container` with a `SimpleGrid` to display the content.\n    * The `SimpleGrid` has two columns on larger screens and one column on smaller screens.\n    * Left column:\n        * An `Image` component with the `image.svg` source for the not found image.\n        * A `Title` component with the text \"Something is not right...\".\n        * A `Text` component with a description of the error and instructions for contacting support.\n        * A `Button` component with the text \"Get back to home page\" and the `className` `classes.control`.\n    * Right column (visible only on larger screens):\n        * Another `Image` component with the same `image.svg` source.\n\n* **Styling:**\n    * The `classes.root` class applies styles to the `Container`.\n    * The `classes.mobileImage` class applies styles to the mobile-sized image.\n    * The `classes.desktopImage` class applies styles to the desktop-sized image.\n    * The `classes.title` class applies styles to the title.\n    * The `classes.control` class applies styles to the button.\n\n**Purpose:**\n\nThe `NotFoundImage` component provides a visually appealing and informative message for when a user encounters a missing page. It includes a not found image, a title, a description, and a button to redirect the user to the home page.\n\n**Usage:**\n\nThis component can be used by importing it into any React application and rendering it where desired.",
    "input": "",
    "output": "import { Button, Container, Image, SimpleGrid, Text, Title } from '@mantine/core';\nimport image from './image.svg';\nimport classes from './NotFoundImage.module.css';\n\nexport function NotFoundImage() {\n  return (\n    <Container className={classes.root}>\n      <SimpleGrid spacing={{ base: 40, sm: 80 }} cols={{ base: 1, sm: 2 }}>\n        <Image src={image.src} className={classes.mobileImage} />\n        <div>\n          <Title className={classes.title}>Something is not right...</Title>\n          <Text c=\"dimmed\" size=\"lg\">\n            Page you are trying to open does not exist. You may have mistyped the address, or the\n            page has been moved to another URL. If you think this is an error contact support.\n          </Text>\n          <Button variant=\"outline\" size=\"md\" mt=\"xl\" className={classes.control}>\n            Get back to home page\n          </Button>\n        </div>\n        <Image src={image.src} className={classes.desktopImage} />\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file describes a \"404 page\" within a website or web application. It serves as a configuration file for a specific page with the following details:\n\n**Title:** 404 page\n\n**Category:** error-pages\n\n**Responsive:** true\n\n**Canvas:**\n- **center:** false\n\n**Purpose:**\n\nThe purpose of this file is to configure the behavior and appearance of a 404 page, which is typically displayed when a user attempts to access a non-existent web page.\n\n**Properties:**\n\n- **title:** Specifies the title of the page, which should be \"404 page\" in this case.\n- **category:** Indicates the category of the page, which is \"error-pages\" in this case.\n- **responsive:** Sets whether the page is responsive and adapts to different screen sizes.\n- **canvas:**\n    - **center:** Determines whether the content should be centered on the page. In this case, it is set to false.\n\n**Usage:**\n\nThe JSON file can be used in various ways, depending on the specific website or application framework being used. Some possible ways include:\n\n- **For web developers:** To configure the 404 page within a content management system (CMS) or web development framework.\n- **For IT administrators:** To troubleshoot and diagnose 404 errors.\n- **For users:** To understand the meaning of a 404 error and know what to do next.\n\n**Additional Notes:**\n\n- The \"canvas\" property may vary depending on the specific website or application framework being used.\n- The configuration options within the file may be customized to suit the specific needs of the website or application.\n- The 404 page is typically used to provide a helpful and informative message to users when they encounter a missing page.",
    "input": "",
    "output": "{\n  \"title\": \"404 page\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** Styles.css\n\n**Purpose:**\n\nThe Styles.css file defines the global styles for a web application. It applies CSS rules to various elements and components throughout the application.\n\n**Key Features:**\n\n**1. Global Padding:**\n- The `.root` class sets a 80px padding to the top and bottom of the entire page.\n\n**2. Label Styles:**\n- The `.label` class defines the style for labels, including:\n    - Centered text alignment\n    - Font weight of 500\n    - Font size of 38px\n    - Line height of 1\n    - Margin at the bottom equal to 1.5 times the spacing unit\n    - Text color of a specific gray shade\n\n**3. Description Styles:**\n- The `.description` class defines the style for descriptions, including:\n    - Maximum width of 500px\n    - Margin auto (centered)\n    - Margin at the top and bottom equal to the spacing unit\n\n**4. Title Styles:**\n- The `.title` class defines the style for titles, including:\n    - Font family of 'Outfit'\n    - Centered text alignment\n    - Font weight of 500\n    - Font size of 38px\n\n**Media Queries:**\n\n- The CSS code includes media queries that adjust the font size for titles and labels on screens with a maximum width of $mantine-breakpoint-sm.\n\n**Purpose of Styles:**\n\nThe purpose of these styles is to:\n\n- Establish a consistent visual layout throughout the application.\n- Define the style for various elements, such as labels, descriptions, and titles.\n- Create a visually appealing and user-friendly interface.\n\n**Additional Notes:**\n\n- The file uses CSS variables for spacing and color values.\n- The font family 'Outfit' is used for titles.\n- The `$mantine-breakpoint-sm` variable represents a specific screen size breakpoint.",
    "input": "",
    "output": ".root {\n  padding-top: 80px;\n  padding-bottom: 80px;\n}\n\n.label {\n  text-align: center;\n  font-weight: 500;\n  font-size: 38px;\n  line-height: 1;\n  margin-bottom: calc(1.5 * var(--mantine-spacing-xl));\n  color: var(--mantine-color-gray-2);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n\n.description {\n  max-width: 500px;\n  margin: auto;\n  margin-top: var(--mantine-spacing-xl);\n  margin-bottom: calc(1.5 * var(--mantine-spacing-xl));\n}\n\n.title {\n  font-family: 'Outfit', var(--mantine-font-family);\n  text-align: center;\n  font-weight: 500;\n  font-size: 38px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** NotFoundTitle.js\n\n**Purpose:**\n\nThe `NotFoundTitle.js` file is a React component that represents a not-found title screen. It uses the `StoryWrapper` component to render the title and provide additional attributes.\n\n**Code Breakdown:**\n\n- **Import Statements:**\n    - `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper.js`.\n    - `attributes.json` file containing attributes for the title screen.\n    - `NotFoundTitle` component from the current file.\n\n- **Default Export:**\n    - Exports an object with the title `NotFoundTitle`.\n\n- **Usage Function:**\n    - Creates a `StoryWrapper` component with the following properties:\n        - `attributes`: Attributes specified in `attributes.json`.\n        - `component`: `NotFoundTitle` component.\n\n**Purpose of `attributes.json`:**\n\nThe `attributes.json` file likely contains attributes such as:\n\n- Title text\n- Background image\n- Sound effects\n\n**How the File Works:**\n\n1. The `StoryWrapper` component receives the attributes from `attributes.json`.\n2. The `NotFoundTitle` component is rendered within the `StoryWrapper`.\n3. The title and attributes specified in `attributes.json` are applied to the `NotFoundTitle` component.\n\n**Conclusion:**\n\nThe `NotFoundTitle.js` file is responsible for displaying a not-found title screen with customizable attributes. It uses the `StoryWrapper` component to enhance the rendering process and provide additional functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NotFoundTitle } from './NotFoundTitle';\n\nexport default { title: 'NotFoundTitle' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NotFoundTitle} />;\n}\n"
  },
  {
    "instruction": "**File Name:** NotFoundTitle.js\n\n**Purpose:**\n\nThe `NotFoundTitle.js` file is a React component that displays a 404 error page. It provides a visually appealing and informative message to users when they try to access a non-existent page.\n\n**Component Functionality:**\n\n- **Imports:**\n   - The file imports necessary components from the `@mantine/core` library, including `Button`, `Container`, `Group`, `Text`, and `Title`.\n   - It also imports a CSS module named `NotFoundTitle.module.css`.\n\n- **Component Function:**\n   - The `NotFoundTitle()` function is the main component that renders the 404 page.\n   - It uses the imported components to display the following elements:\n     - A `Container` element with a CSS class named `root`.\n     - A `div` element with a CSS class named `label` to display the error code \"404\".\n     - A `Title` element with a CSS class named `title` to inform users that they have found a secret place.\n     - A `Text` element with a CSS class named `description` to provide a helpful message about the 404 error.\n     - A `Group` element with a CSS class named `center` to center the following element:\n     - A `Button` element with a CSS class named `subtle` and a size of \"md\" to provide a link to the home page.\n\n**Output:**\n\nWhen this component is rendered, it displays a 404 page with the following layout:\n\n- A header with the error code \"404\"\n- A title that says \"You have found a secret place.\"\n- A message that explains that the page is not found and provides a link to the home page.\n\n**Usage:**\n\nThis component can be used to display a 404 error page in a React application. It can be imported into other components or used as a standalone component.\n\n**Additional Notes:**\n\n- The CSS module `NotFoundTitle.module.css` likely contains styles for the various elements used in the component.\n- The `@mantine/core` library provides a set of pre-built components and utilities that can be used to create a user interface.\n- The `start_of_turn` tag in the prompt is not a valid code syntax, and it is not used in the provided code.",
    "input": "",
    "output": "import { Button, Container, Group, Text, Title } from '@mantine/core';\nimport classes from './NotFoundTitle.module.css';\n\nexport function NotFoundTitle() {\n  return (\n    <Container className={classes.root}>\n      <div className={classes.label}>404</div>\n      <Title className={classes.title}>You have found a secret place.</Title>\n      <Text c=\"dimmed\" size=\"lg\" ta=\"center\" className={classes.description}>\n        Unfortunately, this is only a 404 page. You may have mistyped the address, or the page has\n        been moved to another URL.\n      </Text>\n      <Group justify=\"center\">\n        <Button variant=\"subtle\" size=\"md\">\n          Take me back to home page\n        </Button>\n      </Group>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a configuration for an error page with a 404 status code (Not Found).\n\n**Properties:**\n\n- **title:** The title of the error page, which is displayed in the browser tab or title bar. In this case, the title is \"404 as background image\".\n- **category:** The category of the error page, which is set to \"error-pages\".\n- **responsive:** A boolean value that specifies whether the page is responsive to different screen sizes. In this case, the value is set to `true`.\n- **canvas:** An object that defines the layout of the error page.\n\n**Canvas Properties:**\n\n- **center:** A boolean value that specifies whether the content of the page should be centered. In this case, the value is set to `false`, which means the content will not be centered.\n\n**Purpose:**\n\nThe purpose of this file is to configure a 404 error page with a specific title, category, responsiveness, and layout. When a user encounters a 404 error on the website, this page will be displayed as the error page.\n\n**Additional Notes:**\n\n- The file name is not specified in the JSON data, so it is assumed to be a configuration file for the error page.\n- The specific content of the error page is not included in this file. It is likely defined in separate HTML or template files.\n- The `responsive` property ensures that the page adjusts its layout to different screen sizes, providing a consistent user experience.\n- The `center` property is set to `false`, indicating that the content will not be automatically centered on the page. This allows for custom positioning of elements within the page layout.",
    "input": "",
    "output": "{\n  \"title\": \"404 as background image\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet defines a React functional component named `Illustration`. This component renders an SVG image with an intricate illustration.\n\n**Description:**\n\nThe `Illustration` component uses the `React.ComponentPropsWithoutRef` type to specify the props that can be passed to the SVG element.\n\n**SVG Image:**\n\nThe component renders an SVG element with the following attributes:\n\n- `xmlns`: Specifies the XML namespace for the SVG document.\n- `viewBox`: Defines the coordinate system and dimensions of the SVG viewbox.\n\n**Path Element:**\n\nInside the SVG element, there is a `path` element with the following attributes:\n\n- `fill`: Specifies the fill color of the illustration. It is set to `currentColor`, which means the fill color will be inherited from the parent element.\n- `d`: Defines the path of the illustration using a \"d\" attribute. This attribute specifies the points and curves that make up the illustration.\n\n**Component Usage:**\n\nThe `Illustration` component can be used to render the SVG image in a React application. It can be included in a JSX element as follows:\n\n```\n<Illustration />\n```\n\n**Note:**\n\nThe `d` attribute of the `path` element defines the intricate illustration that is rendered in the SVG image. The code does not provide the specific details of the illustration, such as the colors, shapes, and lines.\n\n**Additional Information:**\n\n- The component is written in JavaScript using the React framework.\n- The SVG image is designed to be visually appealing and intricate.\n- The `currentColor` property is used to ensure that the fill color of the illustration matches the current color context of the parent element.",
    "input": "",
    "output": "export function Illustration(props: React.ComponentPropsWithoutRef<'svg'>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 362 145\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M62.6 142c-2.133 0-3.2-1.067-3.2-3.2V118h-56c-2 0-3-1-3-3V92.8c0-1.333.4-2.733 1.2-4.2L58.2 4c.8-1.333 2.067-2 3.8-2h28c2 0 3 1 3 3v85.4h11.2c.933 0 1.733.333 2.4 1 .667.533 1 1.267 1 2.2v21.2c0 .933-.333 1.733-1 2.4-.667.533-1.467.8-2.4.8H93v20.8c0 2.133-1.067 3.2-3.2 3.2H62.6zM33 90.4h26.4V51.2L33 90.4zM181.67 144.6c-7.333 0-14.333-1.333-21-4-6.666-2.667-12.866-6.733-18.6-12.2-5.733-5.467-10.266-13-13.6-22.6-3.333-9.6-5-20.667-5-33.2 0-12.533 1.667-23.6 5-33.2 3.334-9.6 7.867-17.133 13.6-22.6 5.734-5.467 11.934-9.533 18.6-12.2 6.667-2.8 13.667-4.2 21-4.2 7.467 0 14.534 1.4 21.2 4.2 6.667 2.667 12.8 6.733 18.4 12.2 5.734 5.467 10.267 13 13.6 22.6 3.334 9.6 5 20.667 5 33.2 0 12.533-1.666 23.6-5 33.2-3.333 9.6-7.866 17.133-13.6 22.6-5.6 5.467-11.733 9.533-18.4 12.2-6.666 2.667-13.733 4-21.2 4zm0-31c9.067 0 15.6-3.733 19.6-11.2 4.134-7.6 6.2-17.533 6.2-29.8s-2.066-22.2-6.2-29.8c-4.133-7.6-10.666-11.4-19.6-11.4-8.933 0-15.466 3.8-19.6 11.4-4 7.6-6 17.533-6 29.8s2 22.2 6 29.8c4.134 7.467 10.667 11.2 19.6 11.2zM316.116 142c-2.134 0-3.2-1.067-3.2-3.2V118h-56c-2 0-3-1-3-3V92.8c0-1.333.4-2.733 1.2-4.2l56.6-84.6c.8-1.333 2.066-2 3.8-2h28c2 0 3 1 3 3v85.4h11.2c.933 0 1.733.333 2.4 1 .666.533 1 1.267 1 2.2v21.2c0 .933-.334 1.733-1 2.4-.667.533-1.467.8-2.4.8h-11.2v20.8c0 2.133-1.067 3.2-3.2 3.2h-27.2zm-29.6-51.6h26.4V51.2l-26.4 39.2z\"\n      />\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the style and layout of a web page section. It appears to be part of a website template or theme.\n\n**File Structure:**\n\nThe file contains a set of CSS rules that define the following elements:\n\n- `.root`: The root element of the section.\n- `.inner`: The inner container element.\n- `.image`: The image element.\n- `.content`: The content area element.\n- `.title`: The title element.\n- `.description`: The description element.\n\n**CSS Rules:**\n\n**`.root`:**\n- Sets padding-top and padding-bottom to 80px.\n\n**`.inner`:**\n- Sets the position to relative.\n\n**`.image`:**\n- Sets the position to absolute with `inset: 0`. This means it covers the entire area of the `.inner` element.\n- Sets opacity to 0.75.\n- Sets color to a light-dark variation of the `--mantine-color-gray-0` or `--mantine-color-dark-6` variables.\n\n**`.content`:**\n- Sets padding-top to 220px.\n- Sets the position to relative with a z-index of 1.\n- Adds a media query for screens with a maximum width of `$mantine-breakpoint-sm` and adjusts padding-top to 120px.\n\n**`.title`:**\n- Sets the font-family to Outfit or the value of `--mantine-font-family`.\n- Sets text-align to center.\n- Sets font-weight to 500.\n- Sets font-size to 38px.\n- Adds a media query for screens with a maximum width of `$mantine-breakpoint-sm` and adjusts font-size to 32px.\n\n**`.description`:**\n- Sets a maximum width of 540px.\n- Sets margin to auto.\n- Sets margin-top to `var(--mantine-spacing-xl)`.\n- Sets margin-bottom to `calc(var(--mantine-spacing-xl) * 1.5)`.\n\n**Purpose:**\n\nThe CSS rules define the following elements:\n\n- A section with an image background.\n- A content area with a title, description, and call-to-action buttons.\n- A responsive layout that adjusts the padding and font sizes based on screen size.\n\n**Usage:**\n\nThe CSS file can be included in a HTML document to style the corresponding section. The HTML structure should match the CSS rules and provide the necessary content.",
    "input": "",
    "output": ".root {\n  padding-top: 80px;\n  padding-bottom: 80px;\n}\n\n.inner {\n  position: relative;\n}\n\n.image {\n  position: absolute;\n  inset: 0;\n  opacity: 0.75;\n  color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n}\n\n.content {\n  padding-top: 220px;\n  position: relative;\n  z-index: 1;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding-top: 120px;\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  text-align: center;\n  font-weight: 500;\n  font-size: 38px;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n\n.description {\n  max-width: 540px;\n  margin: auto;\n  margin-top: var(--mantine-spacing-xl);\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n}\n"
  },
  {
    "instruction": "**NothingFoundBackground.jsx**\n\n**Purpose:**\n\nThe `NothingFoundBackground.jsx` file is a React component that represents a background for a \"nothing found\" state. It utilizes the `StoryWrapper` component to display a custom background when no results are found.\n\n**File Structure:**\n\n* **import statements:**\n    * `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper.jsx`.\n    * `attributes.json` file containing attributes for the background.\n    * `NothingFoundBackground` component from the current file.\n* **export statement:**\n    * Exports an object with the title `NothingFoundBackground`.\n* **`Usage()` function:**\n    * Creates a React component that renders the `StoryWrapper` component with the following props:\n        * `attributes`: The attributes specified in the `attributes.json` file.\n        * `component`: The `NothingFoundBackground` component.\n\n**How it Works:**\n\n1. The `NothingFoundBackground.jsx` file imports the necessary components and data.\n2. The `Usage()` function creates a `StoryWrapper` component with the `NothingFoundBackground` component as its child.\n3. The `StoryWrapper` component renders the `NothingFoundBackground` component with the specified attributes.\n4. The `NothingFoundBackground` component can then be used to display a custom background when no results are found.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps a child component with additional attributes.\n* **NothingFoundBackground:** A component that represents a background for a \"nothing found\" state.\n\n**Attributes:**\n\nThe `attributes.json` file defines the attributes that will be passed to the `NothingFoundBackground` component. These attributes can be used to customize the appearance of the background.\n\n**Usage:**\n\nThe `NothingFoundBackground` component can be used by importing it into another component and calling the `Usage()` function. The component will then render the background with the specified attributes.\n\n**Example:**\n\n```\nimport { Usage } from './NothingFoundBackground';\n\nconst MyComponent = () => {\n  return <Usage />;\n};\n```",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { NothingFoundBackground } from './NothingFoundBackground';\n\nexport default { title: 'NothingFoundBackground' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={NothingFoundBackground} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `NothingFoundBackground.js` file is a React functional component that displays a notification indicating that the requested page does not exist. It serves as a fallback for situations where a user navigates to a non-existent URL.\n\n**File Structure:**\n\n* **Imports:**\n    * Imports necessary components from the `@mantine/core` library.\n    * Imports the `Illustration` component from a separate file.\n    * Imports CSS styles from the `NothingFoundBackground.module.css` file.\n\n* **Functional Component:**\n    * **Name:** `NothingFoundBackground`\n    * **Purpose:** To render the notification message.\n\n**Component Structure:**\n\n* **Container:**\n    * Applies CSS classes for styling.\n    * Contains the main content of the notification.\n\n* **Inner Div:**\n    * Provides additional padding and spacing.\n\n* **Illustration:**\n    * Renders an illustration that visually represents the absence of content.\n\n* **Content Div:**\n    * Contains the text message and navigation button.\n\n* **Title:**\n    * Indicates that nothing is found.\n\n* **Text:**\n    * Provides additional context about the missing page and instructions for contacting support.\n\n* **Button:**\n    * Offers a navigation option to the home page.\n\n**CSS Styles:**\n\nThe `NothingFoundBackground.module.css` file defines custom styles for the component, including:\n\n* Container dimensions and positioning\n* Illustration size and spacing\n* Text font and color\n* Button styling\n\n**Usage:**\n\nThis component can be used by importing it into any React application where a 404 error occurs. It will automatically render the notification message, providing a clear and informative experience for the user.\n\n**Benefits:**\n\n* Visually appealing and informative notification.\n* Provides clear guidance for users.\n* Enhances user experience by addressing navigation errors.",
    "input": "",
    "output": "import { Button, Container, Group, Text, Title } from '@mantine/core';\nimport { Illustration } from './Illustration';\nimport classes from './NothingFoundBackground.module.css';\n\nexport function NothingFoundBackground() {\n  return (\n    <Container className={classes.root}>\n      <div className={classes.inner}>\n        <Illustration className={classes.image} />\n        <div className={classes.content}>\n          <Title className={classes.title}>Nothing to see here</Title>\n          <Text c=\"dimmed\" size=\"lg\" ta=\"center\" className={classes.description}>\n            Page you are trying to open does not exist. You may have mistyped the address, or the\n            page has been moved to another URL. If you think this is an error contact support.\n          </Text>\n          <Group justify=\"center\">\n            <Button size=\"md\">Take me back to home page</Button>\n          </Group>\n        </div>\n      </div>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file. It defines the layout and settings for a user interface element called a \"password with strength meter.\"\n\n**Properties:**\n\n* **title:** The title of the element, which is \"Password with strength meter.\"\n* **category:** The category of the element, which is \"inputs.\"\n* **canvas:** An object that defines the canvas settings for the element.\n\n**Canvas Settings:**\n\n* **center:** Set to `true`, indicating that the element should be centered within its container.\n* **maxWidth:** Set to `320`, which specifies the maximum width of the element.\n\n**Purpose:**\n\nThe purpose of this file is to configure a password input field that includes a strength meter. The strength meter provides users with feedback on the strength of their password, allowing them to adjust it accordingly.\n\n**Usage:**\n\nThis configuration file can be used to create a password with strength meter element in a user interface. The element can be embedded within a form or standalone as a standalone component.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Password with strength meter\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**Benefits:**\n\n* Provides users with feedback on the strength of their passwords.\n* Helps users to create strong passwords.\n* Enhances user experience by providing a visually informative element.\n\n**Additional Notes:**\n\n* The strength meter may use a third-party library or be implemented as part of the user interface framework.\n* The specific implementation of the strength meter may vary depending on the chosen framework or library.\n* The configuration file can be customized to change the title, canvas settings, or other properties of the element.",
    "input": "",
    "output": "{\n  \"title\": \"Password with strength meter\",\n  \"category\": \"inputs\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file is a React component that serves as a password strength indicator. It allows users to input a password and receives feedback on its strength based on predefined criteria.\n\n**Components:**\n\n* **StoryWrapper:** A React component that wraps the PasswordStrength component with additional attributes.\n* **PasswordStrength:** The main component that handles password validation and displays the strength indicator.\n\n**Data:**\n\n* **attributes.json:** A JSON file containing attributes for the PasswordStrength component, such as the title and placeholder text.\n* **PasswordStrength:** A JavaScript object that defines the strength criteria for the password.\n\n**Workflow:**\n\n1. The file imports the necessary components and data.\n2. It exports an object with the title \"PasswordStrength\".\n3. It defines a function called Usage() that renders the StoryWrapper component.\n4. The StoryWrapper component receives the attributes and component props from attributes.json and PasswordStrength.js respectively.\n5. The PasswordStrength component performs password validation based on the criteria in PasswordStrength.js.\n6. It displays the strength indicator based on the validation result.\n\n**Additional Notes:**\n\n* The password strength criteria are defined in the PasswordStrength.js object.\n* The attributes.json file allows for customization of the component's appearance and behavior.\n* The StoryWrapper component is likely used for development and testing purposes.\n\n**Purpose:**\n\nThe PasswordStrength component helps users create strong passwords by providing real-time feedback on their strength. It can be used in various applications, such as user registration forms, password recovery systems, and account management pages.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { PasswordStrength } from './PasswordStrength';\n\nexport default { title: 'PasswordStrength' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={PasswordStrength} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet is a React component that helps users assess the strength of their passwords. It provides visual feedback on the password's complexity, including requirements and a progress bar.\n\n**Functionality:**\n\n- The component includes an input field for the password.\n- It displays a progress bar that indicates the strength of the password based on predefined requirements.\n- It shows a list of requirements that the password must meet, along with checkmarks or X marks to indicate compliance.\n- The progress bars change color depending on the password strength (red for weak, yellow for medium, teal for strong).\n\n**Key Features:**\n\n- **Password Requirements:** The component specifies four password requirements:\n    - Includes a number\n    - Includes a lowercase letter\n    - Includes an uppercase letter\n    - Includes a special symbol\n- **Strength Calculation:** The `getStrength()` function calculates the password strength based on the number of requirements met and the password length.\n- **Progress Bars:** Four progress bars visually represent the password strength.\n- **Input Field:** Users can enter their password in the input field.\n- **Validation:** The component validates the password against the specified requirements.\n\n**Benefits:**\n\n- Improved password security awareness.\n- Enhanced user experience by providing clear feedback on password strength.\n- Reduced risk of weak passwords.\n\n**Usage:**\n\nThe `PasswordStrength()` component can be used by developers to implement a password strength meter in their applications. It can be embedded within forms or standalone as a standalone component.\n\n**Additional Notes:**\n\n- The code uses external libraries, such as `@tabler/icons-react` and `@mantine/core`, for styling and icon rendering.\n- The `useInputState()` hook is used to manage the password input state.\n- The component is designed to provide a user-friendly and informative way to assess password strength.",
    "input": "",
    "output": "import { IconCheck, IconX } from '@tabler/icons-react';\nimport { Box, Center, Group, PasswordInput, Progress, Text } from '@mantine/core';\nimport { useInputState } from '@mantine/hooks';\n\nfunction PasswordRequirement({ meets, label }: { meets: boolean; label: string }) {\n  return (\n    <Text component=\"div\" c={meets ? 'teal' : 'red'} mt={5} size=\"sm\">\n      <Center inline>\n        {meets ? <IconCheck size={14} stroke={1.5} /> : <IconX size={14} stroke={1.5} />}\n        <Box ml={7}>{label}</Box>\n      </Center>\n    </Text>\n  );\n}\n\nconst requirements = [\n  { re: /[0-9]/, label: 'Includes number' },\n  { re: /[a-z]/, label: 'Includes lowercase letter' },\n  { re: /[A-Z]/, label: 'Includes uppercase letter' },\n  { re: /[$&+,:;=?@#|'<>.^*()%!-]/, label: 'Includes special symbol' },\n];\n\nfunction getStrength(password: string) {\n  let multiplier = password.length > 5 ? 0 : 1;\n\n  requirements.forEach((requirement) => {\n    if (!requirement.re.test(password)) {\n      multiplier += 1;\n    }\n  });\n\n  return Math.max(100 - (100 / (requirements.length + 1)) * multiplier, 0);\n}\n\nexport function PasswordStrength() {\n  const [value, setValue] = useInputState('');\n  const strength = getStrength(value);\n  const checks = requirements.map((requirement, index) => (\n    <PasswordRequirement key={index} label={requirement.label} meets={requirement.re.test(value)} />\n  ));\n  const bars = Array(4)\n    .fill(0)\n    .map((_, index) => (\n      <Progress\n        styles={{ section: { transitionDuration: '0ms' } }}\n        value={\n          value.length > 0 && index === 0 ? 100 : strength >= ((index + 1) / 4) * 100 ? 100 : 0\n        }\n        color={strength > 80 ? 'teal' : strength > 50 ? 'yellow' : 'red'}\n        key={index}\n        size={4}\n      />\n    ));\n\n  return (\n    <div>\n      <PasswordInput\n        value={value}\n        onChange={setValue}\n        placeholder=\"Your password\"\n        label=\"Password\"\n        required\n      />\n\n      <Group gap={5} grow mt=\"xs\" mb=\"md\">\n        {bars}\n      </Group>\n\n      <PasswordRequirement label=\"Has at least 6 characters\" meets={value.length > 5} />\n      {checks}\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON object that defines the metadata and configuration of a progress card.\n\n**Properties:**\n\n* **title:** The title of the progress card, which is \"Progress card\" in this case.\n* **category:** The category of the progress card, which is \"stats\".\n* **changelog:** The date when the progress card was last updated, which is \"september-2022\".\n* **dimmed:** A boolean value that indicates whether the progress card should be dimmed or not. In this case, it is set to `true`.\n* **canvas:** An object that defines the canvas configuration for the progress card.\n    * **center:** A boolean value that indicates whether the content of the progress card should be centered within the canvas. In this case, it is set to `true`.\n    * **maxWidth:** The maximum width of the canvas, which is 380 in this case.\n\n**Purpose:**\n\nThe purpose of this file is to provide metadata and configuration options for a progress card. It specifies the title, category, date of last update, dimming status, and canvas settings.\n\n**Usage:**\n\nThis JSON object can be used by an application or system to represent and render a progress card with the specified metadata and configuration. The information can be used to display progress information, set goals, track progress, and provide feedback.\n\n**Additional Notes:**\n\n* The `dimmed` property can be used to indicate that the progress card is out of date or has been superseded by newer information.\n* The `canvas` property allows for customization of the canvas size and positioning of the progress card content.\n* The specific use case for this progress card is not clear from the provided information.",
    "input": "",
    "output": "{\n  \"title\": \"Progress card\",\n  \"category\": \"stats\",\n  \"changelog\": \"september-2022\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 380\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** ProgressCard.jsx\n\n**Description:**\n\nThe ProgressCard.jsx file is a React component that serves as a progress tracker for a user. It displays a card with attributes and a progress bar.\n\n**Components:**\n\n* **StoryWrapper:** A component that provides a context for rendering the ProgressCard.\n* **attributes.json:** A JSON file that contains the attributes to be displayed in the progress card.\n* **ProgressCard:** The main component that renders the progress card.\n\n**Code Breakdown:**\n\n* The file imports the necessary components and JSON file.\n* It exports a default object with the title \"ProgressCard\".\n* It defines a function called Usage() that renders the ProgressCard component.\n* Inside Usage(), the attributes and component props are passed to the StoryWrapper component.\n\n**Usage:**\n\nThe Usage() function is exported and can be imported into other components. When imported, it will render the ProgressCard component with the attributes specified in the attributes.json file.\n\n**Purpose:**\n\nThe ProgressCard component is designed to provide a visual representation of a user's progress on a set of attributes. It can be used to track progress towards goals, monitor performance, and provide feedback to users.\n\n**Additional Notes:**\n\n* The attributes.json file should contain an array of objects, each representing an attribute with a name and a current value.\n* The ProgressCard component uses a progress bar to display the progress of each attribute.\n* The StoryWrapper component is likely used to provide additional context and styling for the ProgressCard.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ProgressCard } from './ProgressCard';\n\nexport default { title: 'ProgressCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ProgressCard} />;\n}\n"
  },
  {
    "instruction": "**Purpose of the File:**\n\nThe provided code snippet defines a React functional component named `ProgressCard`. This component is likely intended to display a progress bar and related information related to a monthly goal.\n\n**Functionality:**\n\nThe `ProgressCard` component uses the `@mantine/core` library to render the following elements:\n\n* A card with a border, rounded corners, and a specified background color.\n* A text element with the label \"Monthly goal\" in a small size, uppercase font, and a dimmed color.\n* A text element that displays the current progress toward the goal, showing the current amount and the total amount.\n* A progress bar that indicates the progress visually.\n\n**Code Breakdown:**\n\n**Import Statements:**\n\n* `Card`: A component for displaying cards.\n* `Progress`: A component for displaying progress bars.\n* `Text`: A component for displaying text.\n\n**Component Function:**\n\n* The `ProgressCard` function is exported as a React component.\n* It returns the JSX code that represents the card structure.\n\n**Card Content:**\n\n* The card contains a header with the label \"Monthly goal,\" followed by the progress information.\n* The progress bar is placed below the header, indicating the progress percentage.\n\n**Properties:**\n\n* `withBorder`: Specifies that the card should have a border.\n* `radius`: Sets the border radius to \"md\".\n* `padding`: Specifies the padding inside the card.\n* `bg`: Sets the background color of the card.\n\n**Text Elements:**\n\n* The text elements use different font sizes, weights, and colors to provide clarity and readability.\n\n**Progress Bar:**\n\n* The `Progress` component receives the progress value (54.31%) and configures it with the following properties:\n    * `value`: The progress percentage.\n    * `mt`: Specifies the margin top for the progress bar.\n    * `size`: Sets the size of the progress bar.\n    * `radius`: Sets the border radius of the progress bar.\n\n**Purpose:**\n\nThe `ProgressCard` component is likely used to:\n\n* Display the progress towards a monthly goal.\n* Provide a visual representation of progress.\n* Provide additional information or metrics related to the goal.\n\n**Usage:**\n\nThis component can be used within a React application to display progress information for various goals or objectives.",
    "input": "",
    "output": "import { Card, Progress, Text } from '@mantine/core';\n\nexport function ProgressCard() {\n  return (\n    <Card withBorder radius=\"md\" padding=\"xl\" bg=\"var(--mantine-color-body)\">\n      <Text fz=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n        Monthly goal\n      </Text>\n      <Text fz=\"lg\" fw={500}>\n        $5.431 / $10.000\n      </Text>\n      <Progress value={54.31} mt=\"md\" size=\"lg\" radius=\"xl\" />\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file provided is a JSON object that represents a configuration file for a user interface element. It defines the properties and settings for a progress card with color.\n\n**Properties:**\n\n**1. title:**\n- Value: \"Progress card with color\"\n- Purpose: Specifies the title of the progress card.\n\n**2. category:**\n- Value: \"stats\"\n- Purpose: Categorizes the progress card under the \"stats\" category.\n\n**3. changelog:**\n- Value: \"september-2022\"\n- Purpose: Indicates the date when the progress card was last updated or changed.\n\n**4. dimmed:**\n- Value: true\n- Purpose: Sets the progress card to be dimmed, indicating that it is inactive or disabled.\n\n**5. canvas:**\n- Purpose: Specifies the canvas settings for the progress card.\n\n**Canvas Settings:**\n\n**1. center:**\n- Value: true\n- Purpose: Centers the progress card horizontally within its container.\n\n**2. maxWidth:**\n- Value: 380\n- Purpose: Sets the maximum width of the progress card to 380 pixels.\n\n**Purpose:**\n\nThe purpose of this JSON object is to configure a progress card with a specific title, category, and canvas layout. The dimmed property indicates that the progress card is not currently active or available for interaction.\n\n**Additional Notes:**\n\n- The \"category\" property is used to group related progress cards together.\n- The \"canvas\" settings specify the visual presentation of the progress card within the user interface.\n- The \"dimmed\" property is used to indicate the status of the progress card.\n- The \"changelog\" property provides a timestamp for version control and documentation purposes.",
    "input": "",
    "output": "{\n  \"title\": \"Progress card with color\",\n  \"category\": \"stats\",\n  \"changelog\": \"september-2022\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 380\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a user interface element. It specifies the visual appearance of different elements, such as cards, titles, stats, progress sections, and progress tracks.\n\n**File Structure:**\n\nThe file consists of four CSS rules, each targeting a specific element:\n\n```css\n.card {\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.title {\n  color: var(--mantine-color-white);\n  opacity: 0.65;\n}\n\n.stats {\n  color: var(--mantine-color-white);\n}\n\n.progressSection {\n  background-color: var(--mantine-color-white);\n}\n\n.progressTrack {\n  background-color: var(--mantine-color-blue-3);\n}\n```\n\n**CSS Rules:**\n\n**1. .card:**\n- Sets the `background-color` property to `var(--mantine-color-blue-filled)`. This is likely a predefined color variable within the CSS framework or theme.\n\n**2. .title:**\n- Sets the `color` property to `var(--mantine-color-white)`.\n- Sets the `opacity` property to `0.65`. This creates a translucent effect on the text.\n\n**3. .stats:**\n- Sets the `color` property to `var(--mantine-color-white)`.\n\n**4. .progressSection:**\n- Sets the `background-color` property to `var(--mantine-color-white)`.\n\n**5. .progressTrack:**\n- Sets the `background-color` property to `var(--mantine-color-blue-3)`. This is likely another predefined color variable within the CSS framework or theme.\n\n**Purpose of the Styles:**\n\n- To style a card element with a blue background.\n- To style the title, stats, and progress section with white text and a translucent effect.\n- To style the progress track with a blue color.\n\n**Conclusion:**\n\nThe CSS file defines the visual styles for a user interface element, including the card, title, stats, progress section, and progress track. The styles are applied using CSS variables, which allow for easy customization and consistency across the UI.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.title {\n  color: var(--mantine-color-white);\n  opacity: 0.65;\n}\n\n.stats {\n  color: var(--mantine-color-white);\n}\n\n.progressSection {\n  background-color: var(--mantine-color-white);\n}\n\n.progressTrack {\n  background-color: var(--mantine-color-blue-3);\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a JavaScript module that exports a React component called `ProgressCardColored`.\n\n**Components Used:**\n\n- `StoryWrapper`\n- `ProgressCardColored`\n\n**Imports:**\n\n- `StoryWrapper` is imported from the `components/StoryWrapper/StoryWrapper` module.\n- `attributes.json` is imported and used as props for the `StoryWrapper` component.\n- `ProgressCardColored` is imported from the current module.\n\n**Exports:**\n\n- The module exports an object with a `title` property set to 'ProgressCardColored'.\n- It also exports a `Usage()` function that renders a `StoryWrapper` component with the following props:\n    - `attributes`: The `attributes.json` file.\n    - `component`: The `ProgressCardColored` component.\n\n**Purpose:**\n\nThe purpose of this module is to provide a React component called `ProgressCardColored`. This component is likely used to display progress information in a visually appealing way.\n\n**Usage:**\n\nThe `Usage()` function can be used to render the `ProgressCardColored` component with the specified attributes. This will allow developers to quickly and easily create progress cards with the desired styling and functionality.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains data that is used to configure the `ProgressCardColored` component.\n- The `StoryWrapper` component is likely used for creating and displaying interactive stories or demonstrations.\n- The `ProgressCardColored` component may have additional props or methods beyond the ones specified in the code.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ProgressCardColored } from './ProgressCardColored';\n\nexport default { title: 'ProgressCardColored' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ProgressCardColored} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `ProgressCardColored.tsx` file is a React component that displays a progress card with a colored progress bar. It is part of a user interface (UI) application and is likely used to track progress towards a specific goal.\n\n**Functionality:**\n\n- **Imports:**\n   - `Card`, `Progress`, and `Text` components from the `@mantine/core` library.\n   - CSS styles from the `ProgressCardColored.module.css` file.\n\n- **Component Function:**\n   - The `ProgressCardColored` function is the main component.\n   - It renders a `Card` component with the following content:\n     - A title that reads \"Monthly goal\" with uppercase text and a bold font weight.\n     - Progress statistics that display the current progress and the target amount.\n     - A progress bar that represents the progress towards the target.\n\n- **Progress Bar Configuration:**\n   - The progress bar has a value of 54.31%.\n   - It is styled with custom CSS classes (`classes.progressTrack` and `classes.progressSection`).\n   - The progress bar is positioned with a margin-top of \"md\" and has a size of \"lg\".\n\n- **Styling:**\n   - The component is styled with CSS classes from the `ProgressCardColored.module.css` file.\n   - This file likely defines styles for the card, title, progress statistics, and progress bar.\n\n**Usage:**\n\nThe `ProgressCardColored` component can be used to display progress towards a monthly goal. It can be integrated into a larger UI application or website to provide users with a visual representation of their progress.\n\n**Additional Notes:**\n\n- The code assumes that the `ProgressCardColored.module.css` file contains the necessary CSS styles.\n- The progress value and target amount can be dynamically updated based on the specific use case.\n- The component can be customized with additional features and styling as needed.",
    "input": "",
    "output": "import { Card, Progress, Text } from '@mantine/core';\nimport classes from './ProgressCardColored.module.css';\n\nexport function ProgressCardColored() {\n  return (\n    <Card withBorder radius=\"md\" p=\"xl\" className={classes.card}>\n      <Text fz=\"xs\" tt=\"uppercase\" fw={700} className={classes.title}>\n        Monthly goal\n      </Text>\n      <Text fz=\"lg\" fw={500} className={classes.stats}>\n        $5.431 / $10.000\n      </Text>\n      <Progress\n        value={54.31}\n        mt=\"md\"\n        size=\"lg\"\n        radius=\"xl\"\n        classNames={{\n          root: classes.progressTrack,\n          section: classes.progressSection,\n        }}\n      />\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a web page or application. It contains metadata and settings for a specific page titled \"500 page\" within an error-pages category.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"500 page\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Properties and Values:**\n\n* **title:** This property specifies the title of the page, which is \"500 page\" in this case.\n* **category:** This property defines the category of the page, which is \"error-pages\".\n* **responsive:** This property indicates whether the page is responsive to different screen sizes. The value is set to \"true\".\n* **canvas:** This property contains additional configuration for the page canvas.\n    * **center:** This property specifies whether the content should be centered within the canvas. The value is set to \"false\".\n\n**Purpose:**\n\nThe purpose of this file is to configure the \"500 page\" within the \"error-pages\" category. It provides information about the page title, category, responsiveness, and canvas settings.\n\n**Usage:**\n\nThis configuration file can be used by a web server or application to render the \"500 page\" with the specified title, category, responsiveness, and canvas settings.\n\n**Additional Notes:**\n\n* The file extension for JSON files is \".json\".\n* The syntax of JSON is strict, and any invalid syntax or missing properties will result in an error.\n* The configuration settings in this file can be customized as needed.",
    "input": "",
    "output": "{\n  \"title\": \"500 page\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the visual style of a web page. It specifies the padding, font size, font family, and color of various HTML elements, including the root element, labels, titles, and descriptions.\n\n**Structure:**\n\nThe CSS code is organized into four sections, each corresponding to a specific HTML element:\n\n- **.root:** Defines the style for the root element of the HTML document.\n- **.label:** Styles the label element.\n- **.title:** Styles the title element.\n- **.description:** Styles the description element.\n\n**Style Properties:**\n\n**Root Element:**\n- Padding: 80px top and bottom.\n- Background color: The value of the `--mantine-color-blue-filled` CSS variable.\n\n**Label Element:**\n- Text alignment: Centered.\n- Font weight: 500.\n- Font size: 220px.\n- Line height: 1.\n- Margin bottom: 1.5 times the value of the `--mantine-spacing-xl` CSS variable.\n- Color: The value of the `--mantine-color-blue-3` CSS variable.\n\n**Title Element:**\n- Font family: Outfit, followed by the value of the `--mantine-font-family` CSS variable.\n- Text alignment: Centered.\n- Font weight: 500.\n- Font size: 38px.\n- Color: The value of the `--mantine-color-white` CSS variable.\n\n**Description Element:**\n- Maximum width: 540px.\n- Margin: Auto, top and bottom.\n- Margin top: The value of the `--mantine-spacing-xl` CSS variable.\n- Margin bottom: 1.5 times the value of the `--mantine-spacing-xl` CSS variable.\n- Color: The value of the `--mantine-color-blue-1` CSS variable.\n\n**Responsive Design:**\n\nThe CSS code includes media queries to adjust the font size of the label and title elements for screens with a maximum width of $mantine-breakpoint-sm (presumably a small mobile screen).\n\n**Purpose:**\n\nThe CSS file styles the layout and appearance of a webpage, including the overall layout, headings, body text, and other elements. It aims to create a visually appealing and user-friendly experience.",
    "input": "",
    "output": ".root {\n  padding-top: 80px;\n  padding-bottom: 120px;\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.label {\n  text-align: center;\n  font-weight: 500;\n  font-size: 220px;\n  line-height: 1;\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n  color: var(--mantine-color-blue-3);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 120px;\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  text-align: center;\n  font-weight: 500;\n  font-size: 38px;\n  color: var(--mantine-color-white);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n\n.description {\n  max-width: 540px;\n  margin: auto;\n  margin-top: var(--mantine-spacing-xl);\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n  color: var(--mantine-color-blue-1);\n}\n"
  },
  {
    "instruction": "**File Name:** ServerError.jsx\n\n**Purpose:**\n\nThe file is a React component that represents a server error page. It is likely part of an application that provides an interface for users.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the `ServerError` component and provides additional functionality or styling.\n* **ServerError:** The main component that displays the error message.\n* **attributes.json:** A JSON file that contains attributes or configuration options for the `ServerError` component.\n\n**Code Breakdown:**\n\n**Line 1:** Imports the `StoryWrapper` component from the `StoryWrapper` module.\n**Line 2:** Imports the `attributes.json` file, which likely contains attributes for the `ServerError` component.\n**Line 3:** Imports the `ServerError` component.\n**Line 4:** Exports an object with the title `ServerError`.\n**Line 5:** Defines an `Usage()` function that creates an instance of the `StoryWrapper` component.\n**Line 6:** Passes the `attributes` and `ServerError` components as props to the `StoryWrapper`.\n\n**Usage:**\n\nThe `Usage()` function is likely used in a React application to render the `ServerError` component with the specified attributes.\n\n**Purpose of ServerError:**\n\nThe `ServerError` component is likely used to display an error message when a server error occurs, such as a 404 Not Found error or a 500 Internal Server Error.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component may provide additional functionality, such as error handling or styling.\n* The `attributes.json` file may contain attributes such as the error message, status code, or other relevant information.\n* The specific implementation of the `ServerError` component may vary depending on the application and requirements.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ServerError } from './ServerError';\n\nexport default { title: 'ServerError' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ServerError} />;\n}\n"
  },
  {
    "instruction": "**ServerError.js**\n\nThis file is a React functional component that displays a server error message to users.\n\n**Purpose:**\n\n* To inform users that the server encountered an error.\n* To provide a refresh button to allow users to retry their request.\n\n**Components Used:**\n\n* **Container:** A component that provides spacing and positioning for its children.\n* **Title:** A component that displays a title with a specific font size and style.\n* **Text:** A component that displays text with a specified font size, alignment, and line height.\n* **Button:** A component that represents a button with customizable text and styling.\n* **Group:** A component that allows grouping and aligning its children.\n\n**Functionality:**\n\n* The component renders a `div` element with a class name specified in the `classes.root` CSS rule.\n* Inside the `Container`, it displays:\n    * A `div` element with a class name specified in the `classes.label` CSS rule, containing the error code \"500\".\n    * A `Title` element with a class name specified in the `classes.title` CSS rule, displaying the message \"Something bad just happened...\".\n    * A `Text` element with a class name specified in the `classes.description` CSS rule, providing a description of the error and notifying the user that the development team has been informed.\n    * A `Group` element with a class name specified in the `classes.group` CSS rule, containing a single `Button` element with the text \"Refresh the page\".\n\n**Rendering:**\n\nWhen the `ServerError` component is rendered, it generates the following output:\n\n* A container with a server error message, including the error code, title, description, and a refresh button.\n\n**Additional Notes:**\n\n* The `classes` object is imported from a separate CSS module called `ServerError.module.css`.\n* The `@mantine/core` library provides the necessary React components for building the user interface.\n* The component assumes that the `classes` object contains the necessary CSS rules for styling the elements.",
    "input": "",
    "output": "import { Button, Container, Group, Text, Title } from '@mantine/core';\nimport classes from './ServerError.module.css';\n\nexport function ServerError() {\n  return (\n    <div className={classes.root}>\n      <Container>\n        <div className={classes.label}>500</div>\n        <Title className={classes.title}>Something bad just happened...</Title>\n        <Text size=\"lg\" ta=\"center\" className={classes.description}>\n          Our servers could not handle your request. Don&apos;t worry, our development team was\n          already notified. Try refreshing the page.\n        </Text>\n        <Group justify=\"center\">\n          <Button variant=\"white\" size=\"md\">\n            Refresh the page\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided JSON file defines a configuration for a 503 (Service Unavailable) error page within a website or web application.\n\n**File Structure:**\n\nThe file is a JSON object with four key-value pairs:\n\n**1. title:**\n- Value: \"503 page\"\n- Purpose: Specifies the title of the error page.\n\n**2. category:**\n- Value: \"error-pages\"\n- Purpose: Categorizes the page as an error page.\n\n**3. responsive:**\n- Value: true\n- Purpose: Indicates that the page should be responsive and adapt to different screen sizes.\n\n**4. canvas:**\n- Value: { \"center\": false }\n- Purpose: Specifies the canvas settings for the page.\n    - center: false - Determines whether the content should be centered within the canvas.\n\n**Purpose of the File:**\n\nThe purpose of this JSON file is to configure a 503 error page with the following characteristics:\n\n- Title: 503 page\n- Category: Error Pages\n- Responsive design\n- Content positioned to the left of the canvas\n\n**Usage:**\n\nThis JSON file can be used in a web development framework or content management system to define the configuration for a 503 error page. The configuration can then be used to render the page when a 503 status code is encountered.\n\n**Additional Notes:**\n\n- The file name is not specified in the provided JSON object.\n- The content of the error page itself is not included in this file.\n- The specific implementation of rendering the error page may vary depending on the framework or system being used.",
    "input": "",
    "output": "{\n  \"title\": \"503 page\",\n  \"category\": \"error-pages\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet defines a React functional component named `Illustration`. It is intended to render an SVG illustration within a React application.\n\n**Description:**\n\n- The component receives `props` as an argument, which likely contain any necessary attributes or styles for the SVG element.\n- It returns an `svg` element with the following attributes:\n    - `xmlns`: Specifies the XML namespace for the SVG elements.\n    - `fill`: Sets the fill color of the SVG elements to \"none\".\n    - `viewBox`: Defines the coordinate system and dimensions of the SVG viewbox.\n    - The `props` object is spread to the `svg` element using the `{...props}` syntax.\n\n- Inside the `svg` element, there is a `path` element with the following attributes:\n    - `fill`: Sets the fill color of the path to \"currentColor\".\n    - `d`: Specifies the SVG path data, which defines the shape of the illustration.\n\n**Purpose of the SVG Illustration:**\n\nThe SVG illustration appears to be a graphical representation of some concept or object. The specific design and details of the illustration are not readily apparent from the code snippet alone.\n\n**Additional Notes:**\n\n- The `props` object likely contains attributes such as `width`, `height`, and `style`.\n- The `currentColor` value refers to the current color context of the SVG element, which can be set or overridden by CSS or JavaScript.\n- The `viewBox` attribute defines the dimensions of the SVG viewbox, which is used to scale and position the content within the SVG element.\n- The `d` attribute of the `path` element specifies the path data using the SVG path syntax.",
    "input": "",
    "output": "export function Illustration(props: React.ComponentPropsWithoutRef<'svg'>) {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 332 145\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M43.4 144.6c-10.4 0-19.333-2.2-26.8-6.6-7.467-4.533-12.867-9.8-16.2-15.8-.8-2-.267-3.733 1.6-5.2l18-13.6c1.867-1.467 3.6-1.2 5.2.8 4.667 6.4 10.533 9.6 17.6 9.6 6.267 0 11.133-1.867 14.6-5.6 3.6-3.867 5.4-8.4 5.4-13.6 0-5.333-1.867-9.8-5.6-13.4-3.733-3.733-8.467-5.6-14.2-5.6-4.8 0-9.4 1.8-13.8 5.4-1.867 1.867-3.533 2.467-5 1.8L4.8 75.2c-1.733-.8-2.4-2-2-3.6l15.4-67c.4-1.733 1.467-2.6 3.2-2.6h61.8c.933 0 1.733.333 2.4 1 .667.533 1 1.267 1 2.2v22c0 .933-.333 1.733-1 2.4-.667.533-1.467.8-2.4.8H42.8L38.4 49c.8 0 2.6-.2 5.4-.6 2.933-.4 5.533-.6 7.8-.6 12.8 0 23.267 4.6 31.4 13.8 8.267 9.2 12.4 20.467 12.4 33.8 0 14.667-5 26.533-15 35.6-9.867 9.067-22.2 13.6-37 13.6zM167.389 144.6c-7.333 0-14.333-1.333-21-4s-12.867-6.733-18.6-12.2c-5.733-5.467-10.267-13-13.6-22.6-3.333-9.6-5-20.667-5-33.2 0-12.533 1.667-23.6 5-33.2 3.333-9.6 7.867-17.133 13.6-22.6 5.733-5.467 11.933-9.533 18.6-12.2 6.667-2.8 13.667-4.2 21-4.2 7.467 0 14.533 1.4 21.2 4.2 6.667 2.667 12.8 6.733 18.4 12.2 5.733 5.467 10.267 13 13.6 22.6 3.333 9.6 5 20.667 5 33.2 0 12.533-1.667 23.6-5 33.2-3.333 9.6-7.867 17.133-13.6 22.6-5.6 5.467-11.733 9.533-18.4 12.2-6.667 2.667-13.733 4-21.2 4zm0-31c9.067 0 15.6-3.733 19.6-11.2 4.133-7.6 6.2-17.533 6.2-29.8s-2.067-22.2-6.2-29.8c-4.133-7.6-10.667-11.4-19.6-11.4-8.933 0-15.467 3.8-19.6 11.4-4 7.6-6 17.533-6 29.8s2 22.2 6 29.8c4.133 7.467 10.667 11.2 19.6 11.2zM283.234 144.6c-10.133 0-18.933-2.067-26.4-6.2-7.466-4.133-13.333-9.467-17.6-16-1.066-1.867-.866-3.333.6-4.4l16.8-15.2c1.467-1.467 3-1.333 4.6.4 6 7.067 12.6 10.6 19.8 10.6 5.334 0 9.467-1.467 12.4-4.4 2.934-3.067 4.4-6.667 4.4-10.8 0-3.733-1.266-7.133-3.8-10.2-2.533-3.067-6.8-4.6-12.8-4.6h-6c-2.266 0-3.4-1.133-3.4-3.4V60.2c0-2.133 1.134-3.2 3.4-3.2h5.8c4.8 0 8.267-1.267 10.4-3.8 2.134-2.533 3.2-5.4 3.2-8.6 0-4-1.466-7.2-4.4-9.6-2.8-2.533-6.266-3.8-10.4-3.8-7.2 0-12.733 3.333-16.6 10-1.066 2-2.6 2.133-4.6.4l-15.6-15.4c-1.733-1.333-2-2.8-.8-4.4 4.134-6.4 9.8-11.533 17-15.4 7.2-4 15.334-6 24.4-6 12 0 22.267 3.4 30.8 10.2 8.534 6.8 12.8 16.067 12.8 27.8 0 7.6-1.866 13.933-5.6 19-3.6 4.933-8.066 8.533-13.4 10.8 6.8 2.8 12.4 7.067 16.8 12.8 4.534 5.6 6.8 12.8 6.8 21.6 0 12.533-4.666 22.667-14 30.4-9.333 7.733-20.866 11.6-34.6 11.6z\"\n      />\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines the styles for a landing page section. It is responsible for the visual layout and presentation of the content within the section.\n\n**Structure:**\n\nThe file consists of a series of CSS classes that define the styles for different elements:\n\n**.root:**\n- Sets the padding and background color of the root element.\n- Uses the `var(--mantine-color-blue-filled)` variable for the background color.\n\n**.inner:**\n- Positions the inner element relative to its parent.\n\n**.image:**\n- Positions the image element absolutely within the parent.\n- Sets the image to cover the entire area using the `inset: 0` property.\n- Applies an opacity of 0.65.\n- Uses the `color` property to set the image color based on the theme's blue color palette.\n\n**.content:**\n- Pads the content element at the top and sets its position relative.\n- Defines a higher z-index value (1) to ensure it appears above the image.\n- Uses a media query to adjust the padding on small screens.\n\n**.title:**\n- Sets the font family, text alignment, font weight, font size, and color of the title element.\n- Uses a media query to adjust the font size on small screens.\n\n**.description:**\n- Sets the maximum width, margin, and color of the description element.\n- Uses the `var(--mantine-spacing-xl)` variable for spacing.\n\n**Purpose:**\n\nThe CSS file is responsible for:\n\n- Creating a visually appealing and cohesive landing page section.\n- Positioning and styling the title, description, and image elements.\n- Using CSS variables to maintain consistency in the design.\n- Applying responsive design to ensure optimal viewing on different devices.\n\n**Usage:**\n\nThis CSS file can be linked to an HTML file to apply the specified styles to the landing page section. The HTML file would contain the necessary HTML elements to display the content.",
    "input": "",
    "output": ".root {\n  padding-top: 120px;\n  padding-bottom: 120px;\n  background-color: var(--mantine-color-blue-filled);\n}\n\n.inner {\n  position: relative;\n}\n\n.image {\n  position: absolute;\n  inset: 0;\n  opacity: 0.65;\n  color: light-dark(var(--mantine-color-blue-7), var(--mantine-color-blue-9));\n}\n\n.content {\n  padding-top: 220px;\n  position: relative;\n  z-index: 1;\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    padding-top: 120px;\n  }\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  text-align: center;\n  font-weight: 500;\n  font-size: 38px;\n  color: var(--mantine-color-white);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    font-size: 32px;\n  }\n}\n\n.description {\n  max-width: 460px;\n  margin: auto;\n  margin-top: var(--mantine-spacing-xl);\n  margin-bottom: calc(var(--mantine-spacing-xl) * 1.5);\n  color: var(--mantine-color-blue-1);\n}\n"
  },
  {
    "instruction": "**File Name:** ServerOverload.jsx\n\n**Purpose:**\n\nThe `ServerOverload.jsx` file is a React component that represents a server overload scenario. It renders a visual representation of the overload situation, including attributes, messages, and potential solutions.\n\n**Code Breakdown:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A custom component that wraps the `ServerOverload` component with additional functionalities.\n    * `attributes.json`: A JSON file containing attributes and messages related to the server overload.\n    * `ServerOverload`: The main component that represents the server overload scenario.\n\n* **Default Export:**\n    * A JavaScript object with a `title` property set to \"ServerOverload\". This title is used for display purposes.\n\n* **`Usage` Function:**\n    * A functional component that renders the `StoryWrapper` component.\n    * The `attributes` prop is set to the contents of the `attributes.json` file.\n    * The `component` prop is set to the `ServerOverload` component.\n\n**Key Features:**\n\n* **Visual Representation:** The `ServerOverload` component renders a visual representation of the server overload, including messages, attributes, and potential solutions.\n* **Attributes and Messages:** The `attributes.json` file defines the specific attributes and messages associated with the server overload scenario.\n* **StoryWrapper:** The `StoryWrapper` component provides additional functionalities, such as styling and navigation.\n\n**Overall Functionality:**\n\nThe `ServerOverload.jsx` file is responsible for rendering a visual representation of a server overload scenario, including attributes, messages, and potential solutions. It is typically used within a React application to illustrate or demonstrate server overload conditions.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain JSON objects with attributes such as `severity`, `message`, and `solution`.\n* The `ServerOverload` component can be customized to display additional information or visuals.\n* The `StoryWrapper` component provides additional functionalities, such as navigation and styling.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { ServerOverload } from './ServerOverload';\n\nexport default { title: 'ServerOverload' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={ServerOverload} />;\n}\n"
  },
  {
    "instruction": "**File Name:** ServerOverload.js\n\n**Description:**\n\nThe `ServerOverload.js` file is a React component that displays a message indicating that the server is overloaded and unable to handle incoming requests.\n\n**Code Breakdown:**\n\n- **Imports:**\n   - Imports necessary Mantine components for layout and styling.\n   - Imports the `Illustration` component from a separate file.\n   - Imports CSS classes for styling.\n\n- **Component Function:**\n   - The `ServerOverload` function is the main component.\n\n- **Rendering:**\n   - Renders a `div` element with a class `classes.root`.\n   - Wraps the content in a `Container` component.\n   - Contains an inner `div` with a class `classes.inner`.\n   - Includes an `Illustration` component with a class `classes.image`.\n   - Displays a title with a class `classes.title`: \"All of our servers are busy\".\n   - Shows a text message with a class `classes.description`:\n     - Indicates that the server cannot handle the request.\n     - Provides instructions to wait and refresh the page.\n     - Includes a button with a class `classes.refresh` labeled \"Refresh the page\".\n\n**Purpose:**\n\nThe `ServerOverload.js` component is responsible for displaying an informative message to users when the server is overloaded. It provides guidance on what to do in such a situation.\n\n**Key Features:**\n\n- Simple and informative design.\n- Clear error message.\n- Refresh button for retrying the request.\n\n**Usage:**\n\nThis component can be used to notify users when the server is unable to handle their requests due to high traffic or other reasons. It provides a user-friendly experience and helps minimize frustration.",
    "input": "",
    "output": "import { Button, Container, Group, Text, Title } from '@mantine/core';\nimport { Illustration } from './Illustration';\nimport classes from './ServerOverload.module.css';\n\nexport function ServerOverload() {\n  return (\n    <div className={classes.root}>\n      <Container>\n        <div className={classes.inner}>\n          <Illustration className={classes.image} />\n          <div className={classes.content}>\n            <Title className={classes.title}>All of our servers are busy</Title>\n            <Text size=\"lg\" ta=\"center\" className={classes.description}>\n              We cannot handle your request right now, please wait for a couple of minutes and\n              refresh the page. Our team is already working on this issue.\n            </Text>\n            <Group justify=\"center\">\n              <Button size=\"md\" variant=\"white\">\n                Refresh the page\n              </Button>\n            </Group>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a user interface element called a \"Slider with thumb visible on hover\". It specifies the configuration options and layout properties of this element.\n\n**Properties:**\n\n- **title:** Specifies the title of the slider, which is displayed as a label or heading. In this case, the title is \"Slider with thumb visible on hover\".\n- **category:** Defines the category of the slider. In this case, the category is \"sliders\".\n- **canvas:** Configures the canvas settings for the slider.\n    - **center:** Specifies whether the slider should be centered horizontally within its container. In this case, it is set to \"true\".\n    - **maxWidth:** Sets the maximum width of the slider canvas. In this case, the maximum width is 420.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a custom slider element with the following characteristics:\n\n- A slider track with a thumb that is only visible when the mouse hovers over it.\n- The slider can be centered horizontally within its container.\n- The maximum width of the slider canvas is set to 420.\n\n**Usage:**\n\nThis JSON file can be used to create a slider element with the specified configuration in a user interface framework or tool. The file can be imported or referenced in the user interface code to render the slider.\n\n**Additional Notes:**\n\n- The specific implementation of the slider and its behavior may vary depending on the user interface framework or tool used.\n- The canvas settings can be further customized to adjust the size, spacing, and appearance of the slider.\n- The \"hover\" state refers to when the mouse pointer is positioned over the slider thumb.",
    "input": "",
    "output": "{\n  \"title\": \"Slider with thumb visible on hover\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a React component named `SliderHover`. It is responsible for displaying a hover effect on a slider element.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A component that provides a container for the `SliderHover` component.\n    * `attributes.json`: A JSON file that contains attributes for the `SliderHover` component.\n    * `SliderHover`: The component itself.\n\n* **Component Definition:**\n    * `title`: The title of the component, which is set to \"SliderHover\".\n\n* **Usage Function:**\n    * Creates an instance of the `StoryWrapper` component.\n    * Passes the `attributes` object and the `SliderHover` component as props to the `StoryWrapper`.\n\n**How the Component Works:**\n\n* The `SliderHover` component receives the `attributes` object as props.\n* The `attributes` object contains the necessary styles and attributes for the slider element.\n* When a user hovers over the slider, the styles defined in the `attributes` object are applied to the element.\n* This creates a hover effect that can be customized using the attributes in the `attributes.json` file.\n\n**Purpose:**\n\nThe purpose of the `SliderHover` component is to provide a visual cue to the user when they hover over a slider element. This can be helpful for indicating interactivity and providing additional information.\n\n**Usage:**\n\nTo use the `SliderHover` component, follow these steps:\n\n1. Import the component into your React application.\n2. Create an instance of the `SliderHover` component.\n3. Pass the necessary attributes to the component.\n\n**Example:**\n\n```\n<SliderHover attributes={attributes} />\n```\n\n**Additional Notes:**\n\n* The `attributes.json` file contains the default styles and attributes for the `SliderHover` component.\n* The styles can be customized in the `attributes.json` file to create different hover effects.\n* The `StoryWrapper` component is used to provide a convenient way to preview the `SliderHover` component in a React application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderHover } from './SliderHover';\n\nexport default { title: 'SliderHover' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderHover} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `SliderHover.js` file creates a slider component that reacts to mouse hover events. When the mouse hovers over the slider thumb, the thumb becomes fully visible; otherwise, it is transparent.\n\n**Components:**\n\n- **Slider:** The `Slider` component from the `@mantine/core` library provides a range slider interface.\n- **useHover:** The `useHover` hook from the `@mantine/hooks` library tracks mouse hover events on the slider thumb.\n\n**Code Explanation:**\n\n- The code imports the necessary components and hooks.\n- The `SliderHover` function is exported as the main component.\n- Inside the function, the `useHover` hook is used to track hover events on the slider thumb (`ref`).\n- The `hovered` state variable stores a boolean value indicating whether the mouse is hovering over the thumb.\n- The `Slider` component is rendered with the following props:\n    - `defaultValue`: The default value of the slider (40).\n    - `min`: The minimum value of the slider (10).\n    - `max`: The maximum value of the slider (90).\n    - `ref`: The reference to the slider thumb.\n    - `label`: The label for the slider (set to `null` to remove it).\n    - `styles`: An object that defines the styles for the slider thumb, including:\n        - `transition`: A transition effect for the opacity property.\n        - `opacity`: The opacity of the thumb based on the `hovered` state.\n\n**How it Works:**\n\n- When the mouse hovers over the slider thumb, the `hovered` state variable becomes `true`.\n- The `styles` object in the `Slider` component is applied, setting the opacity of the thumb to 1.\n- When the mouse leaves the thumb, the `hovered` state variable becomes `false`.\n- The `styles` object is updated, setting the opacity of the thumb to 0.\n\n**Conclusion:**\n\nThe `SliderHover.js` file creates a interactive slider component that reacts to mouse hover events. The thumb becomes fully visible when hovered over, providing an additional interaction mechanism for adjusting slider values.",
    "input": "",
    "output": "import { Slider } from '@mantine/core';\nimport { useHover } from '@mantine/hooks';\n\nexport function SliderHover() {\n  const { hovered, ref } = useHover();\n\n  return (\n    <Slider\n      defaultValue={40}\n      min={10}\n      max={90}\n      ref={ref}\n      label={null}\n      styles={{\n        thumb: {\n          transition: 'opacity 150ms ease',\n          opacity: hovered ? 1 : 0,\n        },\n      }}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a user interface element called a slider.\n\n**File Structure:**\n\nThe file is structured as a JSON object with the following key-value pairs:\n\n- **title:** The title of the slider, which is \"Slider with icon thumb\".\n- **category:** The category of the slider, which is \"sliders\".\n- **canvas:** An object that specifies the canvas settings for the slider.\n\n**Canvas Settings:**\n\n- **center:** A boolean value that indicates whether the slider should be centered within its container. The value is set to \"true\".\n- **maxWidth:** The maximum width of the slider canvas in pixels. The value is set to 420.\n\n**Purpose:**\n\nThe purpose of this file is to configure a slider with the following characteristics:\n\n- A title of \"Slider with icon thumb\"\n- A category of \"sliders\"\n- A canvas that is centered within its container and has a maximum width of 420 pixels\n\n**Usage:**\n\nThis configuration file can be used in a user interface framework to create a slider with the specified title, category, and canvas settings. The slider can then be placed within a container and used to control a value.\n\n**Additional Notes:**\n\n- The canvas settings allow you to customize the appearance and behavior of the slider canvas.\n- The title and category of the slider can be used for display purposes.\n- The maximum width of the canvas is set to prevent the slider from becoming too wide or too narrow.",
    "input": "",
    "output": "{\n  \"title\": \"Slider with icon thumb\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** SliderIcon.js\n\n**Purpose:**\n\nThe `SliderIcon.js` file is a React component that represents a slider icon. It is part of a user interface (UI) design system.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the `SliderIcon` component and provides a set of attributes for rendering the icon.\n* **SliderIcon:** The actual slider icon component.\n* **attributes.json:** A JSON file that contains the attributes for the `StoryWrapper`.\n\n**Code Functionality:**\n\n* The file imports the necessary components and JSON data.\n* It exports a `title` object with the title \"SliderIcon\".\n* It defines a `Usage()` function that renders the `StoryWrapper` component with the following configuration:\n    * `attributes`: The attributes specified in the `attributes.json` file.\n    * `component`: The `SliderIcon` component.\n\n**Usage:**\n\nThe `SliderIcon` component can be used by importing it into other React components. The `StoryWrapper` provides a convenient way to render the icon with the specified attributes.\n\n**Purpose of the JSON File:**\n\nThe `attributes.json` file contains the following attributes:\n\n```json\n{\n  \"className\": \"slider-icon\",\n  \"style\": {\n    \"width\": \"24px\",\n    \"height\": \"24px\"\n  }\n}\n```\n\nThese attributes provide styling and positioning information for the slider icon.\n\n**Conclusion:**\n\nThe `SliderIcon.js` file is a React component that represents a slider icon. It uses the `StoryWrapper` component to render the icon with specific attributes. The `attributes.json` file provides the styling and positioning configuration for the icon.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderIcon } from './SliderIcon';\n\nexport default { title: 'SliderIcon' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderIcon} />;\n}\n"
  },
  {
    "instruction": "**SliderIcon.jsx**\n\n**Purpose:**\n\nThe `SliderIcon.jsx` file creates a React component that displays two sliders:\n\n- A single slider with a heart icon as its thumb.\n- A range slider with both a heart icon and a broken heart icon as its thumbs.\n\n**Components Used:**\n\n- **Slider:** A component from the `@mantine/core` library that allows users to adjust a value within a specified range.\n- **RangeSlider:** Another component from `@mantine/core` that allows users to select a range of values within a specified range.\n- **IconHeart:** A heart icon component from the `@tabler/icons-react` library.\n- **IconHeartBroken:** A broken heart icon component from the `@tabler/icons-react` library.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n- Import the necessary icon and slider components.\n\n**2. Styles:**\n\n- Define styles for the slider thumb, including its border width, height, width, and padding.\n\n**3. SliderIcon Component:**\n\n- Render the following components:\n    - A single slider with a heart icon as its thumb, set to a default value of 40.\n    - A range slider with both a heart icon and a broken heart icon as its thumbs, set to a default range of [20, 60].\n\n**4. Component Attributes:**\n\n- **Thumb Children:** Specify the icon to be displayed as the thumb of the slider.\n- **Color:** Set the color of the slider to red.\n- **Label:** Disable the default label displayed below the slider.\n- **DefaultValue:** Set the default value or range of the slider.\n- **Styles:** Apply the defined styles to the slider.\n\n**Usage:**\n\nThe `SliderIcon` component can be used to allow users to adjust values or ranges of values using interactive sliders with icons.\n\n**Additional Notes:**\n\n- The `@tabler/icons-react` library provides a variety of icons that can be used as thumb children.\n- The `@mantine/core` library offers a range of components for building interactive user interfaces.\n- The `mt` prop in the `RangeSlider` component sets the margin-top property, pushing the range slider below the single slider.",
    "input": "",
    "output": "import { IconHeart, IconHeartBroken } from '@tabler/icons-react';\nimport { RangeSlider, Slider } from '@mantine/core';\n\nconst styles = { thumb: { borderWidth: 2, height: 26, width: 26, padding: 3 } };\n\nexport function SliderIcon() {\n  return (\n    <>\n      <Slider\n        thumbChildren={<IconHeart size={16} stroke={1.5} />}\n        color=\"red\"\n        label={null}\n        defaultValue={40}\n        styles={styles}\n      />\n\n      <RangeSlider\n        mt=\"xl\"\n        styles={styles}\n        color=\"red\"\n        label={null}\n        defaultValue={[20, 60]}\n        thumbChildren={[\n          <IconHeart size={16} stroke={1.5} key=\"1\" />,\n          <IconHeartBroken size={16} stroke={1.5} key=\"2\" />,\n        ]}\n      />\n    </>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a configuration for a user interface element called a \"NumberInput with slider\".\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"NumberInput with slider\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** This property specifies the title of the element, which is \"NumberInput with slider\" in this case.\n* **category:** This property defines the category of the element, which is \"sliders\".\n* **canvas:** This property contains configuration options for the element's canvas.\n\n**Canvas Properties:**\n\n* **center:** This property specifies whether the element should be centered within its container. The value is set to \"true\".\n* **maxWidth:** This property sets the maximum width of the element to 420 pixels.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a NumberInput element with a slider. The element will allow users to input numerical values using a slider control.\n\n**Additional Notes:**\n\n* The `title` and `category` properties are used to identify and categorize the element.\n* The `canvas.center` property ensures that the element is centered within its container.\n* The `canvas.maxWidth` property sets the maximum width of the element to prevent it from becoming too wide.\n\n**Usage:**\n\nThis JSON file can be used to configure a NumberInput with slider element in a user interface framework or application. The configuration can be loaded and used to create the element with the specified properties.",
    "input": "",
    "output": "{\n  \"title\": \"NumberInput with slider\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines styles for a user interface element that includes a slider input with a label.\n\n**Components:**\n\n- **.wrapper:** A container element that positions the slider and label relatively.\n- **.input:** The input element that represents the slider.\n- **.label:** A label that provides a description for the slider.\n- **.slider:** The slider control itself.\n- **.thumb:** The thumb of the slider, which represents the current value.\n- **.track:** The track of the slider.\n- **.bar:** A bar that fills the track based on the slider value.\n\n**Styles:**\n\n**Wrapper:**\n\n- Positioned relatively to allow for absolute positioning of the label and slider.\n\n**Input:**\n\n- Height automatically adjusts to accommodate the content.\n- Padding and border radius are set to create spacing and a rounded border.\n\n**Label:**\n\n- Positioned absolutely to overlap the input field.\n- Pointer events are disabled to prevent interaction with the label.\n- Padding and z-index ensure proper spacing and layering.\n\n**Slider:**\n\n- Positioned absolutely to fill the input field.\n- Width set to 100% to match the input field.\n- Bottom offset to position it above the input field.\n\n**Thumb:**\n\n- Dimensions of 16px.\n\n**Track:**\n\n- A pseudo-element is used to set the background color of the track.\n\n**Bar:**\n\n- Border radius set to 0 to remove the default border radius.\n\n**Overall Functionality:**\n\nThe CSS file styles a user interface element with a slider input and label. The slider allows users to select a value within a specified range. The label provides a description of the slider's purpose.\n\n**Additional Notes:**\n\n- The CSS variables `--mantine-spacing-sm` and `--mantine-color-gray-4` are used to specify spacing and color values.\n- The `background-color` property is set using a CSS function to specify a fallback value if the first value is not available.",
    "input": "",
    "output": ".wrapper {\n  position: relative;\n}\n\n.input {\n  height: auto;\n  padding-top: 22px;\n  padding-bottom: 3px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.label {\n  position: absolute;\n  pointer-events: none;\n  padding-left: var(--mantine-spacing-sm);\n  padding-top: calc(var(--mantine-spacing-sm) / 2);\n  z-index: 1;\n}\n\n.slider {\n  position: absolute;\n  width: 100%;\n  bottom: -1px;\n}\n\n.thumb {\n  width: 16px;\n  height: 16px;\n}\n\n.track {\n  &::before {\n    background-color: (var(--mantine-color-gray-4), var(--mantine-color-dark-3));\n  }\n}\n\n.bar {\n  border-radius: 0;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a React functional component named `SliderInput`. It is part of a storybook application used to showcase and document a custom React component called `SliderInput`.\n\n**File Components:**\n\n* **StoryWrapper:** A custom component that wraps the `SliderInput` component and provides additional functionality, such as displaying attributes and rendering the component with specific configurations.\n* **attributes.json:** A JSON file that contains the attributes and their default values for the `SliderInput` component.\n* **SliderInput:** The main React component that represents the slider input functionality.\n\n**File Structure:**\n\n* **import statements:** Import necessary components and data from other files.\n* **export default:** Define the title of the story for storybook.\n* **Usage function:** Define a function that renders the `StoryWrapper` component with the `SliderInput` component and the attributes from `attributes.json`.\n\n**Purpose:**\n\nThe `SliderInput` component allows users to input numerical values using a slider. The `StoryWrapper` component provides a convenient way to showcase and test the component with different configurations.\n\n**Usage:**\n\nThe `Usage` function renders the `StoryWrapper` component with the following parameters:\n\n* `attributes`: The attributes and default values for the `SliderInput` component, loaded from `attributes.json`.\n* `component`: The `SliderInput` component itself.\n\n**Output:**\n\nThe storybook application will render a story that displays a `SliderInput` component with the specified attributes. This allows developers to interact with the component and test its functionality.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component likely provides additional functionality, such as rendering the component with different attributes, adding labels and descriptions, and handling user interactions.\n* The `attributes.json` file can be used to define different configurations for the `SliderInput` component, which can be selected through storybook options.\n* The `SliderInput` component likely uses the `react-slider` library or a similar library to implement the slider functionality.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderInput } from './SliderInput';\n\nexport default { title: 'SliderInput' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderInput} />;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided code is a React functional component called `SliderInput`. It allows users to set their daily calorie consumption by adjusting a slider and an input field.\n\n**Components:**\n\n* **NumberInput:** A Mantine input field that allows users to enter their calorie consumption as a number.\n* **Slider:** A Mantine slider that provides a visual representation of calorie consumption, with the ability to adjust the value.\n\n**State Management:**\n\n* The component uses the `useState` hook to manage the `value` state, which stores the user's calorie consumption.\n* The initial value is set to `2200`, which is an average calorie intake.\n\n**Functionality:**\n\n* When the user changes the value in the input field, the `setValue` function is called, which updates the `value` state.\n* The slider's value is synchronized with the input field's value.\n* The input field and slider have specific CSS classes applied to customize their appearance.\n\n**Features:**\n\n* Range of values from 0 to 8000 calories.\n* Step size of 50 calories.\n* Placeholder value of 2200 calories.\n* Hide input field controls.\n* Custom label and styles.\n\n**Usage:**\n\nThis component can be used in a React application to allow users to set their daily calorie consumption. The value can be used for various purposes, such as dietary planning, calorie tracking, or weight management.\n\n**Example:**\n\n```\n<SliderInput />\n```\n\n**Conclusion:**\n\nThe `SliderInput` component provides a convenient way for users to set their daily calorie consumption through a slider and input field. It offers a range of values, step size, and customization options to enhance user experience.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { NumberInput, Slider } from '@mantine/core';\nimport classes from './SliderInput.module.css';\n\nexport function SliderInput() {\n  const [value, setValue] = useState<number | string>(2200);\n  return (\n    <div className={classes.wrapper}>\n      <NumberInput\n        value={value}\n        onChange={setValue}\n        label=\"Your daily kcal consumption\"\n        placeholder=\"2200 is an average value\"\n        step={50}\n        min={0}\n        max={8000}\n        hideControls\n        classNames={{ input: classes.input, label: classes.label }}\n      />\n      <Slider\n        max={8000}\n        step={50}\n        min={0}\n        label={null}\n        value={typeof value === 'string' ? 0 : value}\n        onChange={setValue}\n        size={2}\n        className={classes.slider}\n        classNames={classes}\n      />\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user interface element for a web application. It represents a range slider with labels, which allows users to select a range of values within a specified range.\n\n**Properties:**\n\n* **title:** The title of the slider, displayed above the slider.\n* **category:** The category of the slider, which in this case is \"sliders\".\n* **canvas:** An object that defines the layout and style of the slider.\n\n**Canvas Properties:**\n\n* **center:** Whether to center the slider horizontally within its container.\n* **maxWidth:** The maximum width of the slider.\n\n**Purpose:**\n\nThe purpose of this file is to create a range slider with labels that can be used to:\n\n* Select a range of values within a given range.\n* Filter data based on the selected range.\n* Adjust settings based on the selected range.\n\n**Usage:**\n\nTo use this slider, it would need to be included in a web page or application. The JSON code can be used as a template to create the slider using a JavaScript framework or library.\n\n**Example:**\n\n```\n<input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value=\"20,80\">\n<label for=\"min\">Minimum:</label>\n<label for=\"max\">Maximum:</label>\n```\n\n**Additional Notes:**\n\n* The `min` and `max` attributes of the `<input>` element define the range of values for the slider.\n* The `step` attribute specifies the increment between each value in the range.\n* The `value` attribute specifies the initial selected range.\n* The `<label>` elements provide labels for the minimum and maximum values of the slider.\n\n**Conclusion:**\n\nThe JSON file you provided defines a range slider with labels, which is a useful interface element for selecting ranges of values. It can be used in various applications, such as data filtering, settings adjustments, and user input.",
    "input": "",
    "output": "{\n  \"title\": \"Range slider with labels\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided CSS file defines two CSS classes: `.label` and `.thumb`. These classes style the visual appearance of elements in a web application.\n\n**`.label` Class:**\n\n* **Properties:**\n    * `top`: 0 (sets the top margin to 0)\n    * `height`: 28px (sets the height to 28 pixels)\n    * `line-height`: 28px (sets the line height to 28 pixels)\n    * `width`: 34px (sets the width to 34 pixels)\n    * `padding`: 0 (sets the padding to 0)\n    * `display`: flex (sets the display property to flex)\n    * `justify-content`: center (centers the content horizontally)\n    * `align-items`: center (centers the content vertically)\n    * `font-weight`: 700 (sets the font weight to bold)\n    * `background-color`: transparent (sets the background color to transparent)\n\n* **Purpose:**\n    * Styles a label element with specific dimensions, alignment, font weight, and background color.\n    * Typically used to display labels for form inputs or other elements.\n\n**`.thumb` Class:**\n\n* **Properties:**\n    * `background-color`: var(--mantine-color-blue-6) (sets the background color to the value of the `--mantine-color-blue-6` CSS variable)\n    * `height`: 28px (sets the height to 28 pixels)\n    * `width`: 34px (sets the width to 34 pixels)\n    * `border`: none (sets the border to none)\n\n* **Purpose:**\n    * Styles a thumb element with a blue background color, specific dimensions, and no border.\n    * Typically used in interactive elements such as sliders or toggle buttons.\n\n**Overall Function:**\n\nThe `.label` and `.thumb` classes work together to style different elements in a web application. The `.label` class provides a label for form inputs or other elements, while the `.thumb` class styles a thumb element with a blue background color.",
    "input": "",
    "output": ".label {\n  top: 0;\n  height: 28px;\n  line-height: 28px;\n  width: 34px;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 700;\n  background-color: transparent;\n}\n\n.thumb {\n  background-color: var(--mantine-color-blue-6);\n  height: 28px;\n  width: 34px;\n  border: none;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file `SliderLabel.tsx` is a React component that provides a slider label for a user interface. It displays a label and a slider input element, allowing users to select a value within a specified range.\n\n**Components:**\n\n* **StoryWrapper:** A custom component that wraps the SliderLabel component for use in a Storybook story.\n* **SliderLabel:** The main component that renders the slider label.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains the attributes for the SliderLabel component, such as the label text, minimum and maximum values, and initial value.\n\n**Code Functionality:**\n\n* The `import` statements import the necessary components and data.\n* The `export default` statement exports an object with the title 'SliderLabel'.\n* The `Usage()` function creates a StoryWrapper component that renders the SliderLabel component with the attributes specified in `attributes.json`.\n\n**Usage:**\n\n* The `Usage()` function can be used in a Storybook story to display the SliderLabel component with the specified attributes.\n\n**Purpose of the File:**\n\nThe purpose of this file is to provide a reusable component for displaying a slider label in a user interface. It simplifies the process of adding slider input elements to a React application.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used in a Storybook environment to facilitate component testing and documentation.\n* The `SliderLabel` component likely handles user interactions with the slider input element.\n* The `attributes.json` file allows for easy customization of the label text, slider range, and initial value.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderLabel } from './SliderLabel';\n\nexport default { title: 'SliderLabel' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderLabel} />;\n}\n"
  },
  {
    "instruction": "**File Name:** SliderLabel.js\n\n**Description:**\n\nThe `SliderLabel.js` file is a React component that uses the `@mantine/core` library to create a range slider with labels.\n\n**Code Breakdown:**\n\n* **Imports:**\n    * `RangeSlider` component from the `@mantine/core` library.\n    * `classes` object from the `SliderLabel.module.css` file.\n\n* **Component Definition:**\n    * The `SliderLabel` component is defined as a function.\n\n* **Component Body:**\n    * Inside the function, a `RangeSlider` component is rendered.\n    * The `labelAlwaysOn` prop is set to `true`, indicating that labels should always be displayed.\n    * The `defaultValue` prop is set to an array of two values, `[20, 60]`, representing the default range of the slider.\n    * The `classNames` prop is set to the `classes` object, which provides custom styling for the component.\n\n**Purpose:**\n\nThe purpose of this component is to create a range slider with labels that allow users to select a range of values within a specified range.\n\n**Usage:**\n\nThe `SliderLabel` component can be used in other React components by importing it and rendering it.\n\n**Example:**\n\n```\n<SliderLabel />\n```\n\n**Additional Notes:**\n\n* The `SliderLabel.module.css` file likely contains CSS styles for customizing the appearance of the range slider.\n* The `@mantine/core` library provides a variety of other components and utilities for building user interfaces.\n* The specific values used in the `defaultValue` prop can be changed to suit the needs of the application.",
    "input": "",
    "output": "import { RangeSlider } from '@mantine/core';\nimport classes from './SliderLabel.module.css';\n\nexport function SliderLabel() {\n  return <RangeSlider labelAlwaysOn defaultValue={[20, 60]} classNames={classes} />;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration for an interactive element in a user interface. This element is a slider with marks, and its properties are specified within the JSON object.\n\n**Structure:**\n\nThe file is a JSON object with the following structure:\n\n```json\n{\n  \"title\": \"Slider with marks\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n```\n\n**Properties:**\n\n* **title:** This property specifies the title of the slider, which will be displayed above the slider control.\n* **category:** This property defines the category of the slider, which is \"sliders\" in this case.\n* **canvas:** This property contains configuration options for the slider canvas.\n    * **center:** This property specifies whether the slider should be centered horizontally within the canvas.\n    * **maxWidth:** This property sets the maximum width of the canvas in pixels.\n\n**Usage:**\n\nThis JSON object can be used to configure a slider with marks in an interactive user interface. The title of the slider will be displayed as a label, and the canvas will be centered within the specified maximum width.\n\n**Example:**\n\n```\n{\n  \"title\": \"Volume\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 300\n  }\n}\n```\n\n**Note:**\n\nThe specific functionality of the slider with marks may vary depending on the underlying user interface framework or JavaScript library being used to implement it.",
    "input": "",
    "output": "{\n  \"title\": \"Slider with marks\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** `.mark` and `.thumb`\n\n**Purpose:**\n\nThese files define CSS styles for two HTML elements: `.mark` and `.thumb`. They are likely part of a web application or website that uses CSS styling to enhance the presentation of content.\n\n**`.mark` Style:**\n\n* `display: flex`: This property sets the display type of the element to \"flex,\" which allows its child elements to be aligned and distributed along a flexible line.\n* No additional properties are defined in the `.mark` style.\n\n**`.thumb` Style:**\n\n* `width: 16px`: This property sets the width of the element to 16 pixels.\n* `height: 28px`: This property sets the height of the element to 28 pixels.\n* `background-color: var(--mantine-color-white)`: This property sets the background color of the element to the value of the CSS variable `--mantine-color-white`.\n* `color: var(--mantine-color-gray-5)`: This property sets the text color of the element to the value of the CSS variable `--mantine-color-gray-5`.\n* `border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-2))`: This property sets a 1px solid border around the element. The border color is determined using the `light-dark()` function, which provides a contrasting color based on the current theme (light or dark).\n\n**Additional Notes:**\n\n* The `.mark` and `.thumb` styles are likely part of a CSS framework or library, such as Mantine.\n* The `--mantine-color-white`, `--mantine-color-gray-5`, `--mantine-color-gray-3`, and `--mantine-color-dark-2` CSS variables are likely defined elsewhere in the CSS file or stylesheet.\n* The `light-dark()` function is used to automatically choose a light or dark color based on the current theme.\n* The specific purpose of the `.mark` and `.thumb` elements in the web application or website is not clear from the provided code snippet.",
    "input": "",
    "output": ".mark {\n  display: flex;\n}\n\n.thumb {\n  width: 16px;\n  height: 28px;\n  background-color: var(--mantine-color-white);\n  color: var(--mantine-color-gray-5);\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-2));\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe code snippet you provided is a React component that uses the `StoryWrapper` component to showcase the functionality of the `SliderMarks` component.\n\n**Description:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A component that wraps the `SliderMarks` component for testing and documentation purposes.\n    * `attributes.json`: A JSON file containing the attributes that will be passed to the `SliderMarks` component.\n    * `SliderMarks`: The component to be showcased.\n\n* **Component Declaration:**\n    * The component is exported with the title `SliderMarks`.\n\n* **Usage Function:**\n    * The `Usage()` function creates an instance of the `StoryWrapper` component.\n    * It passes the `attributes` JSON file and the `SliderMarks` component as props to the `StoryWrapper`.\n\n**Purpose of StoryWrapper:**\n\nThe `StoryWrapper` component is likely used for the following purposes:\n\n* To provide a controlled environment for testing and documenting the `SliderMarks` component.\n* To showcase the component with different attributes and configurations.\n\n**How the Code Works:**\n\nWhen the code is executed, the `StoryWrapper` component is rendered with the following props:\n\n* `attributes`: The attributes specified in the `attributes.json` file.\n* `component`: The `SliderMarks` component.\n\n**Benefits:**\n\n* Provides a clear and concise way to document and test the `SliderMarks` component.\n* Allows for easy customization of the component's attributes.\n\n**Additional Notes:**\n\n* The `attributes.json` file contains the configuration of the `SliderMarks` component, such as the range of values, labels, and step size.\n* The `SliderMarks` component is likely a custom React component that handles user input and displays marks on a slider.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderMarks } from './SliderMarks';\n\nexport default { title: 'SliderMarks' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderMarks} />;\n}\n"
  },
  {
    "instruction": "**File Name:** SliderMarks.js\n\n**Purpose:**\n\nThe file creates a React component called `SliderMarks` that implements a range slider with custom marks. It uses the `@tabler/icons-react` and `@mantine/core` libraries for icon and slider functionality.\n\n**Code Breakdown:**\n\n- **Imports:**\n   - Import necessary icons from the `@tabler/icons-react` library.\n   - Import the `RangeSlider` component from the `@mantine/core` library.\n   - Import CSS classes from the `SliderMarks.module.css` file.\n\n- **Icon Definition:**\n   - Define a variable called `point` that represents an icon using the `IconPoint` component from `@tabler/icons-react`.\n\n- **Component Function:**\n   - Export a function called `SliderMarks`.\n   - Render the `RangeSlider` component with the following configurations:\n     - Margin top and bottom set to \"xl\".\n     - Class names from the `SliderMarks.module.css` file.\n     - Default value set to an array of [30, 60].\n     - Thumb children set to an `IconGripVertical` icon.\n     - Marks defined as an array of objects with the following properties:\n       - `value`: The value of the mark.\n       - `label`: The label to be displayed next to the mark.\n     - For marks where `label` is set to `point`, render the `point` icon instead of a label.\n\n**Output:**\n\nThe component renders a range slider with custom marks. The marks are labeled with numbers, and for some marks, a `point` icon is displayed instead of a label.\n\n**Additional Notes:**\n\n- The `SliderMarks.module.css` file likely contains CSS styles for the range slider, including mark spacing, font size, and icon placement.\n- The `@tabler/icons-react` library provides a variety of icons, including the `IconPoint` icon used in this example.\n- The `@mantine/core` library provides a wide range of Mantine components, including the `RangeSlider` component used in this example.",
    "input": "",
    "output": "import { IconGripVertical, IconPoint } from '@tabler/icons-react';\nimport { RangeSlider } from '@mantine/core';\nimport classes from './SliderMarks.module.css';\n\nconst point = <IconPoint size={10} style={{ marginTop: 6 }} stroke={1.5} />;\n\nexport function SliderMarks() {\n  return (\n    <RangeSlider\n      mt=\"xl\"\n      mb=\"xl\"\n      classNames={classes}\n      defaultValue={[30, 60]}\n      thumbChildren={<IconGripVertical size={20} stroke={1.5} />}\n      marks={[\n        { value: 0, label: '0' },\n        { value: 12.5, label: point },\n        { value: 25, label: '25' },\n        { value: 37.5, label: point },\n        { value: 50, label: '50' },\n        { value: 62.5, label: point },\n        { value: 75, label: '75' },\n        { value: 87.5, label: point },\n        { value: 100, label: '100' },\n      ]}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user interface element called a \"slider\" with a white thumb. The file contains the following information:\n\n**Title:** Slider with white thumb\n\n**Category:** sliders\n\n**Canvas:**\n\n* **center:** Set to `true`, indicating that the slider should be centered horizontally within its container.\n* **maxWidth:** Set to 420, specifying the maximum width of the slider canvas.\n\n**Purpose:**\n\nThe purpose of this file is to define the visual and interactive properties of a slider element with a white thumb. It provides the following functionalities:\n\n* A slider control that can be dragged horizontally to adjust a value.\n* A white thumb that represents the current value of the slider.\n* The ability to center the slider horizontally within its container.\n* A maximum width of 420 pixels for the slider canvas.\n\n**Additional Notes:**\n\n* The file extension is not specified in the JSON data, but it is likely a JSON file based on the file name and content.\n* The specific behavior of the slider element is determined by additional JavaScript code that is not included in this file.\n* The `title` and `category` fields provide metadata for the slider element, which may be used for organizational purposes or to identify the type of element.",
    "input": "",
    "output": "{\n  \"title\": \"Slider with white thumb\",\n  \"category\": \"sliders\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS code defines a CSS rule for an element with the class `thumb`. This rule specifies the styling and appearance of the `thumb` element.\n\n**Key Features:**\n\n- **Border:**\n    - Border style: solid\n    - Border width: 1px\n    - Border color: `light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-2))`, which automatically adjusts the border color based on the dark mode setting.\n- **Dimensions:**\n    - Width: 28px\n    - Height: 22px\n- **Color:**\n    - Text color: `var(--mantine-color-gray-5)`\n    - Background color: `var(--mantine-color-white)`\n- **Border Radius:**\n    - Border radius: `var(--mantine-radius-sm)`\n\n**Usage:**\n\nThe `thumb` class can be applied to an HTML element to style it according to the defined rules. This element is likely a visual representation of something, such as a thumbnail or a button.\n\n**Example:**\n\n```html\n<div class=\"thumb\">Thumbnail</div>\n```\n\n**Additional Notes:**\n\n- `var(--mantine-color-*)` is a CSS custom property that represents a predefined color value within the Mantine CSS framework.\n- `light-dark()` is a Mantine utility function that automatically selects a light or dark color based on the current dark mode setting.\n- `var(--mantine-radius-sm)` is a predefined border radius value within the Mantine CSS framework.\n\n**Purpose of the CSS Rule:**\n\nThe purpose of this CSS rule is to create a styled thumbnail element with specific dimensions, colors, and border properties. This element can be used in various contexts where a visual representation of something is needed.",
    "input": "",
    "output": ".thumb {\n  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-2));\n  width: 28px;\n  height: 22px;\n  color: var(--mantine-color-gray-5);\n  background-color: var(--mantine-color-white);\n  border-radius: var(--mantine-radius-sm);\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided file is a React component module named `SliderWhite.jsx`. It appears to be part of a storybook application.\n\n**Purpose:**\n\nThe primary purpose of this file is to showcase a React component named `SliderWhite`. The component is likely used to create a slider interface with a white theme.\n\n**Components and Imports:**\n\n- **StoryWrapper:** A custom React component used to render the `SliderWhite` component with specific attributes.\n- **attributes.json:** A JSON file containing the attributes used to configure the `SliderWhite` component.\n- **SliderWhite:** The React component being displayed in the story.\n\n**Code Breakdown:**\n\n- **Import Statements:**\n    - Imports the `StoryWrapper` component from the `StoryWrapper` module.\n    - Imports the `attributes.json` file.\n    - Imports the `SliderWhite` component.\n- **Default Export:**\n    - Exports an object with a `title` property set to `SliderWhite`. This title is likely used to display the component in the storybook documentation.\n- **Usage Function:**\n    - Creates a new function called `Usage`.\n    - Renders a `StoryWrapper` component with the following props:\n        - `attributes`: The attributes defined in the `attributes.json` file.\n        - `component`: The `SliderWhite` component.\n\n**Conclusion:**\n\nThe `SliderWhite.jsx` file is responsible for displaying the `SliderWhite` component in a storybook application. It configures the component with attributes specified in the `attributes.json` file and renders it within the `StoryWrapper` component. The `title` property ensures that the component is displayed with the appropriate title in the storybook documentation.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SliderWhite } from './SliderWhite';\n\nexport default { title: 'SliderWhite' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SliderWhite} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet defines a React functional component called `SliderWhite`. Its purpose is to render a customizable slider with a horizontal icon grip as its thumb.\n\n**Functionality:**\n\n* **Import Dependencies:**\n    * The code imports necessary components from external libraries:\n        * `IconGripHorizontal` from the `@tabler/icons-react` library for the icon grip.\n        * `Slider` from the `@mantine/core` library for the slider functionality.\n        * `classes` from the `SliderWhite.module.css` file for styling.\n\n* **Component Declaration:**\n    * The `SliderWhite` component is declared as a functional component.\n\n* **Component Body:**\n    * Inside the component body, a `Slider` component is rendered with the following properties:\n        * `classNames`: Specifies the CSS classes defined in the `SliderWhite.module.css` file for styling.\n        * `thumbChildren`: Sets the icon grip as the thumb of the slider.\n        * `defaultValue`: Sets the default value of the slider to 40.\n        * `label`: Suppresses the default label of the slider.\n\n**Usage:**\n\nThe `SliderWhite` component can be used to create a customizable slider with a horizontal icon grip. To use it, simply import the component into another React component and render it.\n\n**Example:**\n\n```\n<SliderWhite />\n```\n\n**CSS Styling:**\n\nThe `SliderWhite.module.css` file provides CSS classes that can be used to style the slider. These classes can be applied to the `classNames` property of the `Slider` component.\n\n**Note:**\n\n* The `IconGripHorizontal` component provides a horizontal icon grip.\n* The `Slider` component from `@mantine/core` provides the slider functionality.\n* The `classNames` property allows for custom styling of the slider.",
    "input": "",
    "output": "import { IconGripHorizontal } from '@tabler/icons-react';\nimport { Slider } from '@mantine/core';\nimport classes from './SliderWhite.module.css';\n\nexport function SliderWhite() {\n  return (\n    <Slider\n      classNames={classes}\n      thumbChildren={<IconGripHorizontal size={20} stroke={1.5} />}\n      defaultValue={40}\n      label={null}\n    />\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON file that defines a design element for a user interface. It specifically defines a \"social buttons\" component.\n\n**File Structure:**\n\n- **title:** The title of the design element, which is \"Social buttons\".\n- **category:** The category of the design element, which is \"buttons\".\n- **canvas:** An object that specifies the layout of the social buttons.\n\n**canvas Object:**\n\n- **center:** A boolean value that determines if the social buttons should be centered horizontally.\n\n**Purpose:**\n\nThe purpose of this JSON file is to provide a predefined design template for a set of social buttons. The template includes information such as the title, category, and layout of the buttons.\n\n**Usage:**\n\nThis JSON file can be used by a UI designer or developer to quickly create a set of social buttons with the specified layout. The file can be imported into a design tool or code editor and used to generate the necessary code or markup for the social buttons.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Social buttons\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true\n  }\n}\n```\n\nThis file will create a set of social buttons that are centered horizontally on the canvas.\n\n**Additional Notes:**\n\n- The specific design and layout of the social buttons can be customized by modifying the JSON file.\n- The file may also include additional properties, such as the size, color, and font of the buttons.\n- The specific UI framework or tool used to implement the design will determine how the JSON file is interpreted and used.",
    "input": "",
    "output": "{\n  \"title\": \"Social buttons\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided code snippet is a React functional component named `FacebookIcon`. It is responsible for rendering an icon of the Facebook logo.\n\n**Component Functionality:**\n\n- The component receives props of type `React.ComponentProps<'svg'>`.\n- It renders an `<svg>` element with the following attributes:\n    - `aria-hidden=\"true\"`: Specifies that the element is not intended for accessibility purposes.\n    - `focusable=\"false\"`: Prevents the element from being focusable.\n    - `data-prefix=\"fab\"`: Indicates that the icon belongs to the Font Awesome brand icon set.\n    - `data-icon=\"facebook\"`: Specifies the icon name as \"facebook\".\n    - `className=\"svg-inline--fa fa-facebook\"`: Sets the CSS class for styling the icon.\n    - `role=\"img\"`: Sets the role of the element as an image.\n    - `xmlns=\"http://www.w3.org/2000/svg\"`: Specifies the namespace for the SVG content.\n    - `viewBox=\"0 0 512 512\"`: Defines the dimensions and viewBox for the icon.\n    - `style={{ width: 14, height: 14 }}`: Sets the width and height of the icon.\n    - `{...props}`: Passes any additional props received by the component.\n\n**Icon Design:**\n\n- Inside the `<svg>` element, there is a `<path>` element with the following attributes:\n    - `fill=\"currentColor\"`: Sets the fill color of the icon to the current color of the parent element.\n    - `d=\"...\"`: Specifies the path data for the Facebook logo shape.\n\n**Purpose:**\n\nThe `FacebookIcon` component is likely used to display the Facebook logo in an application or website. It can be used to:\n\n- Provide a visual representation of the Facebook brand.\n- Represent user profiles associated with Facebook.\n- Indicate social media sharing options for Facebook.\n\n**Conclusion:**\n\nThe `FacebookIcon` component is a React functional component that renders an SVG icon of the Facebook logo. It is intended to be used for visual representation and social media interaction purposes.",
    "input": "",
    "output": "export function FacebookIcon(props: React.ComponentProps<'svg'>) {\n  return (\n    <svg\n      aria-hidden=\"true\"\n      focusable=\"false\"\n      data-prefix=\"fab\"\n      data-icon=\"facebook\"\n      className=\"svg-inline--fa fa-facebook\"\n      role=\"img\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 512 512\"\n      style={{ width: 14, height: 14 }}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M504 256C504 119 393 8 256 8S8 119 8 256c0 123.8 90.69 226.4 209.3 245V327.7h-63V256h63v-54.64c0-62.15 37-96.48 93.67-96.48 27.14 0 55.52 4.84 55.52 4.84v61h-31.28c-30.8 0-40.41 19.12-40.41 38.73V256h68.78l-11 71.69h-57.78V501C413.3 482.4 504 379.8 504 256z\"\n      />\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code snippet defines a React functional component named `GoogleIcon`. This component represents a Google logo icon, typically used in user interfaces.\n\n**Functionality:**\n\nThe component renders an SVG (Scalable Vector Graphics) element with the following characteristics:\n\n- **Namespace:** `xmlns=\"http://www.w3.org/2000/svg\"`\n- **Preserve Aspect Ratio:** `preserveAspectRatio=\"xMidYMid\"`\n- **View Box:** `viewBox=\"0 0 256 262\"` (defines the dimensions of the icon)\n- **Style:** `{ width: 14, height: 14 }` (sets the width and height of the icon)\n\n**Content:**\n\nThe SVG element contains five `path` elements, each representing a different color segment of the Google logo:\n\n- **First Path (Blue):** Represents the left portion of the logo, including the blue area and the letters \"G\" and \"o\".\n- **Second Path (Green):** Represents the center portion of the logo, including the green area and the letters \"o\" and \"l\".\n- **Third Path (Yellow):** Represents the bottom portion of the logo, including the yellow area and the letter \"e\".\n- **Fourth Path (Red):** Represents the right portion of the logo, including the red area and the letter \"l\".\n\n**Usage:**\n\nThe `GoogleIcon` component can be used in other React components by importing it and rendering it. For example:\n\n```\n<GoogleIcon />\n```\n\n**Benefits:**\n\n- **Reusability:** The component can be easily reused in multiple locations.\n- **Maintainability:** Changes to the icon can be made in one central location.\n- **Accessibility:** The SVG format ensures accessibility for users with disabilities.\n\n**Conclusion:**\n\nThe `GoogleIcon` component is a convenient and versatile way to represent the Google logo in React applications. It provides a visually appealing and scalable icon that can be used in various contexts.",
    "input": "",
    "output": "export function GoogleIcon(props: React.ComponentPropsWithoutRef<'svg'>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMidYMid\"\n      viewBox=\"0 0 256 262\"\n      style={{ width: 14, height: 14 }}\n      {...props}\n    >\n      <path\n        fill=\"#4285F4\"\n        d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\"\n      />\n      <path\n        fill=\"#34A853\"\n        d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\"\n      />\n      <path\n        fill=\"#FBBC05\"\n        d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782\"\n      />\n      <path\n        fill=\"#EB4335\"\n        d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\"\n      />\n    </svg>\n  );\n}\n"
  },
  {
    "instruction": "**File Name:** Styles.css\n\n**Purpose:**\n\nThe file defines the styles for three social media buttons: Facebook, Discord, and GitHub. It uses CSS syntax to set the background color, text color, and hover effects for each button.\n\n**Key Features:**\n\n* **Modular CSS:** Each social media button is defined in a separate class (`facebookButton`, `discordButton`, `githubButton`).\n* **CSS Variables:** The background color for the GitHub button is defined using the `light-dark()` function, which allows for a different color depending on the dark mode setting.\n* **Mixin:** A mixin named `hover` is defined to set the background color for the hover state of each button.\n* **Theme-Aware:** The file supports theme-based styling, as evidenced by the use of `theme.colors.dark` in the GitHub button style.\n\n**Code Breakdown:**\n\n**Facebook Button:**\n```css\n.facebookButton {\n  background-color: #4267b2;\n  color: #fff;\n\n  @mixin hover {\n    background-color: #3a5a9b;\n  }\n}\n```\n\n* The background color is set to #4267b2, the Facebook brand color.\n* The text color is set to #fff (white).\n* The `@mixin hover` rule defines the background color for the hover state as #3a5a9b.\n\n**Discord Button:**\n```css\n.discordButton {\n  background-color: #5865f2;\n  color: #fff;\n\n  @mixin hover {\n    background-color: #525ee0;\n  }\n}\n```\n\n* Similar to the Facebook button, but with a different background color (#5865f2) and hover color (#525ee0).\n\n**GitHub Button:**\n```css\n.githubButton {\n  background-color: light-dark(var(--mantine-color-dark-6), var(--mantine-color-dark-9));\n  color: #fff;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-dark-6), var(--mantine-color-dark-9));\n  }\n}\n```\n\n* Uses the `light-dark()` function to set the background color based on the dark mode setting.\n* The hover state also uses the same background color.\n\n**Usage:**\n\nThese styles can be applied to HTML elements using the corresponding class names. For example:\n\n```html\n<button class=\"facebookButton\">Facebook</button>\n<button class=\"discordButton\">Discord</button>\n<button class=\"githubButton\">GitHub</button>\n```\n\n**Conclusion:**\n\nThe Styles.css file provides a modular and theme-aware solution for styling social media buttons with different background colors, text colors, and hover effects. It demonstrates best practices in CSS coding, including mixins, theme-based styling, and light-dark color variations.",
    "input": "",
    "output": ".facebookButton {\n  background-color: #4267b2;\n  color: #fff;\n\n  @mixin hover {\n    background-color: #3a5a9b;\n  }\n}\n\n.discordButton {\n  background-color: #5865f2;\n  color: #fff;\n\n  @mixin hover {\n    background-color: #525ee0;\n  }\n}\n\n/* backgroundColor: theme.colors.dark[theme.colorScheme === 'dark' ? 9 : 6],\n        color: '#fff',\n        '&:hover': {\n          backgroundColor: theme.colors.dark[theme.colorScheme === 'dark' ? 9 : 6],\n        }, */\n\n.githubButton {\n  background-color: light-dark(var(--mantine-color-dark-6), var(--mantine-color-dark-9));\n  color: #fff;\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-dark-6), var(--mantine-color-dark-9));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** SocialButtons.jsx\n\n**Purpose:**\n\nThe file is a React component that renders a set of social media buttons. It is part of a storybook component library.\n\n**Components:**\n\n* **StoryWrapper:** A component that provides a context for rendering stories.\n* **SocialButtons:** The component that renders the social media buttons.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains the attributes for the SocialButtons component.\n\n**Code Description:**\n\n* The file imports the necessary components and data.\n* It defines the `Usage()` function, which renders the `StoryWrapper` component.\n* The `StoryWrapper` component takes two props:\n    * `attributes`: An object containing the attributes for the SocialButtons component.\n    * `component`: The SocialButtons component.\n* The `SocialButtons` component is responsible for rendering the actual social media buttons.\n\n**Functionality:**\n\nWhen this file is imported and rendered, it will:\n\n* Load the `attributes.json` file.\n* Create an instance of the `SocialButtons` component.\n* Pass the attributes object to the `SocialButtons` component.\n* Render the `SocialButtons` component with the specified attributes.\n\n**Storybook Usage:**\n\nThe file is part of a storybook component library, which allows developers to easily preview and test the component. In the storybook, the `Usage()` function is used to render the `StoryWrapper` component with the `SocialButtons` component and the `attributes.json` data.\n\n**Additional Notes:**\n\n* The `title` property in the `export default` statement sets the title of the component in the storybook.\n* The `start_of_turn` tag indicates the end of the prompt and the start of the response.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SocialButtons } from './SocialButtons';\n\nexport default { title: 'SocialButtons' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SocialButtons} />;\n}\n"
  },
  {
    "instruction": "**SocialButtons.tsx**\n\nThis file is a React component that renders a set of social media login buttons. It uses the Mantine and Mantisex libraries for styling and icons.\n\n**Components:**\n\n* **GoogleButton:** A button that uses the GoogleIcon and the default variant of the Button component.\n* **FacebookButton:** A button that uses the FacebookIcon and a custom CSS class called `facebookButton`.\n* **DiscordButton:** A button that uses the DiscordIcon and a custom CSS class called `discordButton`.\n* **TwitterButton:** An anchor button that uses the TwitterIcon and the default variant of the Button component. It also includes a link to the Mantine development Twitter account.\n* **GithubButton:** A button that uses the GithubIcon and a custom CSS class called `githubButton`.\n\n**SocialButtons Component:**\n\n* Renders a Group component with five buttons: Google, Twitter, Facebook, GitHub, and Discord.\n* Centers the buttons using the `justify=\"center\"` prop of the Group component.\n* Adds padding to the buttons using the `p=\"md\"` prop.\n\n**Usage:**\n\nTo use the SocialButtons component, simply import it into your React application and render it.\n\n**Example:**\n\n```\n<SocialButtons />\n```\n\n**Purpose:**\n\nThe SocialButtons component provides a convenient way for users to log in to an application using their social media accounts. It simplifies the authentication process and allows users to connect with other users in the same community.\n\n**Additional Features:**\n\n* The buttons are styled using CSS classes from the Mantine library.\n* The icons are from the Mantisex library.\n* The Twitter button is an anchor element that opens the Mantine development Twitter account in a new tab.\n\n**Benefits:**\n\n* Improved user experience by providing a familiar and convenient login option.\n* Enhanced security by using a third-party authentication provider.\n* Increased user engagement by connecting users with similar interests.",
    "input": "",
    "output": "import { Button, ButtonProps, Group } from '@mantine/core';\nimport { DiscordIcon, GithubIcon, TwitterIcon } from '@mantinex/dev-icons';\nimport { FacebookIcon } from './FacebookIcon';\nimport { GoogleIcon } from './GoogleIcon';\nimport classes from './SocialButtons.module.css';\n\nexport function GoogleButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return <Button leftSection={<GoogleIcon />} variant=\"default\" {...props} />;\n}\n\nexport function FacebookButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return <Button leftSection={<FacebookIcon />} className={classes.facebookButton} {...props} />;\n}\n\nexport function DiscordButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return (\n    <Button className={classes.discordButton} leftSection={<DiscordIcon size={16} />} {...props} />\n  );\n}\n\n// Twitter button as anchor\nexport function TwitterButton(props: ButtonProps & React.ComponentPropsWithoutRef<'a'>) {\n  return (\n    <Button\n      component=\"a\"\n      leftSection={<TwitterIcon size={16} color=\"#00ACEE\" />}\n      variant=\"default\"\n      {...props}\n    />\n  );\n}\n\nexport function GithubButton(props: ButtonProps & React.ComponentPropsWithoutRef<'button'>) {\n  return (\n    <Button {...props} leftSection={<GithubIcon size={16} />} className={classes.githubButton} />\n  );\n}\n\nexport function SocialButtons() {\n  return (\n    <Group justify=\"center\" p=\"md\">\n      <GoogleButton>Continue with Google</GoogleButton>\n      <TwitterButton href=\"https://twitter.com/mantinedev\" target=\"_blank\">\n        Follow on Twitter\n      </TwitterButton>\n      <FacebookButton>Sign in with Facebook</FacebookButton>\n      <GithubButton>Login with GitHub</GithubButton>\n      <DiscordButton>Join Discord community</DiscordButton>\n    </Group>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe JSON file you provided defines a split button component with the following characteristics:\n\n**Title:** Split button\n**Category:** buttons\n\n**Canvas Properties:**\n\n* **center:** Set to `true`, indicating that the button should be centered within its container.\n* **maxWidth:** Set to `120`, which specifies the maximum width of the button.\n\n**Additional Notes:**\n\n* The file does not contain any code or JavaScript logic. It is a JSON configuration file that describes the visual properties and behavior of the split button component.\n* The `canvas` property specifies the layout and positioning of the button within the user interface.\n* The `title` property provides a descriptive label for the button.\n* The `category` property categorizes the button as a button component.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define the configuration of a split button component, including its title, category, and canvas properties. This configuration can be used to create and render the split button in a user interface.\n\n**Usage:**\n\nThis JSON file can be used in a JavaScript framework or library that supports component configuration through JSON files. The configuration can be loaded and used to create and render the split button component with the specified properties.\n\n**Example:**\n\n```\nconst splitButtonConfig = require('./split-button.json');\n\n// Create a split button component using the configuration\nconst splitButton = new SplitButton(splitButtonConfig);\n\n// Render the split button in the user interface\nsplitButton.render();\n```",
    "input": "",
    "output": "{\n  \"title\": \"Split button\",\n  \"category\": \"buttons\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 120\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** .css\n\n**Purpose:**\n\nThe CSS file defines styles for HTML elements, specifically for buttons and menu controls. It is used to customize the appearance of these elements by setting their border radius, border style, and other properties.\n\n**Description:**\n\n**1. .button Selector:**\n\n- Selects all HTML elements with the class \"button\".\n- Sets the `border-top-right-radius` and `border-bottom-right-radius` properties to 0, effectively removing the right border radius.\n\n**Example Usage:**\n\n```html\n<button class=\"button\">Button</button>\n```\n\n**2. .menuControl Selector:**\n\n- Selects all HTML elements with the class \"menuControl\".\n- Sets the `border-top-left-radius` and `border-bottom-left-radius` properties to 0, effectively removing the left border radius.\n- Sets the `border` property to 0, removing the default border.\n- Adds a 1px solid border to the left side of the element using the `border-left` property.\n\n**Example Usage:**\n\n```html\n<div class=\"menuControl\">Menu Control</div>\n```\n\n**Benefits:**\n\n- Customizes the appearance of buttons and menu controls.\n- Creates a more aesthetically pleasing and consistent user interface.\n- Enables precise control over the border styles and radii.\n\n**Additional Notes:**\n\n- The `--mantine-color-body` variable represents a predefined color value in the CSS framework.\n- The specific border radius values and other styles can be adjusted to suit the specific design requirements.\n- This CSS file can be included in the HTML document or linked to it as an external stylesheet.",
    "input": "",
    "output": ".button {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.menuControl {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  border: 0;\n  border-left: 1px solid var(--mantine-color-body);\n}\n"
  },
  {
    "instruction": "**File Name:** SplitButton.js\n\n**Description:**\n\nThe SplitButton.js file is a React component that uses the StoryWrapper component to display a split button. It imports the necessary components and data from other files.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the SplitButton component and provides additional props and styling.\n* **SplitButton:** The component that represents the split button.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains the attributes for the SplitButton component.\n\n**Code Functionality:**\n\n* Imports the SplitButton and StoryWrapper components from their respective files.\n* Sets the title of the component to 'SplitButton'.\n* Defines a Usage function that renders a StoryWrapper component with the following props:\n    * `attributes`: The attributes from the attributes.json file.\n    * `component`: The SplitButton component.\n\n**Purpose:**\n\nThe SplitButton.js file is responsible for creating and displaying a split button. It uses the StoryWrapper component to provide a convenient way to showcase the button in different scenarios with different attributes.\n\n**Additional Notes:**\n\n* The `SplitButton` component is assumed to have its own implementation and logic.\n* The `attributes.json` file should contain the necessary attributes for the SplitButton component, such as label, icon, and click handlers.\n* The `StoryWrapper` component is responsible for adding additional styling and functionality to the SplitButton component, such as border, spacing, and hover effects.\n\n**Usage:**\n\nTo use the SplitButton component, simply import the SplitButton.js file into your React application and render the Usage function.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SplitButton } from './SplitButton';\n\nexport default { title: 'SplitButton' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SplitButton} />;\n}\n"
  },
  {
    "instruction": "**SplitButton.js**\n\nThis file is a React functional component that implements a split button with a dropdown menu.\n\n**Description:**\n\n* **Imports:**\n    * The file imports necessary components and icons from the `@tabler/icons-react`, `@mantine/core`, and `SplitButton.module.css` modules.\n\n* **Component Function:**\n    * The `SplitButton` function renders a `Group` component with two children:\n        * A `Button` component with the text \"Send\".\n        * A `Menu` component with the following features:\n            * A `Menu.Target` component that contains an `ActionIcon` with an `IconChevronDown` icon.\n            * A `Menu.Dropdown` component containing three `Menu.Item` components:\n                * \"Schedule for later\" with an `IconCalendar` icon.\n                * \"Save draft\" with an `IconBookmark` icon.\n                * \"Delete\" with an `IconTrash` icon.\n\n* **Theme Usage:**\n    * The `useMantineTheme()` hook is used to access the current theme.\n    * The `theme.primaryColor`, `theme.colors.blue[5]`, and other theme properties are used to style the icons and menu items.\n\n**Purpose:**\n\nThe purpose of this component is to provide a split button with a dropdown menu that allows users to perform additional actions on an item, such as scheduling it for later, saving it as a draft, or deleting it.\n\n**Usage:**\n\nThis component can be used by importing it into another React component and calling it.\n\n**Example:**\n\n```\n<SplitButton />\n```\n\n**Additional Notes:**\n\n* The `SplitButton.module.css` file likely contains CSS styles for the button and menu components.\n* The `transitionProps` prop is used to configure the dropdown transition.\n* The `withinPortal` prop is used to ensure that the dropdown menu is rendered within the DOM portal.",
    "input": "",
    "output": "import { IconBookmark, IconCalendar, IconChevronDown, IconTrash } from '@tabler/icons-react';\nimport { ActionIcon, Button, Group, Menu, useMantineTheme } from '@mantine/core';\nimport classes from './SplitButton.module.css';\n\nexport function SplitButton() {\n  const theme = useMantineTheme();\n\n  return (\n    <Group wrap=\"nowrap\" gap={0}>\n      <Button className={classes.button}>Send</Button>\n      <Menu transitionProps={{ transition: 'pop' }} position=\"bottom-end\" withinPortal>\n        <Menu.Target>\n          <ActionIcon\n            variant=\"filled\"\n            color={theme.primaryColor}\n            size={36}\n            className={classes.menuControl}\n          >\n            <IconChevronDown size={16} stroke={1.5} />\n          </ActionIcon>\n        </Menu.Target>\n        <Menu.Dropdown>\n          <Menu.Item\n            leftSection={<IconCalendar size={16} stroke={1.5} color={theme.colors.blue[5]} />}\n          >\n            Schedule for later\n          </Menu.Item>\n          <Menu.Item\n            leftSection={<IconBookmark size={16} stroke={1.5} color={theme.colors.blue[5]} />}\n          >\n            Save draft\n          </Menu.Item>\n          <Menu.Item\n            leftSection={<IconTrash size={16} stroke={1.5} color={theme.colors.blue[5]} />}\n          >\n            Delete\n          </Menu.Item>\n        </Menu.Dropdown>\n      </Menu>\n    </Group>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a card with the title \"Card with progress\" and the category \"stats\".\n\n**Properties:**\n\n**1. title:**\n- Value: \"Card with progress\"\n- Purpose: Specifies the title of the card.\n\n**2. category:**\n- Value: \"stats\"\n- Purpose: Classifies the card into the \"stats\" category.\n\n**3. dimmed:**\n- Value: true\n- Purpose: Indicates that the card should have a dimmed appearance.\n\n**4. canvas:**\n- Object:\n    - **center:** true\n    - **maxWidth:** 320\n- Purpose:\n    - **center:** Specifies that the card should be centered horizontally.\n    - **maxWidth:** Sets the maximum width of the card to 320 pixels.\n\n**Usage:**\n\nThe JSON file defines the configuration for a card that will be displayed in a user interface. The card will have the following characteristics:\n\n- Title: Card with progress\n- Category: stats\n- Dimmed appearance\n- Centered horizontally\n- Maximum width of 320 pixels\n\n**Purpose:**\n\nThe purpose of this card is likely to provide some form of progress information or statistics. The dimmed appearance might suggest that the progress is not yet complete or that there is still work to be done.\n\n**Additional Notes:**\n\n- The specific content and layout of the card would be determined by additional code or markup.\n- The \"canvas\" property specifies the card's layout and positioning within the user interface.\n- The \"dimmed\" property can be used to visually indicate the status or progress of the card's content.",
    "input": "",
    "output": "{\n  \"title\": \"Card with progress\",\n  \"category\": \"stats\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines the styling for three HTML elements:\n\n- `.card`\n- `.icon`\n- `.title`\n\n**`.card` Element:**\n\n- **Position:** Relative positioning allows the `.icon` and `.title` elements to be positioned relative to the `.card` element.\n- **Overflow:** Visible overflow ensures that any content that extends beyond the `.card` element is not hidden.\n- **Padding:** The padding property sets a spacing of `var(--mantine-spacing-xl)` on all sides of the `.card` element.\n- **Padding-Top:** The padding-top property sets a spacing of `calc(var(--mantine-spacing-xl) * 1.5 + 20px)` on the top of the `.card` element. This creates additional spacing above the `.icon` element.\n\n**`.icon` Element:**\n\n- **Position:** Absolute positioning removes the `.icon` element from the normal document flow and positions it at a specific location within the `.card` element.\n- **Top:** The top property sets the top position of the `.icon` element to `-20px`. This positions the icon 20 pixels above the top of the `.card` element.\n- **Left:** The left property sets the left position of the `.icon` element to `calc(50% - 30px)`. This positions the icon at the center of the `.card` element horizontally.\n\n**`.title` Element:**\n\n- **Font-Family:** The font-family property sets the font family for the `.title` element to \"Outfit\", followed by the default font family specified by `var(--mantine-font-family)`.\n- **Line-Height:** The line-height property sets the line height to 1, which ensures that the text within the `.title` element is not too close together.\n\n**Purpose:**\n\nThe CSS file defines the style of a card that includes an icon and a title. The card is positioned relatively and has additional spacing around it. The icon is positioned absolutely within the card, and the title is styled with a specific font family and line height.",
    "input": "",
    "output": ".card {\n  position: relative;\n  overflow: visible;\n  padding: var(--mantine-spacing-xl);\n  padding-top: calc(var(--mantine-spacing-xl) * 1.5 + 20px);\n}\n\n.icon {\n  position: absolute;\n  top: -20px;\n  left: calc(50% - 30px);\n}\n\n.title {\n  font-family: Outfit, var(--mantine-font-family);\n  line-height: 1;\n}\n"
  },
  {
    "instruction": "**File Name:** StatsCard.jsx\n\n**Purpose:**\n\nThe `StatsCard.jsx` file is a React component that represents a stats card. It is responsible for displaying a user's stats, such as their current level, experience points, and health points.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that provides a context for rendering the stats card with predefined attributes.\n- **StatsCard:** The main component that displays the user's stats.\n\n**Data:**\n\n- **attributes.json:** A JSON file that contains the initial attributes for the stats card, such as the user's level, experience points, and health points.\n\n**Usage:**\n\nThe `Usage()` function creates an instance of the `StoryWrapper` component, passing in the `attributes.json` file and the `StatsCard` component as props. This renders the stats card with the specified attributes.\n\n**Workflow:**\n\n1. The `StoryWrapper` component receives the attributes and the `StatsCard` component as props.\n2. The `StatsCard` component renders the user's stats based on the provided attributes.\n3. The stats card can be used to display the user's progress and provide relevant information.\n\n**Additional Notes:**\n\n- The `title` property in the `export default` statement sets the title of the component to \"StatsCard\".\n- The `StoryWrapper` component provides a convenient way to set up the context for rendering the stats card with predefined attributes.\n- The `attributes.json` file can be used to customize the initial stats for the user.\n\n**Example Usage:**\n\n```\n<StatsCard />\n```\n\n**Output:**\n\nA stats card that displays the user's current level, experience points, and health points.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsCard } from './StatsCard';\n\nexport default { title: 'StatsCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsCard} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `StatsCard.jsx` file is a React component that displays a statistics card for a swimming challenge. It provides information about the challenge, progress, and remaining days.\n\n**Components:**\n\n- **Paper:** A Mantine component that renders a paper card with a border.\n- **ThemeIcon:** A Mantine component that renders an icon with a specified size and radius.\n- **IconSwimming:** A Tabler icon component representing a swimming icon.\n- **Text:** A Mantine component for displaying text with different styles.\n- **Badge:** A Mantine component for displaying a badge with text.\n- **Progress:** A Mantine component for displaying a progress bar.\n- **Group:** A Mantine component for grouping components vertically or horizontally.\n\n**Functionality:**\n\n- The component renders an icon, title, progress, and remaining days for a swimming challenge.\n- The progress bar shows the current progress of the challenge.\n- The badge displays the number of remaining days until the challenge ends.\n\n**Usage:**\n\nThe `StatsCard` component can be imported and used in other React components to display the swimming challenge statistics.\n\n**CSS Classes:**\n\nThe `StatsCard.module.css` file contains CSS classes used to style the component, such as the card, icon, title, and progress bar.\n\n**Additional Features:**\n\n- The `withBorder` prop is set to `true` for the `Paper` component, adding a border to the card.\n- The `radius` prop is set to `md`, specifying a medium border radius.\n- The `mt` prop is set to `20`, adding a margin-top of 20 pixels.\n- The `justify` prop is set to `space-between` for the `Group` components, aligning the elements horizontally with space between them.\n\n**Conclusion:**\n\nThe `StatsCard.jsx` file is a React component that provides a visually appealing and informative way to display statistics for a swimming challenge. It can be used to track progress, motivate users, and provide key performance indicators.",
    "input": "",
    "output": "import { IconSwimming } from '@tabler/icons-react';\nimport { Badge, Group, Paper, Progress, Text, ThemeIcon } from '@mantine/core';\nimport classes from './StatsCard.module.css';\n\nexport function StatsCard() {\n  return (\n    <Paper radius=\"md\" withBorder className={classes.card} mt={20}>\n      <ThemeIcon className={classes.icon} size={60} radius={60}>\n        <IconSwimming size={32} stroke={1.5} />\n      </ThemeIcon>\n\n      <Text ta=\"center\" fw={700} className={classes.title}>\n        Swimming challenge\n      </Text>\n      <Text c=\"dimmed\" ta=\"center\" fz=\"sm\">\n        32 km / week\n      </Text>\n\n      <Group justify=\"space-between\" mt=\"xs\">\n        <Text fz=\"sm\" c=\"dimmed\">\n          Progress\n        </Text>\n        <Text fz=\"sm\" c=\"dimmed\">\n          62%\n        </Text>\n      </Group>\n\n      <Progress value={62} mt={5} />\n\n      <Group justify=\"space-between\" mt=\"md\">\n        <Text fz=\"sm\">20 / 36 km</Text>\n        <Badge size=\"sm\">4 days left</Badge>\n      </Group>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON configuration file. It defines the metadata and layout of a data visualization dashboard.\n\n**Purpose:**\n\nThe purpose of this file is to configure a dashboard that displays statistical information with interactive controls.\n\n**Key Features:**\n\n- **Title:** \"Stats with controls\"\n- **Category:** \"stats\"\n- **Responsive:** The dashboard adjusts its size to fit different screen sizes.\n- **Canvas:**\n    - **Center:** Centers the dashboard horizontally.\n    - **MaxWidth:** Sets the maximum width of the dashboard to 500 pixels.\n\n**Usage:**\n\nThis configuration file can be used to create a dashboard using a visualization library or tool that supports JSON configuration. The specific steps involved in using the file will vary depending on the platform or tool being used.\n\n**Example:**\n\nThe provided JSON object defines the following configuration:\n\n- A title of \"Stats with controls\".\n- A category of \"stats\".\n- A responsiveness setting of \"true\".\n- A canvas configuration that centers the dashboard horizontally and sets a maximum width of 500 pixels.\n\n**Additional Notes:**\n\n- The file name and location may vary depending on the context of the dashboard.\n- The specific data and statistical information to be displayed in the dashboard are not included in this file.\n- The visualization library or tool used may have additional configuration options that are not included in this file.",
    "input": "",
    "output": "{\n  \"title\": \"Stats with controls\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 500\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the style of a UI component that displays user statistics, including the date, day, month, and various metrics.\n\n**Structure:**\n\nThe file consists of a series of CSS classes that define the appearance and layout of different elements within the component.\n\n**Key Classes:**\n\n**`.root`:**\n- Sets the background image using a linear gradient with two colors.\n- Adds padding, border radius, and defines the display as flex.\n- Adjusts the flex-direction for small screens.\n\n**`.icon`:**\n- Centers the icon horizontally and vertically within its container.\n- Sets the color and margin.\n\n**`.stat`:**\n- Sets the minimum width, padding, minimum height, display, flex properties, flex direction, and background color.\n\n**`.label`:**\n- Sets the text uppercase, font weight, font size, font family, color, and line height.\n\n**`.value`:**\n- Sets the font size and color.\n\n**`.count`:**\n- Sets the color.\n\n**`.day`:**\n- Sets the font size, font weight, color, line height, text alignment, margin, and font family.\n\n**`.month`:**\n- Sets the font size, color, line height, and text alignment.\n\n**`.controls`:**\n- Sets the display, flex direction, and margin right.\n- Adjusts the flex direction and margin bottom for small screens.\n\n**`.date`:**\n- Sets the flex, display, flex direction, and justify-content.\n\n**`.control`:**\n- Sets the height, width, color, display, justify-content, align-items, border radius, and transition.\n- Mixin for hover state.\n\n**`.controlIcon`:**\n- Rotates the icon 90 degrees for small screens.\n\n**Usage:**\n\nThe CSS classes can be applied to HTML elements to create the desired user statistics component. The styles will automatically adjust based on the screen size.\n\n**Example:**\n\n```html\n<div class=\"root\">\n  <div class=\"icon\">...</div>\n  <div class=\"stat\">...</div>\n  <div class=\"date\">...</div>\n</div>\n```\n\n**Note:**\n\nThe CSS file assumes the use of a CSS framework or library that provides variables for colors, spacing, font sizes, and other styling elements.",
    "input": "",
    "output": ".root {\n  background-image: linear-gradient(\n    -60deg,\n    var(--mantine-color-blue-4) 0%,\n    var(--mantine-color-blue-7) 100%\n  );\n  padding: var(--mantine-spacing-xl);\n  border-radius: var(--mantine-radius-md);\n  display: flex;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.icon {\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: var(--mantine-spacing-lg);\n  color: var(--mantine-color-blue-6);\n}\n\n.stat {\n  min-width: 98px;\n  padding-top: var(--mantine-spacing-xl);\n  min-height: 140px;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n  background-color: var(--mantine-color-white);\n}\n\n.label {\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: var(--mantine-font-size-xs);\n  font-family: Outfit, var(--mantine-font-family);\n  color: var(--mantine-color-gray-6);\n  line-height: 1.2;\n}\n\n.value {\n  font-size: var(--mantine-font-size-sm);\n  font-weight: 700;\n  color: var(--mantine-color-black);\n}\n\n.count {\n  color: var(--mantine-color-gray-6);\n}\n\n.day {\n  font-size: 44px;\n  font-weight: 700;\n  color: var(--mantine-color-white);\n  line-height: 1;\n  text-align: center;\n  margin-bottom: 5px;\n  font-family: Outfit, var(--mantine-font-family);\n}\n\n.month {\n  font-size: var(--mantine-font-size-sm);\n  color: var(--mantine-color-white);\n  line-height: 1;\n  text-align: center;\n}\n\n.controls {\n  display: flex;\n  flex-direction: column;\n  margin-right: calc(var(--mantine-spacing-xl) * 2);\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: row;\n    align-items: center;\n    margin-right: 0;\n    margin-bottom: var(--mantine-spacing-xl);\n  }\n}\n\n.date {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.control {\n  height: 28px;\n  width: 100%;\n  color: var(--mantine-color-blue-2);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: var(--mantine-radius-md);\n  transition: background-color 50ms ease;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    height: 34px;\n    width: 34px;\n  }\n\n  @mixin hover {\n    background-color: var(--mantine-color-blue-5);\n    color: var(--mantine-color-white);\n  }\n}\n\n.controlIcon {\n  @media (max-width: $mantine-breakpoint-xs) {\n    transform: rotate(-90deg);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** StatsControls.js\n\n**Purpose:**\n\nThe StatsControls.js file is a React component that displays a set of controls for adjusting game stats.\n\n**Components:**\n\n- **StoryWrapper:** A component that provides a container for the StatsControls component.\n- **StatsControls:** The main component responsible for rendering the stats controls.\n\n**Imports:**\n\n- `StoryWrapper` component from the `StoryWrapper` module.\n- `attributes.json` file containing the game stats attributes.\n- `StatsControls` component from the current file.\n\n**Exports:**\n\n- `title: 'StatsControls'` - Specifies the title of the component.\n- `Usage()` function that defines how the component is used.\n\n**Usage:**\n\nThe `Usage()` function creates an instance of the `StoryWrapper` component, passing the `attributes.json` file and the `StatsControls` component as props.\n\n**StatsControls Component:**\n\n- Renders a set of controls that allow users to adjust game stats, such as strength, agility, and intelligence.\n- Retrieves the stats attributes from the `attributes.json` file.\n- Provides a way to update the stats values and display the changes.\n\n**StoryWrapper Component:**\n\n- Provides a container for the StatsControls component.\n- Handles any necessary logic or state management related to the game stats.\n\n**Purpose of the File:**\n\nThe StatsControls.js file enables players to adjust their game stats, which can affect their performance in the game. It provides a user-friendly interface for interacting with these stats and adjusting them as needed.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains a list of game stats and their default values.\n- The specific implementation of the StatsControls component may vary depending on the game's mechanics and requirements.\n- The StoryWrapper component may be part of a larger game framework or engine.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsControls } from './StatsControls';\n\nexport default { title: 'StatsControls' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsControls} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `StatsControls.js` file is a React component that displays statistics for different types of activities, such as running, swimming, and biking. It allows users to select a date range and view corresponding activity data.\n\n**Functionality:**\n\n* **Data Structure:**\n    * The component uses an array of objects to represent different activities, each containing an icon and label.\n* **State Management:**\n    * It uses the `useState` hook to manage the selected date.\n* **UI Components:**\n    * **Date Controls:**\n        * Three buttons for incrementing and decrementing the selected date.\n        * Displayed date information (day and month).\n    * **Stats Display:**\n        * A group of cards, each representing an activity.\n        * Displays random distances for each activity within a range of 4-10 kilometers.\n* **Styling:**\n    * Uses CSS classes from the `StatsControls.module.css` file for styling.\n\n**Key Features:**\n\n* Date selection functionality.\n* Random distance generation for each activity.\n* Clean and visually appealing design.\n\n**Usage:**\n\nThe `StatsControls` component can be included in any React application to display activity statistics.\n\n**Example:**\n\n```\n<StatsControls />\n```\n\n**Benefits:**\n\n* Provides a convenient way to track and visualize activity data.\n* Encourages users to stay active and motivated.\n* Offers a personalized experience based on selected dates.\n\n**Additional Notes:**\n\n* The `dayjs` library is used for date formatting and manipulation.\n* The `@tabler/icons-react` library provides the icons for different activities.\n* The `@mantine/core` library provides the styling and layout components.",
    "input": "",
    "output": "import dayjs from 'dayjs';\nimport { useState } from 'react';\nimport {\n  IconBike,\n  IconChevronDown,\n  IconChevronUp,\n  IconRun,\n  IconSwimming,\n} from '@tabler/icons-react';\nimport { Group, Paper, Text, UnstyledButton } from '@mantine/core';\nimport classes from './StatsControls.module.css';\n\nconst data = [\n  { icon: IconRun, label: 'Running' },\n  { icon: IconSwimming, label: 'Swimming' },\n  { icon: IconBike, label: 'Bike' },\n];\n\nexport function StatsControls() {\n  const [date, setDate] = useState(new Date(2021, 9, 24));\n\n  const stats = data.map((stat) => (\n    <Paper className={classes.stat} radius=\"md\" shadow=\"md\" p=\"xs\" key={stat.label}>\n      <stat.icon size={32} className={classes.icon} stroke={1.5} />\n      <div>\n        <Text className={classes.label}>{stat.label}</Text>\n        <Text fz=\"xs\" className={classes.count}>\n          <span className={classes.value}>{Math.floor(Math.random() * 6 + 4)}km</span> / 10km\n        </Text>\n      </div>\n    </Paper>\n  ));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.controls}>\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).add(1, 'day').toDate())}\n        >\n          <IconChevronUp size={16} className={classes.controlIcon} stroke={1.5} />\n        </UnstyledButton>\n\n        <div className={classes.date}>\n          <Text className={classes.day}>{dayjs(date).format('DD')}</Text>\n          <Text className={classes.month}>{dayjs(date).format('MMMM')}</Text>\n        </div>\n\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).subtract(1, 'day').toDate())}\n        >\n          <IconChevronDown size={16} className={classes.controlIcon} stroke={1.5} />\n        </UnstyledButton>\n      </div>\n      <Group style={{ flex: 1 }}>{stats}</Group>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file provided defines a configuration for a UI element, specifically a \"Stats grid\". It provides the following details:\n\n**Title:** Stats grid\n**Category:** stats\n**Responsive:** true\n**Dimmed:** true\n**Canvas:**\n    **Center:** false\n\n**Purpose:**\n\nThe purpose of this file is to configure a UI element that displays statistical information in a grid format. The configuration includes the following settings:\n\n**Title:**\n- Specifies the title of the stats grid.\n\n**Category:**\n- Indicates the category of the stats grid, which is \"stats\" in this case.\n\n**Responsive:**\n- Determines whether the stats grid should be responsive to different screen sizes.\n\n**Dimmed:**\n- Sets whether the stats grid should be dimmed.\n\n**Canvas:**\n- Configures the canvas for the stats grid.\n    - **Center:** Specifies whether the stats should be centered within the canvas. In this case, it is set to false, indicating that the stats should not be centered.\n\n**Usage:**\n\nThe configuration file can be used to create a stats grid UI element with the specified settings. This element can then be used to display statistical information in a grid format, with options for title, category, responsiveness, dimming, and canvas positioning.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Stats grid\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Additional Notes:**\n\n- The configuration file can be used in conjunction with other files to provide additional information about the stats grid, such as the data to be displayed and the styling.\n- The specific behavior of the stats grid may vary depending on the underlying framework or platform used to implement it.",
    "input": "",
    "output": "{\n  \"title\": \"Stats grid\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe CSS file defines a set of styles for a user interface element, likely a card or widget. The styles are applied to four HTML elements:\n\n- `.root`: The root element of the component.\n- `.value`: The element that displays the numerical value.\n- `.diff`: The element that displays the difference between the current and previous values.\n- `.icon`: The element that contains an icon.\n- `.title`: The element that displays the title of the component.\n\n**Styles:**\n\n**`.root`:**\n- Padding: Calculates the padding based on the `--mantine-spacing-xl` variable, multiplying it by 1.5. This provides spacing around the entire component.\n\n**`.value`:**\n- Font size: 24px\n- Font weight: 700\n- Line height: 1\n- This style set defines a large, bold font with no line breaks.\n\n**`.diff`:**\n- Line height: 1\n- Display: flex\n- Align items: center\n- This style sets the line height to 1 and creates a flexbox layout with the items aligned vertically and centered horizontally.\n\n**`.icon`:**\n- Color: Uses the `light-dark()` function to set the color of the icon based on the theme's light and dark modes.\n\n**`.title`:**\n- Font weight: 700\n- Text transform: uppercase\n- This style sets the font weight to bold and capitalizes the title text.\n\n**Purpose:**\n\nBased on the styles, it appears that this CSS file defines the visual appearance of a component that displays a value, its difference from a previous value, and a title. It likely serves as part of a user interface for tracking progress, changes, or other relevant information.\n\n**Additional Notes:**\n\n- The file assumes the use of a CSS framework called Mantine, which provides variables and functions for styling.\n- The specific values and styles may need to be adjusted based on the context of the application or website where it is being used.",
    "input": "",
    "output": ".root {\n  padding: calc(var(--mantine-spacing-xl) * 1.5);\n}\n\n.value {\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1;\n}\n\n.diff {\n  line-height: 1;\n  display: flex;\n  align-items: center;\n}\n\n.icon {\n  color: light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-3));\n}\n\n.title {\n  font-weight: 700;\n  text-transform: uppercase;\n}\n"
  },
  {
    "instruction": "**File Name:** StatsGrid.jsx\n\n**Purpose:**\n\nThe StatsGrid.jsx file is a React component that displays a grid of statistics for a game or application. It utilizes the following components and files:\n\n- `StoryWrapper`: A component that provides a common template for displaying game content.\n- `attributes.json`: A JSON file containing the statistics to be displayed.\n- `StatsGrid`: The main component that renders the grid of statistics.\n\n**Functionality:**\n\n- The file imports the necessary components and files.\n- It defines a `Usage()` function that renders the `StoryWrapper` component.\n- The `StoryWrapper` component receives the `attributes` and `component` props.\n- The `component` prop specifies the `StatsGrid` component.\n- The `StatsGrid` component iterates over the `attributes` object to create a grid of statistics.\n\n**Key Features:**\n\n- Dynamically displays statistics from an external JSON file.\n- Uses a common template provided by the `StoryWrapper` component.\n- Renders a grid of statistics based on the attributes specified in the JSON file.\n\n**Usage:**\n\nTo use the StatsGrid component, you need to:\n\n- Create an attributes.json file containing the statistics.\n- Import the StatsGrid.jsx file into your application.\n- Render the Usage() function to display the grid of statistics.\n\n**Example:**\n\n```\nimport { Usage } from './StatsGrid';\n\n<Usage />\n```\n\n**Conclusion:**\n\nThe StatsGrid.jsx file is a React component that provides a convenient way to display a grid of statistics for a game or application. It simplifies the process of creating and managing statistics displays, allowing developers to focus on other aspects of the game or application.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsGrid } from './StatsGrid';\n\nexport default { title: 'StatsGrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsGrid} />;\n}\n"
  },
  {
    "instruction": "**File Name:** StatsGrid.jsx\n\n**Purpose:**\n\nThe `StatsGrid.jsx` file creates a React component that displays a grid of statistics with icons and percentage changes.\n\n**Components:**\n\n* **Import:** The file imports necessary components and icons from the `@tabler/icons-react` and `@mantine/core` libraries.\n* **Data:** It defines an array of statistical data with titles, icons, values, and percentage changes.\n* **Map Data:** The `map()` method iterates over the `data` array to create a list of `Paper` components for each statistic.\n* **Icon Mapping:** The `icons` object maps each icon name to its corresponding React icon component.\n* **Paper Component:** Each `Paper` component displays the statistics for a particular category, including:\n    * Title\n    * Icon\n    * Value\n    * Percentage change\n    * Comparison text\n* **SimpleGrid:** The `SimpleGrid` component wraps the `Paper` components to create a grid layout.\n\n**Key Features:**\n\n* Visual representation of key metrics.\n* Easy to understand statistics with icons.\n* Percentage changes highlighted with different colors.\n* Comparison text for trend analysis.\n\n**Usage:**\n\nThis component can be used to display statistics related to revenue, profit, coupon usage, and new customers. It can be integrated into any React application to provide a visual overview of key performance indicators.\n\n**Example:**\n\nThe `StatsGrid` component renders a grid with four statistics:\n\n* Revenue: $13,456 (34% increase)\n* Profit: $4,145 (-13% decrease)\n* Coupons usage: 745 (18% increase)\n* New customers: 188 (-30% decrease)\n\n**Note:**\n\n* The `StatsGrid.module.css` file contains styles for the component.\n* The specific values and colors used in the component can be customized as needed.",
    "input": "",
    "output": "import {\n  IconArrowDownRight,\n  IconArrowUpRight,\n  IconCoin,\n  IconDiscount2,\n  IconReceipt2,\n  IconUserPlus,\n} from '@tabler/icons-react';\nimport { Group, Paper, SimpleGrid, Text } from '@mantine/core';\nimport classes from './StatsGrid.module.css';\n\nconst icons = {\n  user: IconUserPlus,\n  discount: IconDiscount2,\n  receipt: IconReceipt2,\n  coin: IconCoin,\n};\n\nconst data = [\n  { title: 'Revenue', icon: 'receipt', value: '13,456', diff: 34 },\n  { title: 'Profit', icon: 'coin', value: '4,145', diff: -13 },\n  { title: 'Coupons usage', icon: 'discount', value: '745', diff: 18 },\n  { title: 'New customers', icon: 'user', value: '188', diff: -30 },\n] as const;\n\nexport function StatsGrid() {\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    const DiffIcon = stat.diff > 0 ? IconArrowUpRight : IconArrowDownRight;\n\n    return (\n      <Paper withBorder p=\"md\" radius=\"md\" key={stat.title}>\n        <Group justify=\"space-between\">\n          <Text size=\"xs\" c=\"dimmed\" className={classes.title}>\n            {stat.title}\n          </Text>\n          <Icon className={classes.icon} size={22} stroke={1.5} />\n        </Group>\n\n        <Group align=\"flex-end\" gap=\"xs\" mt={25}>\n          <Text className={classes.value}>{stat.value}</Text>\n          <Text c={stat.diff > 0 ? 'teal' : 'red'} fz=\"sm\" fw={500} className={classes.diff}>\n            <span>{stat.diff}%</span>\n            <DiffIcon size={16} stroke={1.5} />\n          </Text>\n        </Group>\n\n        <Text fz=\"xs\" c=\"dimmed\" mt={7}>\n          Compared to previous month\n        </Text>\n      </Paper>\n    );\n  });\n  return (\n    <div className={classes.root}>\n      <SimpleGrid cols={{ base: 1, xs: 2, md: 4 }}>{stats}</SimpleGrid>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file defines a configuration object for a UI component with the title \"Stats grid with diff icons\". It specifies various properties and settings that influence the appearance and functionality of the component.\n\n**Properties:**\n\n- **title:** The title of the component, displayed as a heading.\n- **category:** The category of the component, in this case, \"stats\".\n- **responsive:** Indicates whether the component should be responsive to different screen sizes.\n- **dimmed:** Whether the component should have a dimmed effect.\n- **canvas:** An object containing configuration options for the canvas element within the component.\n    - **center:** Determines whether the canvas should be centered within the component.\n\n**Additional Notes:**\n\n- The **canvas** property is nested within the main configuration object.\n- The **center** property within the **canvas** object is set to `false`, indicating that the canvas should not be centered.\n- The `category`, `responsive`, and `dimmed` properties provide additional styling and layout options for the component.\n\n**Purpose:**\n\nThe configuration file defines a specific type of UI component with additional features like diff icons. It specifies the title, category, responsiveness, dimming, and canvas settings for the component.\n\n**Usage:**\n\nThis configuration file can be used to render and display the \"Stats grid with diff icons\" component within a UI framework or application. The settings specified in the file will determine the component's visual appearance and functionality.",
    "input": "",
    "output": "{\n  \"title\": \"Stats grid with diff icons\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a CSS file that defines styles for a web page. It contains two CSS classes: `.root` and `.label`.\n\n**.root Class:**\n\n* Sets the padding property of the element with the class `root` to a value calculated using the `calc()` function.\n* The value is equal to 1.5 times the value of the `--mantine-spacing-xl` variable.\n\n**--mantine-spacing-xl** is a predefined CSS variable that represents the extra large spacing value in the Mantic CSS framework.\n\n**Example Usage:**\n\n```css\n<div class=\"root\">\n  <!-- Content -->\n</div>\n```\n\n**.label Class:**\n\n* Sets the font-family property of the element with the class `label` to the values \"Outfit\" and the value of the `--mantine-font-family` variable.\n\n**--mantine-font-family** is a predefined CSS variable that represents the font family used in the Mantic CSS framework.\n\n**Example Usage:**\n\n```css\n<label class=\"label\">\n  <!-- Label text -->\n</label>\n```\n\n**Purpose:**\n\nThe purpose of this CSS file is to define styles for the root element and labels in a web page. These styles include padding and font-family.\n\n**Additional Notes:**\n\n* The Mantic CSS framework provides predefined CSS variables for spacing and font-family.\n* CSS variables allow for code reuse and customization of styles.\n* The `calc()` function enables calculations within CSS property values.",
    "input": "",
    "output": ".root {\n  padding: calc(var(--mantine-spacing-xl) * 1.5);\n}\n\n.label {\n  font-family: Outfit, var(--mantine-font-family);\n}\n"
  },
  {
    "instruction": "**File Name:** StatsGridIcons.jsx\n\n**File Purpose:**\n\nThe file is a React component that displays a grid of icons representing various statistics. It is part of a storybook application, which is a tool for developing and documenting user interfaces.\n\n**File Structure:**\n\n* **import statements:**\n    * Import the `StoryWrapper` component from the `StoryWrapper` module.\n    * Import the `attributes.json` file.\n    * Import the `StatsGridIcons` component from the current file.\n* **export statements:**\n    * Export an object with the title `StatsGridIcons`.\n    * Export a function named `Usage` that renders the `StoryWrapper` component.\n* **Component Code:**\n    * The `Usage` function renders the `StoryWrapper` component with the following props:\n        * `attributes`: The data used to populate the icons in the grid.\n        * `component`: The `StatsGridIcons` component itself.\n\n**Usage:**\n\nThe `StatsGridIcons` component is used to display a grid of icons that represent various statistics. The icons are populated using the data in the `attributes.json` file.\n\n**Example Code from Usage Function:**\n\n```\n<StoryWrapper attributes={attributes} component={StatsGridIcons} />\n```\n\n**Attributes.json File:**\n\nThe `attributes.json` file contains the data that is used to populate the icons in the grid. The format of the data is not specified in the code, but it is likely an array of objects with properties such as `icon`, `label`, and `value`.\n\n**Purpose of StatsGridIcons:**\n\nThe `StatsGridIcons` component is used to visually represent statistics in a user interface. It can be used to display performance metrics, progress indicators, or other relevant data.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is a component provided by the storybook framework. It is used to render and document React components.\n* The `StatsGridIcons` component is part of a storybook application, which is used to develop and document user interfaces.\n* The specific functionality of the `StatsGridIcons` component may vary depending on the implementation of the `StatsGridIcons` component in the codebase.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsGridIcons } from './StatsGridIcons';\n\nexport default { title: 'StatsGridIcons' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsGridIcons} />;\n}\n"
  },
  {
    "instruction": "**StatsGridIcons.js**\n\nThis file is a React component that displays a grid of statistics with their corresponding icons.\n\n**Functionality:**\n\n- **Data:** The component receives an array of statistics data, each containing a title, value, and difference value.\n- **Mapping:** The `map()` method iterates over the statistics data and creates a card for each item.\n- **Card Content:**\n    - Title: Displayed as an uppercase text with a smaller font size.\n    - Value: Displayed as a larger font size.\n    - Difference Icon: Based on the difference value, either an arrow up or down icon is displayed. The icon color is set accordingly (teal for increase, red for decrease).\n    - Text below the icon: Shows the difference percentage and indicates whether it's an increase or decrease compared to last month.\n- **Grid Layout:** The statistics cards are displayed in a 3-column grid using the `SimpleGrid` component from the `@mantine/core` library.\n\n**Components Used:**\n\n- `IconArrowDownRight`, `IconArrowUpRight`: Icons from the `@tabler/icons-react` library.\n- `Group`, `Paper`, `SimpleGrid`, `Text`, `ThemeIcon`: Components from the `@mantine/core` library.\n\n**CSS Styles:**\n\n- `classes.root`: Styles the root container of the component.\n- `classes.label`: Styles the title text.\n\n**Usage:**\n\nThis component can be used to display a dashboard of statistics, showing metrics such as revenue, profit, and coupon usage.\n\n**Example Data:**\n\n```\nconst data = [\n  { title: 'Revenue', value: '$13,456', diff: 34 },\n  { title: 'Profit', value: '$4,145', diff: -13 },\n  { title: 'Coupons usage', value: '745', diff: 18 },\n];\n```\n\n**Output:**\n\nThe component will render a grid with three cards, each displaying a statistic with an icon and percentage change.",
    "input": "",
    "output": "import { IconArrowDownRight, IconArrowUpRight } from '@tabler/icons-react';\nimport { Group, Paper, SimpleGrid, Text, ThemeIcon } from '@mantine/core';\nimport classes from './StatsGridIcons.module.css';\n\nconst data = [\n  { title: 'Revenue', value: '$13,456', diff: 34 },\n  { title: 'Profit', value: '$4,145', diff: -13 },\n  { title: 'Coupons usage', value: '745', diff: 18 },\n];\n\nexport function StatsGridIcons() {\n  const stats = data.map((stat) => {\n    const DiffIcon = stat.diff > 0 ? IconArrowUpRight : IconArrowDownRight;\n\n    return (\n      <Paper withBorder p=\"md\" radius=\"md\" key={stat.title}>\n        <Group justify=\"apart\">\n          <div>\n            <Text c=\"dimmed\" tt=\"uppercase\" fw={700} fz=\"xs\" className={classes.label}>\n              {stat.title}\n            </Text>\n            <Text fw={700} fz=\"xl\">\n              {stat.value}\n            </Text>\n          </div>\n          <ThemeIcon\n            color=\"gray\"\n            variant=\"light\"\n            style={{\n              color: stat.diff > 0 ? 'var(--mantine-color-teal-6)' : 'var(--mantine-color-red-6)',\n            }}\n            size={38}\n            radius=\"md\"\n          >\n            <DiffIcon size={28} stroke={1.5} />\n          </ThemeIcon>\n        </Group>\n        <Text c=\"dimmed\" fz=\"sm\" mt=\"md\">\n          <Text component=\"span\" c={stat.diff > 0 ? 'teal' : 'red'} fw={700}>\n            {stat.diff}%\n          </Text>{' '}\n          {stat.diff > 0 ? 'increase' : 'decrease'} compared to last month\n        </Text>\n      </Paper>\n    );\n  });\n\n  return (\n    <div className={classes.root}>\n      <SimpleGrid cols={{ base: 1, sm: 3 }}>{stats}</SimpleGrid>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines the settings for a web component called \"Grouped stats\".\n\n**Purpose:**\n\nThe purpose of this file is to configure the visual appearance and behavior of the \"Grouped stats\" component.\n\n**Key Properties:**\n\n- **title:** The title of the component, which is displayed as a header. In this case, the title is \"Grouped stats\".\n- **category:** The category of the component, which is \"stats\".\n- **responsive:** Indicates that the component should be responsive to different screen sizes.\n- **canvas:** An object that defines the canvas settings for the component.\n    - **center:** If set to true, the component will be centered within the canvas.\n    - **maxWidth:** The maximum width of the component, in pixels. In this case, the maximum width is set to 920 pixels.\n\n**Additional Notes:**\n\n- The file is written in JSON format, which is a human-readable data exchange format.\n- The \"canvas\" settings are used to configure the layout and positioning of the component within the web page.\n- The \"responsive\" property ensures that the component adjusts its size and layout to fit different screen sizes.\n- The \"title\" and \"category\" properties provide metadata for the component, which can be used for navigation or other purposes.\n\n**Usage:**\n\nThis configuration file can be used to create an instance of the \"Grouped stats\" component within a web page. The settings specified in the file will determine the appearance and behavior of the component.",
    "input": "",
    "output": "{\n  \"title\": \"Grouped stats\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file provides styling for a user interface component that displays information about a product or service.\n\n**Components:**\n\n* **.root:**\n    - Displays the entire component using the `flex` display property.\n    - Sets a background gradient with two colors: blue-4 and blue-7.\n    - Adds padding and border radius for spacing and visual appeal.\n    - Adjusts the layout for smaller screens using media queries.\n\n* **.title:**\n    - Sets the text color to white.\n    - Transforms the text to uppercase.\n    - Uses a bold font weight.\n    - Sets a smaller font size.\n\n* **.count:**\n    - Sets the text color to white.\n    - Uses a large font size of 32px.\n    - Sets a line height of 1 for tight spacing.\n    - Uses a bold font weight.\n    - Adds a bottom margin.\n    - Specifies a custom font family.\n\n* **.description:**\n    - Sets the text color to blue-0.\n    - Uses a smaller font size.\n    - Adds a top margin.\n\n* **.stat:**\n    - Takes up equal space within the flex container.\n    - Adds padding and margin to separate the stats.\n    - Adds a left border to separate the stats.\n    - Adjusts the layout for smaller screens by removing the border and adding a top border.\n\n**Usage:**\n\nThis CSS file can be included in a web page or application to style a component that displays product or service information. The component typically includes a title, count, description, and multiple stats.\n\n**Benefits:**\n\n* **Visual Appeal:** The gradient background, bold text, and clear spacing enhance the visual appeal of the component.\n* **Responsive Design:** The media queries ensure that the component adjusts its layout automatically for different screen sizes.\n* **Customizable:** The colors, fonts, and spacing can be customized to match the branding and style of the application.\n\n**Note:**\n\nThe specific values for the variables and breakpoints may vary depending on the project and design preferences.",
    "input": "",
    "output": ".root {\n  display: flex;\n  background-image: linear-gradient(\n    -60deg,\n    var(--mantine-color-blue-4) 0%,\n    var(--mantine-color-blue-7) 100%\n  );\n  padding: calc(var(--mantine-spacing-xl) * 1.5);\n  border-radius: var(--mantine-radius-md);\n\n  @media (max-width: $mantine-breakpoint-sm) {\n    flex-direction: column;\n  }\n}\n\n.title {\n  color: var(--mantine-color-white);\n  text-transform: uppercase;\n  font-weight: 700;\n  font-size: var(--mantine-font-size-sm);\n}\n\n.count {\n  color: var(--mantine-color-white);\n  font-size: 32px;\n  line-height: 1;\n  font-weight: 700;\n  margin-bottom: var(--mantine-spacing-md);\n  font-family: Outfit, var(--mantine-font-family);\n}\n\n.description {\n  color: var(--mantine-color-blue-0);\n  font-size: var(--mantine-font-size-sm);\n  margin-top: 5px;\n}\n\n.stat {\n  flex: 1;\n\n  & + & {\n    padding-left: var(--mantine-spacing-xl);\n    margin-left: var(--mantine-spacing-xl);\n    border-left: 1px solid var(--mantine-color-blue-3);\n\n    @media (max-width: $mantine-breakpoint-sm) {\n      padding-left: 0;\n      margin-left: 0;\n      border-left: 0;\n      padding-top: var(--mantine-spacing-xl);\n      margin-top: var(--mantine-spacing-xl);\n      border-top: 1px solid var(--mantine-color-blue-3);\n    }\n  }\n}\n"
  },
  {
    "instruction": "**Filename:** StatsGroup.jsx\n\n**Purpose:**\n\nThe `StatsGroup.jsx` file is a React component that represents a group of statistics. It is used to display and interact with a set of statistical data.\n\n**Functionality:**\n\n- **Imports:**\n   - `StoryWrapper`: A component used for storybook documentation.\n   - `attributes.json`: A JSON file containing the attributes for the StatsGroup component.\n   - `StatsGroup`: The main component being exported.\n\n- **Exports:**\n   - `title`: The title of the component, used for storybook documentation.\n   - `Usage`: A function that renders the StatsGroup component with the specified attributes.\n\n**Component Structure:**\n\n- The `Usage()` function:\n    - Creates an instance of the `StoryWrapper` component.\n    - Passes the `attributes` object and the `StatsGroup` component as props.\n    - Renders the `StoryWrapper` component, which in turn renders the `StatsGroup` component with the given attributes.\n\n**Purpose of `attributes.json`:**\n\nThe `attributes.json` file defines the attributes that can be passed to the `StatsGroup` component. It contains properties such as:\n\n- `title`: The title of the statistics group.\n- `statistics`: An array of statistical data objects.\n- `layout`: The layout of the statistics group (e.g., grid, list).\n\n**Usage:**\n\nTo use the `StatsGroup` component, you can import it into your React application and pass the necessary attributes as props.\n\n**Example:**\n\n```\n<StatsGroup\n  title=\"Financial Performance\"\n  statistics={financialData}\n/>\n```\n\n**Conclusion:**\n\nThe `StatsGroup.jsx` file is a React component that provides a convenient way to display and interact with a set of statistics. It uses the `StoryWrapper` component for storybook documentation and accepts attributes defined in the `attributes.json` file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsGroup } from './StatsGroup';\n\nexport default { title: 'StatsGroup' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsGroup} />;\n}\n"
  },
  {
    "instruction": "**StatsGroup.js**\n\n**Purpose:**\n\nThe `StatsGroup.js` file is a React component that displays a group of statistics in a visually appealing and informative manner.\n\n**Components:**\n\n- `Text` component from the `@mantine/core` library is used to display the statistics, titles, and descriptions.\n- `classes.stat`, `classes.count`, `classes.title`, and `classes.description` are CSS classes defined in the `StatsGroup.module.css` file.\n\n**Data:**\n\n- The `data` array contains an object for each statistic, with properties for title, stats, and description.\n\n**Rendering:**\n\n- The `StatsGroup` component iterates over the `data` array using `map()` to create a `<div>` element for each statistic.\n- Each `<div>` element contains a `Text` component for the stats, title, and description.\n- The `classes.stat`, `classes.count`, `classes.title`, and `classes.description` classes are applied to the corresponding `Text` components for styling purposes.\n- The `className={classes.root}` prop is applied to the outermost `<div>` element to specify the root CSS class.\n\n**Usage:**\n\nThe `StatsGroup` component can be used to display a group of statistics on a web page. The `data` array can be modified to add or remove statistics.\n\n**Example:**\n\n```\n<StatsGroup />\n```\n\n**Output:**\n\nThe component will render a group of statistics with the following layout:\n\n- Title\n- Stats\n- Description\n\n**Styling:**\n\nThe `StatsGroup.module.css` file can be used to style the statistics, including font size, color, spacing, and border.",
    "input": "",
    "output": "import { Text } from '@mantine/core';\nimport classes from './StatsGroup.module.css';\n\nconst data = [\n  {\n    title: 'Page views',\n    stats: '456,133',\n    description: '24% more than in the same month last year, 33% more that two years ago',\n  },\n  {\n    title: 'New users',\n    stats: '2,175',\n    description: '13% less compared to last month, new user engagement up by 6%',\n  },\n  {\n    title: 'Completed orders',\n    stats: '1,994',\n    description: '1994 orders were completed this month, 97% satisfaction rate',\n  },\n];\n\nexport function StatsGroup() {\n  const stats = data.map((stat) => (\n    <div key={stat.title} className={classes.stat}>\n      <Text className={classes.count}>{stat.stats}</Text>\n      <Text className={classes.title}>{stat.title}</Text>\n      <Text className={classes.description}>{stat.description}</Text>\n    </div>\n  ));\n  return <div className={classes.root}>{stats}</div>;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file that defines the layout and settings for a specific dashboard element. It is used to configure a dashboard widget called \"Stats with ring progress.\"\n\n**File Structure:**\n\n* **title:** The title of the dashboard widget, which is \"Stats with ring progress.\"\n* **category:** The category of the dashboard widget, which is \"stats.\"\n* **responsive:** Specifies whether the widget is responsive to different screen sizes, with a value of `true`.\n* **dimmed:** Indicates whether the widget should be dimmed, with a value of `true`.\n* **canvas:**\n    * **center:** Centers the widget horizontally within the dashboard.\n    * **maxWidth:** Sets the maximum width of the widget to 840 pixels.\n\n**Purpose:**\n\nThe purpose of this configuration file is to:\n\n* Define the title and category of the dashboard widget.\n* Specify the responsiveness and dimming of the widget.\n* Configure the canvas settings to center the widget and set its maximum width.\n\n**Usage:**\n\nThis configuration file is used by a dashboarding platform or application to render and display the \"Stats with ring progress\" widget with the specified settings. The widget can be embedded into a dashboard layout to provide statistical information with a progress ring visualization.\n\n**Additional Notes:**\n\n* The specific functionality of the \"Stats with ring progress\" widget is not included in this configuration file.\n* The configuration options and values may vary depending on the dashboarding platform or application being used.\n* The canvas settings can be further customized to adjust the widget's positioning and layout.",
    "input": "",
    "output": "{\n  \"title\": \"Stats with ring progress\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 840\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** StatsRing.js\n\n**Purpose:**\n\nThe StatsRing.js file appears to be a React component that represents a stats ring. It is likely used to display various statistics or metrics in a visually appealing way.\n\n**Code Breakdown:**\n\n* **Imports:**\n    * `StoryWrapper`: A React component used for storybook rendering.\n    * `attributes.json`: A JSON file containing attributes used by the StatsRing component.\n    * `StatsRing`: The StatsRing component itself.\n\n* **Default Export:**\n    * An object with a `title` property set to 'StatsRing'. This likely serves as the documentation for the component.\n\n* **Usage Function:**\n    * A function that renders the StatsRing component within a StoryWrapper.\n    * It passes the `attributes` object and the `StatsRing` component as props to the StoryWrapper.\n\n**How the File Works:**\n\nWhen this file is imported and rendered, it will:\n\n1. Import the necessary components and data.\n2. Render the StatsRing component with the specified attributes.\n3. Display a visual representation of the stats ring based on the attributes.\n\n**Additional Notes:**\n\n* The `attributes.json` file likely contains configuration options for the StatsRing component, such as colors, sizes, and statistics to display.\n* The StatsRing component likely includes logic to render the statistics in a visually appealing way, using React components or other rendering techniques.\n\n**Conclusion:**\n\nThe StatsRing.js file is a React component responsible for rendering a stats ring. It imports necessary components and data, and defines a Usage function to render the component within a StoryWrapper. The stats ring is likely used to display important metrics or statistics in a visually appealing manner.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsRing } from './StatsRing';\n\nexport default { title: 'StatsRing' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsRing} />;\n}\n"
  },
  {
    "instruction": "**StatsRing.js**\n\nThis file is a React functional component that displays a set of circular progress rings along with associated statistics. It utilizes the Mantine and Tabler UI libraries for styling and icon rendering.\n\n**Components:**\n\n* **Paper:** Each progress ring is wrapped in a Paper component for padding, border radius, and background color.\n* **RingProgress:** A circular progress bar that indicates the progress of each statistic.\n* **Icon:** The component uses the `IconArrowUpRight` and `IconArrowDownRight` components from the Tabler library to display an arrow icon based on the statistic's change direction.\n* **SimpleGrid:** The progress rings are arranged in a grid layout with three columns on larger screens and one column on smaller screens.\n\n**Data:**\n\nThe component receives data about statistics in the following format:\n\n```\nconst data = [\n  { label: 'Page views', stats: '456,578', progress: 65, color: 'teal', icon: 'up' },\n  // ...\n];\n```\n\n**Key Features:**\n\n* **Dynamic Data:** The statistics and progress values are dynamically rendered from the `data` array.\n* **Conditional Icon:** The arrow icon changes depending on whether the progress is up or down.\n* **Responsive Layout:** The grid layout adjusts to different screen sizes.\n\n**Usage:**\n\nTo use the component, simply import it into your React application and render it:\n\n```\n<StatsRing />\n```\n\n**Output:**\n\nThe component displays a grid of circular progress rings with labels, statistics, and arrow icons indicating the progress of each statistic.\n\n**Additional Notes:**\n\n* The `color` prop of the `RingProgress` component determines the color of the progress bar.\n* The `size` prop sets the size of the progress rings.\n* The `strokeWidth` prop specifies the thickness of the progress bar.\n* The `label` prop of the `RingProgress` component accepts a component that will be displayed in the center of the ring.",
    "input": "",
    "output": "import { IconArrowDownRight, IconArrowUpRight } from '@tabler/icons-react';\nimport { Center, Group, Paper, RingProgress, SimpleGrid, Text } from '@mantine/core';\n\nconst icons = {\n  up: IconArrowUpRight,\n  down: IconArrowDownRight,\n};\n\nconst data = [\n  { label: 'Page views', stats: '456,578', progress: 65, color: 'teal', icon: 'up' },\n  { label: 'New users', stats: '2,550', progress: 72, color: 'blue', icon: 'up' },\n  {\n    label: 'Orders',\n    stats: '4,735',\n    progress: 52,\n    color: 'red',\n    icon: 'down',\n  },\n] as const;\n\nexport function StatsRing() {\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    return (\n      <Paper withBorder radius=\"md\" p=\"xs\" key={stat.label}>\n        <Group>\n          <RingProgress\n            size={80}\n            roundCaps\n            thickness={8}\n            sections={[{ value: stat.progress, color: stat.color }]}\n            label={\n              <Center>\n                <Icon size={20} stroke={1.5} />\n              </Center>\n            }\n          />\n\n          <div>\n            <Text c=\"dimmed\" size=\"xs\" tt=\"uppercase\" fw={700}>\n              {stat.label}\n            </Text>\n            <Text fw={700} size=\"xl\">\n              {stat.stats}\n            </Text>\n          </div>\n        </Group>\n      </Paper>\n    );\n  });\n\n  return <SimpleGrid cols={{ base: 1, sm: 3 }}>{stats}</SimpleGrid>;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON object defines a configuration for an app card with the title \"Stats card with progress\".\n\n**Properties:**\n\n**title:**\n- Value: \"Stats card with progress\"\n- Description: The title of the card.\n\n**category:**\n- Value: \"app-cards\"\n- Description: The category of the card, which is \"app-cards\".\n\n**responsive:**\n- Value: true\n- Description: Indicates that the card is responsive and will adjust its layout to different screen sizes.\n\n**dimmed:**\n- Value: true\n- Description: Sets the card's background to a dimmed color, indicating it is not the primary focus of the screen.\n\n**canvas:**\n- Type: Object\n- Properties:\n    **center:**\n        - Value: true\n        - Description: Centers the card horizontally within its container.\n    **maxWidth:**\n        - Value: 420\n        - Description: Sets the maximum width of the card to 420 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to define a configuration for an app card with the following characteristics:\n\n- Title: Stats card with progress\n- Category: App cards\n- Responsiveness: Enabled\n- Dimmed background: Enabled\n- Centered horizontally: Enabled\n- Maximum width: 420 pixels\n\n**Usage:**\n\nThis configuration can be used to create an app card with the specified characteristics. The card can then be embedded in an application or website using an appropriate JavaScript library or framework.\n\n**Additional Notes:**\n\n- The specific content and functionality of the card would need to be implemented separately.\n- The \"canvas\" property allows for further customization of the card's layout and styling.\n- The \"category\" property is used for grouping and filtering app cards.",
    "input": "",
    "output": "{\n  \"title\": \"Stats card with progress\",\n  \"category\": \"app-cards\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 420\n  }\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe CSS file defines a set of styles for an HTML document, specifically for a card component. The styles are organized into four main CSS classes:\n\n**1. .card**\n\n- Sets the background color of the card to the value of the `--mantine-color-body` CSS variable.\n- Provides a styling context for the card's content.\n\n**2. .label**\n\n- Specifies the font family for the label text to be Outfit, falling back to the value of the `--mantine-font-family` CSS variable.\n- Sets the font weight to 700 (bold).\n- Sets the line height to 1, indicating no additional spacing between lines.\n\n**3. .lead**\n\n- Similar to .label, it sets the font family and font weight to Outfit and 700, respectively.\n- Sets the font size to 22px.\n- Sets the line height to 1, suppressing any additional spacing.\n\n**4. .inner**\n\n- Defines a flexbox container with the following properties:\n    - Sets the display property to flex.\n    - Media query for small screens (max-width: $mantine-breakpoint-xs):\n        - Changes the flex-direction to column.\n\n**5. .ring**\n\n- Represents a flexible element within the .inner container.\n    - Takes up the remaining available space by setting flex: 1.\n    - Sets the display property to flex.\n    - Justifies the content to the right by default.\n    - Media query for small screens:\n        - Changes the justify-content to center.\n        - Adds a margin-top of var(--mantine-spacing-md).",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.label {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 700;\n  line-height: 1;\n}\n\n.lead {\n  font-family: Outfit, var(--mantine-font-family);\n  font-weight: 700;\n  font-size: 22px;\n  line-height: 1;\n}\n\n.inner {\n  display: flex;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    flex-direction: column;\n  }\n}\n\n.ring {\n  flex: 1;\n  display: flex;\n  justify-content: flex-end;\n\n  @media (max-width: $mantine-breakpoint-xs) {\n    justify-content: center;\n    margin-top: var(--mantine-spacing-md);\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** StatsRingCard.jsx\n\n**Purpose:**\n\nThe StatsRingCard.jsx file appears to be a React component that displays a stats ring card. It utilizes the StoryWrapper component to facilitate component rendering and testing.\n\n**Code Breakdown:**\n\n- **Import Statements:**\n    - `StoryWrapper`: A React component used for rendering and testing individual components.\n    - `attributes.json`: A JSON file containing attributes used by the StatsRingCard component.\n    - `StatsRingCard`: The React component to be rendered.\n\n- **Default Export:**\n    - An object with a `title` property set to 'StatsRingCard'. This likely serves as metadata for the component.\n\n- **Usage Function:**\n    - A function named `Usage` that defines how the StatsRingCard component is rendered within the StoryWrapper.\n    - It sets the `attributes` prop of the StoryWrapper to the `attributes` object imported from `attributes.json`.\n    - The `component` prop is set to the `StatsRingCard` component.\n\n**Component Functionality:**\n\n- The StatsRingCard component likely renders a stats ring with attributes specified in the `attributes.json` file.\n- The StoryWrapper component provides a convenient way to render and interact with the component in isolation.\n\n**Testing:**\n\n- The component can be tested using the StoryWrapper component, which allows developers to preview and test the component with different attributes.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains data such as stats values, labels, colors, and other styling options for the stats ring.\n- The StatsRingCard component may rely on other components or libraries for rendering the stats ring.\n- The code snippet does not provide the actual implementation of the StatsRingCard component, which is likely located in a separate file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsRingCard } from './StatsRingCard';\n\nexport default { title: 'StatsRingCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsRingCard} />;\n}\n"
  },
  {
    "instruction": "**File Name:** StatsRingCard.jsx\n\n**Purpose:**\n\nThe `StatsRingCard.jsx` file is a React component that displays statistics in the form of a ring progress bar. It provides a visual representation of project task completion, highlighting the remaining, in-progress, and completed tasks.\n\n**Components:**\n\n* **Card:** A card component with a border, radius, and padding.\n* **Group:** A group component to display the task statistics.\n* **Text:** Text components for displaying labels, values, and completion percentage.\n* **RingProgress:** A ring progress bar component that represents the task completion.\n\n**Data:**\n\n* **stats:** An array of objects containing task statistics (remaining, in-progress).\n* **completed:** The number of completed tasks.\n* **total:** The total number of tasks.\n\n**Functionality:**\n\n* The component calculates the completion percentage based on the `completed` and `total` values.\n* It maps the `stats` data to a list of `<div>` elements that display the task statistics.\n* The ring progress bar is configured with a single section representing the completion percentage.\n* The completion percentage is displayed as a label within the ring progress bar.\n\n**Usage:**\n\nThe `StatsRingCard` component can be imported and used in other React components to display project task statistics.\n\n**Example:**\n\n```\n<StatsRingCard />\n```\n\n**Output:**\n\nThe component will render a card with the following information:\n\n* **Project tasks:** Label indicating the category.\n* **1887:** Value representing the number of completed tasks.\n* **Completed:** Label indicating the status.\n* **Ring Progress Bar:** Circular progress bar representing the completion percentage.\n* **447 Remaining:** Text indicating the number of remaining tasks.\n* **76 In progress:** Text indicating the number of in-progress tasks.\n\n**Conclusion:**\n\nThe `StatsRingCard.jsx` file provides a visually appealing and informative way to display project task statistics. It can be used to track progress, identify areas for improvement, and motivate team members.",
    "input": "",
    "output": "import { Card, Group, RingProgress, Text, useMantineTheme } from '@mantine/core';\nimport classes from './StatsRingCard.module.css';\n\nconst stats = [\n  { value: 447, label: 'Remaining' },\n  { value: 76, label: 'In progress' },\n];\n\nexport function StatsRingCard() {\n  const theme = useMantineTheme();\n  const completed = 1887;\n  const total = 2334;\n  const items = stats.map((stat) => (\n    <div key={stat.label}>\n      <Text className={classes.label}>{stat.value}</Text>\n      <Text size=\"xs\" c=\"dimmed\">\n        {stat.label}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder p=\"xl\" radius=\"md\" className={classes.card}>\n      <div className={classes.inner}>\n        <div>\n          <Text fz=\"xl\" className={classes.label}>\n            Project tasks\n          </Text>\n          <div>\n            <Text className={classes.lead} mt={30}>\n              1887\n            </Text>\n            <Text fz=\"xs\" c=\"dimmed\">\n              Completed\n            </Text>\n          </div>\n          <Group mt=\"lg\">{items}</Group>\n        </div>\n\n        <div className={classes.ring}>\n          <RingProgress\n            roundCaps\n            thickness={6}\n            size={150}\n            sections={[{ value: (completed / total) * 100, color: theme.primaryColor }]}\n            label={\n              <div>\n                <Text ta=\"center\" fz=\"lg\" className={classes.label}>\n                  {((completed / total) * 100).toFixed(0)}%\n                </Text>\n                <Text ta=\"center\" fz=\"xs\" c=\"dimmed\">\n                  Completed\n                </Text>\n              </div>\n            }\n          />\n        </div>\n      </div>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided contains metadata for a user interface element, likely a chart or visualization.\n\n**File Structure:**\n\nThe file is a JSON object with the following key-value pairs:\n\n* **title:** The title of the visualization, which is \"Stats with segments\".\n* **category:** The category of the visualization, which is \"stats\".\n* **responsive:** Whether the visualization is responsive to screen size changes, which is set to `true`.\n* **dimmed:** Whether the visualization is dimmed, which is set to `true`.\n* **canvas:** An object that contains configuration options for the canvas element that will contain the visualization.\n    * **center:** Whether the canvas should be centered within its container, which is set to `true`.\n    * **maxWidth:** The maximum width of the canvas, which is set to 440 pixels.\n\n**Purpose:**\n\nBased on the metadata, it appears that the purpose of this file is to configure a visualization with the following characteristics:\n\n* A title of \"Stats with segments\".\n* A category of \"stats\".\n* Responsiveness to screen size changes.\n* A dimmed appearance.\n* A canvas element with a maximum width of 440 pixels and centered within its container.\n\n**Additional Notes:**\n\n* The specific content of the visualization is not included in this file.\n* The `canvas` configuration options may vary depending on the type of visualization being created.\n* The file may be used as part of a user interface framework or library.",
    "input": "",
    "output": "{\n  \"title\": \"Stats with segments\",\n  \"category\": \"stats\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 440\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines a set of styles for a user interface or web page. It specifies the font, line height, font size, and other visual properties of various HTML elements.\n\n**Target Elements:**\n\nThe styles are applied to the following HTML elements:\n\n- `progressLabel`\n- `stat`\n- `statCount`\n- `diff`\n- `icon`\n\n**Style Definitions:**\n\n**1. .progressLabel:**\n\n- Sets the font family to `Outfit`, or the default Mantic font family if Outfit is unavailable.\n- Sets the line height to 1.\n- Sets the font size to the small size defined by the `--mantine-font-size-sm` variable.\n\n**2. .stat:**\n\n- Defines a border-bottom with a width of 3 pixels, a solid style, and a color that is light or dark based on the theme.\n- Adds a bottom padding of 5 pixels.\n\n**3. .statCount:**\n\n- Inherits the font family from `Outfit` or the default Mantic font family.\n- Sets the line height to 1.3.\n\n**4. .diff:**\n\n- Inherits the font family from `Outfit` or the default Mantic font family.\n- Displays the element as a flex container.\n- Aligns the items vertically using the `align-items` property.\n\n**5. .icon:**\n\n- Sets the color of the icon to light or dark gray, depending on the theme.\n\n**Purpose:**\n\nThe styles defined in this file are likely used to display user progress, statistics, and other information in a visually appealing and consistent manner. The font, line height, font size, and border styles contribute to the overall readability, clarity, and presentation of the user interface.",
    "input": "",
    "output": ".progressLabel {\n  font-family: Outfit, var(--mantine-font-family);\n  line-height: 1;\n  font-size: var(--mantine-font-size-sm);\n}\n\n.stat {\n  border-bottom: 3px solid;\n  padding-bottom: 5px;\n}\n\n.statCount {\n  font-family: Outfit, var(--mantine-font-family);\n  line-height: 1.3;\n}\n\n.diff {\n  font-family: Outfit, var(--mantine-font-family);\n  display: flex;\n  align-items: center;\n}\n\n.icon {\n  color: light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-3));\n}\n"
  },
  {
    "instruction": "**File Name:** StatsSegments.jsx\n\n**Purpose:**\n\nThe `StatsSegments.jsx` file is a React component that renders a set of statistics segments. It is used to display key performance metrics or data points related to a specific topic or area.\n\n**Functionality:**\n\n* **Imports:**\n    * `StoryWrapper`: A React component that provides a structured environment for rendering content.\n    * `attributes.json`: A JSON file containing data attributes for the stats segments.\n    * `StatsSegments`: A React component that renders the statistics segments.\n\n* **Exports:**\n    * `title`: Sets the title of the component to \"StatsSegments\".\n    * `Usage`: A function that renders the `StoryWrapper` component with the `attributes` and `StatsSegments` components.\n\n**Rendering:**\n\nThe `Usage` function renders the `StoryWrapper` component with the following props:\n\n* `attributes`: The data attributes from the `attributes.json` file.\n* `component`: The `StatsSegments` component.\n\n**StatsSegments Component:**\n\nThe `StatsSegments` component receives the `attributes` prop, which contains an array of objects with the following structure:\n\n```json\n[\n  {\n    \"title\": \"Metric 1\",\n    \"value\": 100,\n    \"unit\": \"%\"\n  },\n  {\n    \"title\": \"Metric 2\",\n    \"value\": 200,\n    \"unit\": \"€\"\n  },\n  // ...\n]\n```\n\nEach object in the array represents a single statistics segment with a title, value, and unit.\n\n**Rendering Logic:**\n\nThe `StatsSegments` component iterates over the `attributes` array and renders a `<Segment>` component for each object. The `<Segment>` component displays the title, value, and unit of each statistics segment.\n\n**Conclusion:**\n\nThe `StatsSegments.jsx` file is a React component that provides a convenient way to display a set of statistics segments. It takes a JSON file of attributes as input and renders a set of `<Segment>` components based on the data in the file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { StatsSegments } from './StatsSegments';\n\nexport default { title: 'StatsSegments' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={StatsSegments} />;\n}\n"
  },
  {
    "instruction": "**File Name:** StatsSegments.js\n\n**Purpose:**\n\nThe `StatsSegments.js` file is a React component that displays segmented data about user interactions on a web page, including page views, device usage, and growth statistics.\n\n**File Structure:**\n\n* **Imports:**\n    * Icon components from the `@tabler/icons-react` library.\n    * Mantine core components.\n    * CSS styles for the component.\n* **Data:**\n    * An array of data objects containing information about different user segments (mobile, desktop, tablet).\n* **Component Function:**\n    * **StatsSegments()** function that renders the component.\n    * **segments:** Renders a set of progress bars based on the data segments.\n    * **descriptions:** Renders a set of boxes with statistics for each segment.\n* **Rendering:**\n    * A `Paper` component with border and rounded corners.\n    * A header with page views, growth percentage, and an icon.\n    * A progress bar that represents the overall user segment distribution.\n    * A grid of boxes displaying statistics for each segment.\n\n**Component Functionality:**\n\n* The component displays a visual representation of user segments and their proportions.\n* It shows the number of users in each segment and the growth percentage compared to the previous month.\n* The progress bars and statistics provide insights into user behavior and distribution across different devices.\n\n**Use Case:**\n\nThis component can be used to:\n\n* Track user engagement and growth by device type.\n* Monitor website traffic and identify popular user segments.\n* Analyze user behavior patterns and make data-driven decisions about website design and marketing strategies.\n\n**Additional Features:**\n\n* The component is styled using CSS classes.\n* The data can be easily modified to include additional user segments or statistics.\n* The component can be customized with different icon and color options.",
    "input": "",
    "output": "import { IconArrowUpRight, IconDeviceAnalytics } from '@tabler/icons-react';\nimport { Box, Group, Paper, Progress, SimpleGrid, Text } from '@mantine/core';\nimport classes from './StatsSegments.module.css';\n\nconst data = [\n  { label: 'Mobile', count: '204,001', part: 59, color: '#47d6ab' },\n  { label: 'Desktop', count: '121,017', part: 35, color: '#03141a' },\n  { label: 'Tablet', count: '31,118', part: 6, color: '#4fcdf7' },\n];\n\nexport function StatsSegments() {\n  const segments = data.map((segment) => (\n    <Progress.Section value={segment.part} color={segment.color} key={segment.color}>\n      {segment.part > 10 && <Progress.Label>{segment.part}%</Progress.Label>}\n    </Progress.Section>\n  ));\n\n  const descriptions = data.map((stat) => (\n    <Box key={stat.label} style={{ borderBottomColor: stat.color }} className={classes.stat}>\n      <Text tt=\"uppercase\" fz=\"xs\" c=\"dimmed\" fw={700}>\n        {stat.label}\n      </Text>\n\n      <Group justify=\"space-between\" align=\"flex-end\" gap={0}>\n        <Text fw={700}>{stat.count}</Text>\n        <Text c={stat.color} fw={700} size=\"sm\" className={classes.statCount}>\n          {stat.part}%\n        </Text>\n      </Group>\n    </Box>\n  ));\n\n  return (\n    <Paper withBorder p=\"md\" radius=\"md\">\n      <Group justify=\"space-between\">\n        <Group align=\"flex-end\" gap=\"xs\">\n          <Text fz=\"xl\" fw={700}>\n            345,765\n          </Text>\n          <Text c=\"teal\" className={classes.diff} fz=\"sm\" fw={700}>\n            <span>18%</span>\n            <IconArrowUpRight size={16} style={{ marginBottom: 4 }} stroke={1.5} />\n          </Text>\n        </Group>\n        <IconDeviceAnalytics size={22} className={classes.icon} stroke={1.5} />\n      </Group>\n\n      <Text c=\"dimmed\" fz=\"sm\">\n        Page views compared to previous month\n      </Text>\n\n      <Progress.Root size={34} classNames={{ label: classes.progressLabel }} mt={40}>\n        {segments}\n      </Progress.Root>\n      <SimpleGrid cols={{ base: 1, xs: 3 }} mt=\"xl\">\n        {descriptions}\n      </SimpleGrid>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe file provided is a JSON configuration file for a web component or application. It defines the properties and settings for a grid layout with vertical items.\n\n**Properties**\n\n* **title:** The title of the grid, displayed as a heading.\n* **category:** The category of the grid, used for organization and navigation.\n* **responsive:** Whether the grid should adjust its layout automatically to fit different screen sizes.\n* **canvas:**\n    * **center:** Whether the grid should be centered within its container.\n\n**Settings**\n\n* **center:** False\n* **responsive:** True\n\n**Purpose**\n\nThe purpose of this configuration file is to specify the layout and settings for a grid with vertical items. The settings include:\n\n* **Title:** A heading for the grid.\n* **Category:** A category for organizational purposes.\n* **Responsive layout:** The grid automatically adjusts its size to fit different screen sizes.\n* **Centering:** The grid is not centered within its container.\n\n**Usage**\n\nThis configuration file can be used to:\n\n* Define the layout of a grid with vertical items.\n* Specify the title, category, and responsiveness of the grid.\n* Configure additional settings, such as centering.\n\n**Additional Notes**\n\n* The configuration file is written in JSON format.\n* The properties and settings can be customized as needed.\n* The specific components or frameworks used to implement the grid layout may vary depending on the application or project.",
    "input": "",
    "output": "{\n  \"title\": \"Grid with vertical items\",\n  \"category\": \"grids\",\n  \"responsive\": true,\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** Subgrid.jsx\n\n**Purpose:**\n\nThe `Subgrid.jsx` file is a React component that serves as a subgrid within a larger story. It imports necessary components and data from other files to render a specific layout.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A component that provides a wrapper for the subgrid.\n    * `attributes.json`: A JSON file containing attributes for the subgrid.\n    * `Subgrid`: The subgrid component itself.\n\n* **Default Export:**\n    * An object with a `title` property set to 'Subgrid'. This likely defines the title of the subgrid.\n\n* **Usage Function:**\n    * A function named `Usage` that defines how the subgrid is rendered.\n    * It returns a `<StoryWrapper>` component with the following props:\n        * `attributes`: The data from the `attributes.json` file.\n        * `component`: The `Subgrid` component.\n\n**How the File Works:**\n\n1. The `StoryWrapper` component is used to wrap the `Subgrid` component. This provides additional functionality or styling for the subgrid.\n2. The `attributes.json` file contains attributes that are passed to the `StoryWrapper` as props. These attributes likely influence the rendering of the `Subgrid` component.\n3. The `Subgrid` component receives the attributes from the `StoryWrapper` and uses them to render its layout.\n\n**Summary:**\n\nThe `Subgrid.jsx` file is a React component that serves as a subgrid within a story. It imports necessary components and data from other files to render a specific layout with customizable attributes. The `Usage` function exports the component ready for use in a story.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { Subgrid } from './Subgrid';\n\nexport default { title: 'Subgrid' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={Subgrid} />;\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe `Subgrid.tsx` file creates a React component that renders a simple grid layout with four columns. Each column contains a series of skeleton elements with varying heights.\n\n**Key Features:**\n\n* **Mantine Components:** The component utilizes Mantine components such as `Container`, `SimpleGrid`, `Skeleton`, `Stack`, and `useMantineTheme`.\n* **Skeleton Elements:** Each column contains a skeleton element with a predefined height. The `Skeleton` component provides a visual representation of loading or placeholder content.\n* **Responsive Design:** The grid layout adjusts its columns based on the screen size using the `cols` prop of the `SimpleGrid` component.\n* **Height Calculation:** The heights of the skeleton elements are calculated dynamically based on the number of elements and spacing between them.\n\n**Component Structure:**\n\n* **Container:** Wraps the entire component and provides padding.\n* **SimpleGrid:** Creates a four-column grid layout.\n* **Skeleton:** Creates a skeleton element with a specified height.\n* **Stack:** Arranges the skeleton elements vertically with spacing.\n\n**Code Breakdown:**\n\n* `getChild()` function: Generates a skeleton element with a given height.\n* `BASE_HEIGHT`: The base height of the skeleton elements.\n* `getSubHeight()` function: Calculates the height of a skeleton element based on the number of elements and spacing.\n\n**Usage:**\n\nThe `Subgrid` component can be used to create a simple loading or placeholder grid layout. It provides a responsive and visually appealing design.\n\n**Example:**\n\n```\n<Subgrid />\n```\n\n**Output:**\n\nThe component will render a four-column grid layout with skeleton elements of varying heights.\n\n**Conclusion:**\n\nThe `Subgrid.tsx` file provides a reusable component for creating a responsive and visually appealing skeleton grid layout. It is particularly useful for displaying loading content or placeholders.",
    "input": "",
    "output": "import { Container, px, SimpleGrid, Skeleton, Stack, useMantineTheme } from '@mantine/core';\n\nconst getChild = (height: number) => <Skeleton height={height} radius=\"md\" animate={false} />;\nconst BASE_HEIGHT = 360;\nconst getSubHeight = (children: number, spacing: number) =>\n  BASE_HEIGHT / children - spacing * ((children - 1) / children);\n\nexport function Subgrid() {\n  const theme = useMantineTheme();\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={{ base: 1, xs: 4 }}>\n        {getChild(BASE_HEIGHT)}\n        <Stack>\n          {getChild(getSubHeight(2, px(theme.spacing.md) as number))}\n          {getChild(getSubHeight(2, px(theme.spacing.md) as number))}\n        </Stack>\n        <Stack>\n          {getChild(getSubHeight(3, px(theme.spacing.md) as number))}\n          {getChild(getSubHeight(3, px(theme.spacing.md) as number))}\n          {getChild(getSubHeight(3, px(theme.spacing.md) as number))}\n        </Stack>\n        {getChild(BASE_HEIGHT)}\n      </SimpleGrid>\n    </Container>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a card configuration for an application. It contains metadata and styling options for a card that includes switches.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Card with switches\",\n  \"category\": \"app-cards\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 540\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the card, which is displayed as a header.\n* **category:** The category of the card, which is used for organizational purposes. In this case, it is \"app-cards\".\n* **responsive:** Whether the card should be automatically resized to fit different screen sizes.\n* **dimmed:** Whether the card should have a dimmed background.\n* **canvas:** An object that specifies the canvas settings for the card.\n    * **center:** Whether the card should be centered horizontally.\n    * **maxWidth:** The maximum width of the card in pixels.\n\n**Additional Notes:**\n\n* The card title is \"Card with switches\".\n* The card category is \"app-cards\".\n* The card is set to be responsive and dimmed.\n* The canvas settings specify that the card should be centered horizontally with a maximum width of 540 pixels.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a card with switches that can be used within an application. The card can be used to display and control switches, allowing users to toggle their state.\n\n**Usage:**\n\nThis JSON file can be used in an application framework or tool to create and render the card with switches. The card can be embedded within other components or layouts to provide a convenient way to interact with switches.",
    "input": "",
    "output": "{\n  \"title\": \"Card with switches\",\n  \"category\": \"app-cards\",\n  \"responsive\": true,\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 540\n  }\n}\n"
  },
  {
    "instruction": "**File Description**\n\nThe CSS file defines a set of styles for a web page. It is written in the CSS syntax and is applied to HTML elements using selectors.\n\n**Styles**\n\n**1. .card**\n\n- Sets the background color of the element with the class \"card\" to the value of the CSS variable \"--mantine-color-body\".\n\n**2. .item**\n\n- Styles the sibling elements of the element with the class \"item\".\n    - Adds a top padding of the value of the CSS variable \"--mantine-spacing-sm\".\n    - Adds a top margin of the value of the CSS variable \"--mantine-spacing-sm\".\n    - Adds a 1px solid border at the top with the color \"light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-4))\".\n\n**3. .switch**\n\n- Styles all elements within the element with the class \"switch\".\n    - Sets the cursor to \"pointer\".\n\n**4. .title**\n\n- Styles the element with the class \"title\".\n    - Sets the line-height to \"1\".\n\n**Purpose**\n\nThe CSS file likely defines styles for a user interface component, such as a card, list items, a switch, and a title. These styles are intended to enhance the visual appearance and interactive behavior of the component.\n\n**Variables**\n\nThe CSS file uses CSS variables prefixed with \"--mantine-\". These variables are likely defined elsewhere in the codebase and are used to control the colors, spacing, and other styling properties.\n\n**Additional Notes**\n\n- The `light-dark()` function is used to determine the appropriate border color based on the user's preferred dark mode setting.\n- The line-height of \"1\" for the \".title\" element ensures that the title text is not vertically aligned with other content.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.item {\n  & + & {\n    padding-top: var(--mantine-spacing-sm);\n    margin-top: var(--mantine-spacing-sm);\n    border-top: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-4));\n  }\n}\n\n.switch {\n  & * {\n    cursor: pointer;\n  }\n}\n\n.title {\n  line-height: 1;\n}\n"
  },
  {
    "instruction": "**File Name:** SwitchesCard.jsx\n\n**Description:**\n\nThe `SwitchesCard.jsx` file is a React component that represents a card that displays a list of switches. It is used in a storybook environment to showcase the component's functionality.\n\n**Code Breakdown:**\n\n**1. Imports:**\n\n* `StoryWrapper` component from the `StoryWrapper` component.\n* `attributes.json` file containing the data for the switches.\n* `SwitchesCard` component from the current file.\n\n**2. Default Export:**\n\n* An object with a `title` property set to `'SwitchesCard'`. This serves as the title for the component in the storybook.\n\n**3. Usage Function:**\n\n* A function named `Usage` that defines the story for the component.\n* Returns a `StoryWrapper` component with the following props:\n    * `attributes`: The data loaded from the `attributes.json` file.\n    * `component`: The `SwitchesCard` component.\n\n**How the Component Works:**\n\n* The `SwitchesCard` component receives the `attributes` prop, which contains an array of objects representing the switches.\n* It iterates through these objects and renders a list of cards, each representing a switch.\n* Each card displays the switch's name and an indicator that shows whether it is on or off.\n\n**Purpose:**\n\nThe purpose of the `SwitchesCard.jsx` file is to provide a visual representation of the switches data in a storybook environment. It allows developers to preview and interact with the component to ensure it meets their requirements.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain an array of objects in the following format:\n```json\n[\n  {\n    \"name\": \"Switch 1\",\n    \"on\": true\n  },\n  {\n    \"name\": \"Switch 2\",\n    \"on\": false\n  },\n  ...\n]\n```\n* The `StoryWrapper` component is a custom component that provides additional functionality for storybook stories.\n* The `SwitchesCard` component can be customized to display additional information about each switch or provide interactive controls.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { SwitchesCard } from './SwitchesCard';\n\nexport default { title: 'SwitchesCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={SwitchesCard} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided JavaScript file, named `SwitchesCard.jsx`, is responsible for displaying a card that allows users to configure their notification settings. It allows users to toggle notifications for different types of events, such as messages, review requests, comments, and recommendations.\n\n**Functionality:**\n\n* **Imports:**\n    * The file imports necessary components from the `@mantine/core` library, including `Card`, `Group`, `Switch`, and `Text`.\n    * It also imports a CSS module named `SwitchesCard.module.css`.\n\n* **Data:**\n    * The file defines an array of objects called `data`, each containing a title and a description for a notification type.\n\n* **Components:**\n    * The `SwitchesCard` function is the main component that renders the card.\n    * It iterates over the `data` array to create a list of `Group` components, each representing a notification type.\n    * Each `Group` component contains a text block with the title and description, and a `Switch` component for enabling or disabling notifications.\n\n* **Card Layout:**\n    * The card has a title that reads \"Configure notifications\".\n    * It has a subtitle that explains the purpose of the card.\n    * It displays a list of notification types with their corresponding switches.\n\n**Usage:**\n\nThe `SwitchesCard` component can be used to allow users to configure their notification settings. It can be included in any React application where users need to manage their notification preferences.\n\n**CSS:**\n\nThe CSS module `SwitchesCard.module.css` provides styles for the card and its components.\n\n**Additional Notes:**\n\n* The `onLabel` and `offLabel` props of the `Switch` component specify the labels for the on and off states, respectively.\n* The `justify` prop of the `Group` component sets the alignment of its children.\n* The `wrap` prop prevents the children from wrapping onto multiple lines.\n* The `gap` prop specifies the spacing between the children.",
    "input": "",
    "output": "import { Card, Group, Switch, Text } from '@mantine/core';\nimport classes from './SwitchesCard.module.css';\n\nconst data = [\n  { title: 'Messages', description: 'Direct messages you have received from other users' },\n  { title: 'Review requests', description: 'Code review requests from your team members' },\n  { title: 'Comments', description: 'Daily digest with comments on your posts' },\n  {\n    title: 'Recommendations',\n    description: 'Digest with best community posts from previous week',\n  },\n];\n\nexport function SwitchesCard() {\n  const items = data.map((item) => (\n    <Group justify=\"space-between\" className={classes.item} wrap=\"nowrap\" gap=\"xl\" key={item.title}>\n      <div>\n        <Text>{item.title}</Text>\n        <Text size=\"xs\" c=\"dimmed\">\n          {item.description}\n        </Text>\n      </div>\n      <Switch onLabel=\"ON\" offLabel=\"OFF\" className={classes.switch} size=\"lg\" />\n    </Group>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" p=\"xl\" className={classes.card}>\n      <Text fz=\"lg\" className={classes.title} fw={500}>\n        Configure notifications\n      </Text>\n      <Text fz=\"xs\" c=\"dimmed\" mt={3} mb=\"xl\">\n        Choose what notifications you want to receive\n      </Text>\n      {items}\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON configuration file that defines the table of contents (TOC) for a document. It specifies the title, category, and layout of the TOC section.\n\n**Title:**\n\n- The `title` property sets the title of the TOC section to \"Table of contents\".\n\n**Category:**\n\n- The `category` property identifies the section as a table of contents with the value \"toc\".\n\n**Canvas:**\n\n- The `canvas` object defines the layout and styling of the TOC section.\n    - `center`: Set to `true`, indicating that the TOC should be centered horizontally.\n    - `maxWidth`: Specifies the maximum width of the TOC section to 280 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to provide a structured and visually formatted table of contents for a document. It helps readers navigate the document by providing an overview of its key sections and headings.\n\n**Usage:**\n\nThis file can be included in a document by referencing it in the file header or by using a content management system that supports JSON configuration files.\n\n**Benefits:**\n\n- Enhanced user experience by providing an organized and easy-to-navigate overview of the document.\n- Improved document structure and navigation flow.\n- Reduced risk of missed content or sections.\n\n**Additional Notes:**\n\n- The file can be modified to change the title, category, or layout of the TOC.\n- The `maxWidth` property can be adjusted to fit the desired width of the TOC section.\n- The `center` property ensures that the TOC is properly aligned within the document.",
    "input": "",
    "output": "{\n  \"title\": \"Table of contents\",\n  \"category\": \"toc\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 280\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines styles for two classes: `.link` and `.linkActive`. These classes are likely used to style links within a web application built using the Mantine CSS framework.\n\n**`.link` Class:**\n\n- **Display:** The `display: block;` property sets the element to be displayed as a block-level element, which means it takes up the full width available and starts on a new line.\n- **Text Decoration:** `text-decoration: none;` removes the default underline from the link.\n- **Color:** `color: var(--mantine-color-text);` sets the text color to the value of the `--mantine-color-text` CSS variable, which represents the primary text color for the application.\n- **Line Height:** `line-height: 1.2;` sets the line height to 1.2 times the font size.\n- **Font Size:** `font-size: var(--mantine-font-size-sm);` sets the font size to the value of the `--mantine-font-size-sm` CSS variable, which represents the font size for small text.\n- **Padding:** `padding: var(--mantine-spacing-xs);` sets a small amount of padding around the element.\n- **Border Radius:** `border-top-right-radius: var(--mantine-radius-sm);` and `border-bottom-right-radius: var(--mantine-radius-sm);` add a small radius to the top-right and bottom-right corners of the element.\n- **Border:** `border-left: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));` adds a 1px solid border to the left side of the element, with the color transitioning between `--mantine-color-gray-3` and `--mantine-color-dark-4` depending on the light or dark mode.\n- **Hover Effect:** The `@mixin hover` selector defines a hover effect that changes the background color of the element to `light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6))` when the mouse hovers over it.\n\n**`.linkActive` Class:**\n\n- **Font Weight:** `font-weight: 500;` sets the font weight to 500 (medium).\n- **Border Color:** `border-left-color: light-dark(var(--mantine-color-blue-6), var(--mantine-color-blue-4));` sets the color of the left border to the value of the `--mantine-color-blue-6` or `--mantine-color-blue-4` CSS variable depending on the light or dark mode.\n- **Text Color:** `color: light-dark(var(--mantine-color-blue-6), var(--mantine-color-blue-4));` sets the text color to the value of the `--mantine-color-blue-6` or `--mantine-color-blue-4` CSS variable depending on the light or dark mode.\n- **Background Color:** `&, &:hover { background-color: var(--mantine-color-blue-light) !important; }` sets the background color to `--mantine-color-blue-light` when the element is active or hovered over, overriding any other background color rules.",
    "input": "",
    "output": ".link {\n  display: block;\n  text-decoration: none;\n  color: var(--mantine-color-text);\n  line-height: 1.2;\n  font-size: var(--mantine-font-size-sm);\n  padding: var(--mantine-spacing-xs);\n  border-top-right-radius: var(--mantine-radius-sm);\n  border-bottom-right-radius: var(--mantine-radius-sm);\n  border-left: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n\n.linkActive {\n  font-weight: 500;\n  border-left-color: light-dark(var(--mantine-color-blue-6), var(--mantine-color-blue-4));\n  color: light-dark(var(--mantine-color-blue-6), var(--mantine-color-blue-4));\n\n  &,\n  &:hover {\n    background-color: var(--mantine-color-blue-light) !important;\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** TableOfContents.jsx\n\n**Purpose:**\n\nThe `TableOfContents.jsx` file is a React component that serves as the table of contents for a story. It displays a list of sections and links to navigate between them.\n\n**Components Used:**\n\n- `StoryWrapper`: A custom component that wraps the `TableOfContents` component and provides additional functionality, such as setting attributes.\n- `TableOfContents`: A React component that renders the table of contents.\n\n**File Structure:**\n\nThe file consists of the following components:\n\n- **Import Statements:**\n    - Imports the necessary components and files, including `StoryWrapper`, `attributes.json`, and `TableOfContents`.\n- **Default Export:**\n    - Exports an object with a `title` property set to 'TableOfContents'.\n- **Usage Function:**\n    - Defines a `Usage()` function that:\n        - Creates a `StoryWrapper` component with the `attributes` and `component` properties set.\n        - Renders the `TableOfContents` component within the `StoryWrapper`.\n\n**Functionality:**\n\n- The `TableOfContents` component renders a list of sections based on the `attributes` object.\n- Each section title is a link that navigates to the corresponding section in the story.\n- The `StoryWrapper` component provides additional functionality, such as setting attributes and rendering the `TableOfContents` component.\n\n**Usage:**\n\nThe `TableOfContents` component can be used by importing it into other React components. The `Usage()` function provides an example of how to use the component.\n\n**Additional Notes:**\n\n- The `attributes.json` file likely contains a list of section titles and links.\n- The `StoryWrapper` component may provide additional functionality, such as setting attributes or rendering additional content.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableOfContents } from './TableOfContents';\n\nexport default { title: 'TableOfContents' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableOfContents} />;\n}\n"
  },
  {
    "instruction": "**Table of Contents Component**\n\nThis React component is responsible for rendering a table of contents for a documentation page. It provides navigation links to different sections within the document.\n\n**Key Features:**\n\n* **Links:** The component defines an array of links, each with a label, target section, and order.\n* **Active Link:** The `active` variable specifies the currently active link.\n* **Dynamic Items:** The `items` variable is generated dynamically based on the `links` array. Each link is rendered as an `<a>` tag with the following properties:\n    * `href`: The link's target section\n    * `onClick`: Prevents the default browser navigation behavior\n    * `className`: Class names for styling, including `classes.link` and `classes.linkActive` for the active link\n    * `style`: Padding left based on the link's order\n* **Visual Elements:**\n    * A group containing an icon and the text \"Table of contents\"\n    * A list of links, each with the label as its content\n\n**Functionality:**\n\n* The component iterates over the `links` array to create an `<a>` tag for each link.\n* The `className` prop sets the active link class based on the `active` variable.\n* The `style` prop adjusts the padding left based on the link's order.\n* Clicking on a link prevents the default navigation and prevents the page from scrolling.\n\n**Usage:**\n\nThis component can be used to provide a navigation structure for a documentation page. The `active` prop should be set to the current section to highlight the active link.\n\n**Example:**\n\n```\n<TableOfContents active=\"#overlays\" />\n```\n\n**Additional Notes:**\n\n* The `@tabler/icons-react` and `@mantine/core` libraries are used for the icon and styling components.\n* The `TableOfContents.module.css` file likely contains styling for the component.",
    "input": "",
    "output": "import { IconListSearch } from '@tabler/icons-react';\nimport cx from 'clsx';\nimport { Box, Group, Text } from '@mantine/core';\nimport classes from './TableOfContents.module.css';\n\nconst links = [\n  { label: 'Usage', link: '#usage', order: 1 },\n  { label: 'Position and placement', link: '#position', order: 1 },\n  { label: 'With other overlays', link: '#overlays', order: 1 },\n  { label: 'Manage focus', link: '#focus', order: 1 },\n  { label: 'Examples', link: '#1', order: 1 },\n  { label: 'Show on focus', link: '#2', order: 2 },\n  { label: 'Show on hover', link: '#3', order: 2 },\n  { label: 'With form', link: '#4', order: 2 },\n];\n\nconst active = '#overlays';\n\nexport function TableOfContents() {\n  const items = links.map((item) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => event.preventDefault()}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === item.link })}\n      style={{ paddingLeft: `calc(${item.order} * var(--mantine-spacing-md))` }}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div>\n      <Group mb=\"md\">\n        <IconListSearch size={18} stroke={1.5} />\n        <Text>Table of contents</Text>\n      </Group>\n      {items}\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe JSON file you provided defines a table of contents (TOC) indicator for a document. Its purpose is to visually indicate to readers where the table of contents is located within the document.\n\n**File Structure:**\n\n* **title:** This field specifies the title of the TOC indicator, which is \"Table of contents indicator\" in this case.\n* **category:** This field identifies the category of the indicator, which is \"toc\".\n* **canvas:** This object contains configuration options for the visual representation of the TOC indicator.\n    * **center:** Specifies whether the indicator should be centered horizontally within its containing element.\n    * **maxWidth:** Sets the maximum width of the indicator.\n\n**Function:**\n\nWhen included in a document, this JSON object will render a visual cue to the reader, indicating that the table of contents is located nearby. The cue will typically appear as a small banner or icon within the document. Clicking or tapping on the cue will navigate the reader to the table of contents.\n\n**Usage:**\n\nThis file can be used to create a table of contents indicator for any document where the table of contents is not visually apparent. It is particularly helpful for documents with long or complex contents, where it can be difficult for readers to find the table of contents.\n\n**Additional Notes:**\n\n* The `canvas` object allows for customization of the visual appearance of the TOC indicator, such as font size, color, and background.\n* The `center` property ensures that the indicator is aligned correctly within the document layout.\n* The `maxWidth` property ensures that the indicator does not become too wide or narrow.\n* This file can be used in conjunction with a table of contents generator to automatically create the table of contents.",
    "input": "",
    "output": "{\n  \"title\": \"Table of contents indicator\",\n  \"category\": \"toc\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 280\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS file defines the styles for a navigation menu or sidebar. It is responsible for the layout, colors, and animations of the menu links and an indicator element that highlights the current active link.\n\n**Key Features:**\n\n- **Relative positioning:** The `root` element uses relative positioning to allow the absolute positioning of the indicator element.\n- **Link styles:** The `.link` element styles the navigation links, including their text formatting, background color on hover, and border.\n- **Active link style:** The `.linkActive` element styles the currently active link, making it bold and changing its text color.\n- **Indicator:** The `.indicator` element is a circle that moves to the left of the active link. It is animated to provide visual feedback.\n\n**CSS Properties:**\n\n- `--link-height`: The height of each navigation link.\n- `--indicator-size`: The diameter of the indicator circle.\n- `--indicator-offset`: The offset of the indicator from the left edge of the link.\n\n**Mixins:**\n\n- `@mixin hover`: This mixin applies the hover styles to the `.link` element.\n\n**Functionality:**\n\n- When a user hovers over a link, the background color changes.\n- When a user clicks on a link, the corresponding indicator circles slides into place and the text becomes bold.\n\n**Benefits:**\n\n- Visually appealing and user-friendly navigation interface.\n- Clear indication of the current active link.\n- Smooth animation for a visually engaging experience.\n\n**Additional Notes:**\n\n- The `light-dark()` function is used to automatically adjust the colors based on the user's theme (dark or light mode).\n- The `--mantine-color-*` variables represent the Mantine design system's color palette.\n- The `--mantine-radius-sm` variable defines the border radius for the links and indicator.\n- The `--mantine-font-size-sm` variable sets the font size for the link text.",
    "input": "",
    "output": ".root {\n  --link-height: 38px;\n  --indicator-size: 10px;\n  --indicator-offset: calc((var(--link-height) - var(--indicator-size)) / 2);\n  position: relative;\n}\n\n.link {\n  display: block;\n  text-decoration: none;\n  color: var(--mantine-color-text);\n  line-height: var(--link-height);\n  font-size: var(--mantine-font-size-sm);\n  height: var(--link-height);\n  border-top-right-radius: var(--mantine-radius-sm);\n  border-bottom-right-radius: var(--mantine-radius-sm);\n  border-left: 2px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-4));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n\n.linkActive {\n  font-weight: 500;\n  color: light-dark(var(--mantine-color-blue-7), var(--mantine-color-blue-4));\n}\n\n.indicator {\n  transition: transform 150ms ease;\n  border: 2px solid light-dark(var(--mantine-color-blue-7), var(--mantine-color-blue-4));\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\n  height: var(--indicator-size);\n  width: var(--indicator-size);\n  border-radius: var(--indicator-size);\n  position: absolute;\n  left: calc(var(--indicator-size) / -2 + 1px);\n}\n"
  },
  {
    "instruction": "**File Name:** TableOfContentsFloating.jsx\n\n**Purpose:**\n\nThe `TableOfContentsFloating.jsx` file is a React component that provides a floating table of contents for a story. It imports necessary components and data from other files and exports a component for use in a story.\n\n**Components and Data:**\n\n* **StoryWrapper:** A component that wraps the `TableOfContentsFloating` component and provides additional attributes.\n* **attributes.json:** A JSON file containing attributes for the story.\n* **TableOfContentsFloating:** A component that renders the floating table of contents.\n\n**Code Breakdown:**\n\n**Import Statements:**\n\n* `StoryWrapper` is imported from the `StoryWrapper.jsx` component.\n* `attributes.json` is imported as an object called `attributes`.\n* `TableOfContentsFloating` is imported from the current file.\n\n**Component Declaration:**\n\n* The file exports an object with a `title` property set to `TableOfContentsFloating`.\n\n**Usage Function:**\n\n* The `Usage` function is exported and returns a `StoryWrapper` component.\n* The `attributes` prop is set to the `attributes` object imported from `attributes.json`.\n* The `component` prop is set to the `TableOfContentsFloating` component.\n\n**How the File Works:**\n\n1. When the `TableOfContentsFloating.jsx` file is imported into a story, the `StoryWrapper` component is rendered with the `TableOfContentsFloating` component as its child.\n2. The `attributes` prop passed to `StoryWrapper` provides additional attributes to the story.\n3. The `TableOfContentsFloating` component renders the floating table of contents based on the story's content.\n\n**Purpose:**\n\nThe purpose of this file is to create a floating table of contents for a story, allowing readers to navigate to different sections of the content.\n\n**Additional Notes:**\n\n* The `attributes.json` file should contain attributes such as the title, author, and other relevant information about the story.\n* The specific styling and layout of the floating table of contents can be customized in the `TableOfContentsFloating.jsx` component.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableOfContentsFloating } from './TableOfContentsFloating';\n\nexport default { title: 'TableOfContentsFloating' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableOfContentsFloating} />;\n}\n"
  },
  {
    "instruction": "**File Name:** TableOfContentsFloating.js\n\n**Purpose:**\n\nThe `TableOfContentsFloating.js` file is a React component that creates a floating table of contents for a documentation page. It allows users to navigate the content quickly and easily by providing links to different sections.\n\n**Components:**\n\n* **IconListSearch:** A tabler icon that represents a search icon.\n* **Text:** A mantine core component that displays the text \"Table of contents\".\n* **Box:** A mantine core component that represents a link.\n* **Group:** A mantine core component that groups the icon and text.\n* **div:** A HTML element that represents the root of the component.\n\n**Data:**\n\n* **links:** An array of objects that represents the table of contents links. Each object has a `label`, `link`, and `order` property.\n\n**State:**\n\n* **active:** A state variable that stores the index of the currently active link.\n\n**Functionality:**\n\n* The component renders a list of links based on the `links` data.\n* Each link has a `href` attribute that points to the corresponding section in the documentation.\n* When a user clicks on a link, the `active` state variable is updated to reflect the selected link.\n* A visual indicator moves down the list of links based on the value of the `active` state variable.\n\n**Usage:**\n\nThe `TableOfContentsFloating` component can be used in any React component that requires a table of contents.\n\n**Example:**\n\n```\n<TableOfContentsFloating />\n```\n\n**Key Features:**\n\n* Floating table of contents that appears on the left side of the page.\n* Links to different sections of the documentation.\n* Visual indicator that shows the current section.\n* Smooth scrolling animation when clicking on a link.\n\n**Additional Notes:**\n\n* The `clsx` library is used for CSS class management.\n* The `--link-height` and `--indicator-offset` CSS variables are used to position the indicator.\n* The `style` attribute is used to set the left padding of each link based on its order.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { IconListSearch } from '@tabler/icons-react';\nimport cx from 'clsx';\nimport { Box, Group, Text } from '@mantine/core';\nimport classes from './TableOfContentsFloating.module.css';\n\nconst links = [\n  { label: 'Usage', link: '#usage', order: 1 },\n  { label: 'Position and placement', link: '#position', order: 1 },\n  { label: 'With other overlays', link: '#overlays', order: 1 },\n  { label: 'Manage focus', link: '#focus', order: 1 },\n  { label: 'Examples', link: '#1', order: 1 },\n  { label: 'Show on focus', link: '#2', order: 2 },\n  { label: 'Show on hover', link: '#3', order: 2 },\n  { label: 'With form', link: '#4', order: 2 },\n];\n\nexport function TableOfContentsFloating() {\n  const [active, setActive] = useState(2);\n\n  const items = links.map((item, index) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === index })}\n      style={{ paddingLeft: `calc(${item.order} * var(--mantine-spacing-md))` }}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div className={classes.root}>\n      <Group mb=\"md\">\n        <IconListSearch size={18} stroke={1.5} />\n        <Text>Table of contents</Text>\n      </Group>\n      <div className={classes.links}>\n        <div\n          className={classes.indicator}\n          style={{\n            transform: `translateY(calc(${active} * var(--link-height) + var(--indicator-offset)))`,\n          }}\n        />\n        {items}\n      </div>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON configuration file that defines the settings for a table with progress. It is used in a graphical user interface (GUI) or other application that supports JSON configuration files.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"Table with progress\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the table.\n* **category:** The category of the table. In this case, it is \"tables\".\n* **canvas:** An object that defines the canvas settings for the table.\n    * **center:** A boolean value that specifies whether the table should be centered within the canvas.\n    * **maxWidth:** An integer value that specifies the maximum width of the table canvas.\n\n**Purpose:**\n\nThe purpose of this file is to configure the following aspects of the table:\n\n* Title\n* Category\n* Canvas settings (center alignment, maximum width)\n\n**Usage:**\n\nThis configuration file is typically used in the following ways:\n\n* To create a new table with the specified settings.\n* To modify the settings of an existing table.\n* To load the settings into a GUI or other application that supports JSON configuration files.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Progress Report\",\n  \"category\": \"reports\",\n  \"canvas\": {\n    \"center\": false,\n    \"maxWidth\": 768\n  }\n}\n```\n\n**Note:**\n\n* The values for the properties can be customized to suit specific requirements.\n* The configuration file may be saved with a different file extension, such as .json or .conf.\n* The specific application or tool that uses the configuration file may have its own additional settings and options.",
    "input": "",
    "output": "{\n  \"title\": \"Table with progress\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS code snippet defines a CSS rule for an element with the class `progressSection`.\n\n**Purpose:**\n\nThe rule is used to style the sections within an element with the class `progressSection`. It is primarily used to create visual separation between these sections by adding a left border to each section except the first one.\n\n**Code Explanation:**\n\n- `&:not(:first-of-type)`: This CSS pseudo-selector applies the style rule to all sections within the element with the class `progressSection`, except for the first section.\n- `border-left: 3px solid light-dark(var(--mantine-color-white), var(--mantine-color-dark-7))`: This property sets a 3px solid border on the left side of each section. The color of the border is determined by the `light-dark()` function, which uses a variable called `--mantine-color-white` or `--mantine-color-dark-7` depending on the current theme.\n\n**Example Usage:**\n\n```css\n<div class=\"progressSection\">\n  <section>...</section>\n  <section>...</section>\n  <section>...</section>\n</div>\n```\n\n**Output:**\n\nThe first section in the `progressSection` element will not have a left border, while the remaining sections will have a 3px solid border on their left side.\n\n**Additional Notes:**\n\n- The `--mantine-color-white` and `--mantine-color-dark-7` variables are likely defined elsewhere in the CSS code.\n- The `light-dark()` function is a custom function that is used to automatically determine the appropriate color based on the theme.\n- This CSS rule is likely part of a larger CSS framework or design system.",
    "input": "",
    "output": ".progressSection {\n  &:not(:first-of-type) {\n    border-left: 3px solid light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** TableReviews.jsx\n\n**Purpose:**\n\nThe file appears to be a React component responsible for displaying and managing table reviews.\n\n**Components:**\n\n* **StoryWrapper:** A custom React component that wraps the `TableReviews` component and provides additional functionality or configuration.\n* **TableReviews:** A component that displays and handles reviews for a specific table.\n\n**Functionality:**\n\n* Imports necessary components and data from other files:\n    * `StoryWrapper`: A custom component that provides additional functionality to the `TableReviews` component.\n    * `attributes.json`: A JSON file containing configuration attributes for the `TableReviews` component.\n* Exports a default object with a title property set to 'TableReviews'.\n* Defines a `Usage` function that renders the `StoryWrapper` component with the following props:\n    * `attributes`: The configuration attributes loaded from `attributes.json`.\n    * `component`: The `TableReviews` component.\n\n**Expected Output:**\n\nWhen the `TableReviews.jsx` file is rendered, it will display a table of reviews with the following characteristics:\n\n* The reviews will be displayed based on the configuration attributes specified in `attributes.json`.\n* The `TableReviews` component will handle user interactions, such as submitting new reviews or updating existing ones.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component may provide additional functionality, such as logging or analytics.\n* The `TableReviews` component may also have additional dependencies or logic not shown in this file.\n* The `attributes.json` file may contain configuration options for the table reviews, such as the table ID, review criteria, and user permissions.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableReviews } from './TableReviews';\n\nexport default { title: 'TableReviews' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableReviews} />;\n}\n"
  },
  {
    "instruction": "**File Name:** TableReviews.js\n\n**Description:**\n\nThe provided JavaScript file renders a table displaying book reviews. It uses the Mantine React library to create a responsive and interactive table.\n\n**Key Functionality:**\n\n- **Data Structure:**\n   - The `data` array stores an array of book objects, each containing information about a book, including title, author, year, and review counts.\n\n- **Table Structure:**\n   - The table has five columns:\n     - Book Title\n     - Year\n     - Author\n     - Reviews\n     - Reviews Distribution\n   - Each row of the table represents a single book, with data from the `data` array.\n\n- **Reviews Distribution:**\n   - The table calculates the percentage of positive and negative reviews for each book.\n   - It uses a `Progress` component to visually represent the distribution, with different colors for positive and negative reviews.\n\n- **Interactive Elements:**\n   - The table uses `Anchor` components to provide links for navigating to book titles and author names.\n\n- **Responsive Design:**\n   - The `Table.ScrollContainer` component ensures that the table is scrollable on smaller devices.\n\n**Code Breakdown:**\n\n- The file imports necessary Mantine components, including `Anchor`, `Group`, `Progress`, `Table`, and `Text`.\n- It defines an array of book data in the `data` variable.\n- The `TableReviews` function renders the table by iterating over the `data` array and generating a table row for each book.\n- The `Progress.Section` component is used to represent the positive and negative review percentages visually.\n\n**Usage:**\n\nThis file can be imported into another React component to render the book review table.\n\n**Example:**\n\n```\n<TableReviews />\n```\n\n**Output:**\n\nThe code will render a table with book reviews, including the title, author, year, total reviews, and positive/negative review percentages.",
    "input": "",
    "output": "import { Anchor, Group, Progress, Table, Text } from '@mantine/core';\nimport classes from './TableReviews.module.css';\n\nconst data = [\n  {\n    title: 'Foundation',\n    author: 'Isaac Asimov',\n    year: 1951,\n    reviews: { positive: 2223, negative: 259 },\n  },\n  {\n    title: 'Frankenstein',\n    author: 'Mary Shelley',\n    year: 1818,\n    reviews: { positive: 5677, negative: 1265 },\n  },\n  {\n    title: 'Solaris',\n    author: 'Stanislaw Lem',\n    year: 1961,\n    reviews: { positive: 3487, negative: 1845 },\n  },\n  {\n    title: 'Dune',\n    author: 'Frank Herbert',\n    year: 1965,\n    reviews: { positive: 8576, negative: 663 },\n  },\n  {\n    title: 'The Left Hand of Darkness',\n    author: 'Ursula K. Le Guin',\n    year: 1969,\n    reviews: { positive: 6631, negative: 993 },\n  },\n  {\n    title: 'A Scanner Darkly',\n    author: 'Philip K Dick',\n    year: 1977,\n    reviews: { positive: 8124, negative: 1847 },\n  },\n];\n\nexport function TableReviews() {\n  const rows = data.map((row) => {\n    const totalReviews = row.reviews.negative + row.reviews.positive;\n    const positiveReviews = (row.reviews.positive / totalReviews) * 100;\n    const negativeReviews = (row.reviews.negative / totalReviews) * 100;\n\n    return (\n      <Table.Tr key={row.title}>\n        <Table.Td>\n          <Anchor component=\"button\" fz=\"sm\">\n            {row.title}\n          </Anchor>\n        </Table.Td>\n        <Table.Td>{row.year}</Table.Td>\n        <Table.Td>\n          <Anchor component=\"button\" fz=\"sm\">\n            {row.author}\n          </Anchor>\n        </Table.Td>\n        <Table.Td>{Intl.NumberFormat().format(totalReviews)}</Table.Td>\n        <Table.Td>\n          <Group justify=\"space-between\">\n            <Text fz=\"xs\" c=\"teal\" fw={700}>\n              {positiveReviews.toFixed(0)}%\n            </Text>\n            <Text fz=\"xs\" c=\"red\" fw={700}>\n              {negativeReviews.toFixed(0)}%\n            </Text>\n          </Group>\n          <Progress.Root>\n            <Progress.Section\n              className={classes.progressSection}\n              value={positiveReviews}\n              color=\"teal\"\n            />\n\n            <Progress.Section\n              className={classes.progressSection}\n              value={negativeReviews}\n              color=\"red\"\n            />\n          </Progress.Root>\n        </Table.Td>\n      </Table.Tr>\n    );\n  });\n\n  return (\n    <Table.ScrollContainer minWidth={800}>\n      <Table verticalSpacing=\"xs\">\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>Book title</Table.Th>\n            <Table.Th>Year</Table.Th>\n            <Table.Th>Author</Table.Th>\n            <Table.Th>Reviews</Table.Th>\n            <Table.Th>Reviews distribution</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </Table.ScrollContainer>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you have provided is a JSON file that defines the metadata for a web page. It contains information about the title, category, and canvas settings for a table with a sticky header.\n\n**Title:**\n\n- The \"title\" field specifies the title of the table, which is \"Table with sticky header\".\n\n**Category:**\n\n- The \"category\" field specifies the category of the table, which is \"tables\".\n\n**Canvas Settings:**\n\n- The \"canvas\" field contains the canvas settings for the table.\n    - **center:** This field sets the table to be centered on the page.\n    - **maxWidth:** This field sets the maximum width of the table to 920 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to configure the display of a table with a sticky header on a web page. The sticky header means that the header row of the table will remain fixed at the top of the viewport as the user scrolls down the page.\n\n**Usage:**\n\nThis JSON file can be used in conjunction with a web framework or content management system (CMS) to automatically generate the necessary HTML and CSS code for the table. The information in the file can be used to set the title, category, and canvas settings for the table, as well as any other desired attributes.\n\n**Example:**\n\n```json\n{\n  \"title\": \"Table with sticky header\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n```\n\n**Note:**\n\nThis JSON file provides the basic configuration for the table. Additional CSS code may be required to implement the sticky header functionality.",
    "input": "",
    "output": "{\n  \"title\": \"Table with sticky header\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe CSS code snippet defines a style sheet for a header element, likely located at the top of a webpage. The purpose of this style sheet is to create a sticky header that remains fixed at the top of the viewport when scrolling.\n\n**Structure:**\n\nThe code consists of two CSS classes:\n\n- `.header`: Defines the style of the header element.\n- `.scrolled`: Defines the style of the header when it is scrolled into view.\n\n**`.header` Class:**\n\n- **Position:** `position: sticky;` makes the header element stick to the top of the viewport when scrolling.\n- **Top:** `top: 0;` sets the header's top position to 0, ensuring it is positioned at the very top of the viewport.\n- **Background-color:** `background-color: var(--mantine-color-body);` sets the header's background color to the value of the `--mantine-color-body` CSS variable.\n- **Transition:** `transition: box-shadow 150ms ease;` defines a smooth transition effect for the `box-shadow` property when the header is scrolled into view.\n- **::after Selector:**\n    - **Content:** `content: '';` creates an empty content element.\n    - **Position:** `position: absolute;` positions the element absolutely within the header.\n    - **Left and Right:** `left: 0; right: 0;` sets the element's width to fill the entire header.\n    - **Bottom:** `bottom: 0;` sets the element's bottom position to 0, aligning it with the header's bottom edge.\n    - **Border:** `border-bottom: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-3));` adds a subtle border to the header's bottom edge.\n\n**`.scrolled` Class:**\n\n- **Box-shadow:** `box-shadow: var(--mantine-shadow-sm);` applies a subtle box shadow to the header when it is scrolled into view.\n\n**Purpose of the Code:**\n\nThe code aims to achieve the following functionalities:\n\n- Create a sticky header that remains fixed at the top of the viewport.\n- Add a subtle bottom border to the header.\n- Apply a box shadow to the header when it is scrolled into view.\n\n**Overall, the code snippet provides styling for a header element that is intended to provide a smooth scrolling experience and enhance the visual appeal of the webpage.**",
    "input": "",
    "output": ".header {\n  position: sticky;\n  top: 0;\n  background-color: var(--mantine-color-body);\n  transition: box-shadow 150ms ease;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-bottom: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-3));\n  }\n}\n\n.scrolled {\n  box-shadow: var(--mantine-shadow-sm);\n}\n"
  },
  {
    "instruction": "**File Name:** TableScrollArea.js\n\n**Purpose:**\n\nThe file defines a React component called `TableScrollArea`. It provides a scrollable table component with adjustable scroll options.\n\n**Components:**\n\n* **StoryWrapper:** A component that provides a styled container for the `TableScrollArea`.\n* **TableScrollArea:** The main component that renders the scrollable table.\n\n**File Structure:**\n\n```\nimport { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableScrollArea } from './TableScrollArea';\n\nexport default { title: 'TableScrollArea' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableScrollArea} />;\n}\n```\n\n**Explanation:**\n\n* **Imports:**\n    * `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper`.\n    * `attributes.json` file containing attributes for the `TableScrollArea`.\n    * `TableScrollArea` component.\n* **Default Export:**\n    * An object with the title `'TableScrollArea'`.\n* **Usage Function:**\n    * Renders a `StoryWrapper` component with the following props:\n        * `attributes`: The attributes specified in `attributes.json`.\n        * `component`: The `TableScrollArea` component.\n\n**Conclusion:**\n\nThe `TableScrollArea.js` file defines a React component that provides a scrollable table with adjustable scroll options. It uses the `StoryWrapper` component for styling and provides an example usage within the `Usage` function.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableScrollArea } from './TableScrollArea';\n\nexport default { title: 'TableScrollArea' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableScrollArea} />;\n}\n"
  },
  {
    "instruction": "**File Name:** TableScrollArea.js\n\n**Description:**\n\nThe `TableScrollArea.js` file is a React component that renders a scrollable table with data from a predefined array. It uses the `@mantine/core` library for scrolling and table rendering.\n\n**Components:**\n\n* **ScrollArea:** A component that provides scrolling functionality with a maximum height of 300 pixels.\n* **Table:** A component that displays the data in a tabular format.\n* **Table.Tr:** A component that represents a row in the table.\n* **Table.Td:** A component that represents a cell in a row.\n* **Table.Th:** A component that represents a header cell in the table.\n\n**Data:**\n\nThe file includes an array of data objects with three properties: `name`, `email`, and `company`.\n\n**Code Functionality:**\n\n* The component renders a table with three columns: Name, Email, and Company.\n* The `onScrollPositionChange` prop is used to set the `scrolled` state based on the scroll position.\n* The `scrolled` state is used to add a CSS class to the header row, indicating whether the table is scrolled.\n* The `miw` prop is set to 700 pixels to ensure the table fits within the viewport.\n\n**Purpose:**\n\nThe purpose of this component is to display a scrollable table with employee data. The scrollbar allows users to navigate through the data efficiently.\n\n**Usage:**\n\nThe `TableScrollArea` component can be used in any React application where tabular data needs to be displayed with scrolling functionality.\n\n**Additional Notes:**\n\n* The CSS file (`TableScrollArea.module.css`) contains styles for the header row and the scrolled state.\n* The `clsx` library is used for dynamic class name management.\n* The `@mantine/core` library provides a comprehensive set of styling and component options for building user interfaces.",
    "input": "",
    "output": "import { useState } from 'react';\nimport cx from 'clsx';\nimport { ScrollArea, Table } from '@mantine/core';\nimport classes from './TableScrollArea.module.css';\n\nconst data = [\n  {\n    name: 'Athena Weissnat',\n    company: 'Little - Rippin',\n    email: 'Elouise.Prohaska@yahoo.com',\n  },\n  {\n    name: 'Deangelo Runolfsson',\n    company: 'Greenfelder - Krajcik',\n    email: 'Kadin_Trantow87@yahoo.com',\n  },\n  {\n    name: 'Danny Carter',\n    company: 'Kohler and Sons',\n    email: 'Marina3@hotmail.com',\n  },\n  {\n    name: 'Trace Tremblay PhD',\n    company: 'Crona, Aufderhar and Senger',\n    email: 'Antonina.Pouros@yahoo.com',\n  },\n  {\n    name: 'Derek Dibbert',\n    company: 'Gottlieb LLC',\n    email: 'Abagail29@hotmail.com',\n  },\n  {\n    name: 'Viola Bernhard',\n    company: 'Funk, Rohan and Kreiger',\n    email: 'Jamie23@hotmail.com',\n  },\n  {\n    name: 'Austin Jacobi',\n    company: 'Botsford - Corwin',\n    email: 'Genesis42@yahoo.com',\n  },\n  {\n    name: 'Hershel Mosciski',\n    company: 'Okuneva, Farrell and Kilback',\n    email: 'Idella.Stehr28@yahoo.com',\n  },\n  {\n    name: 'Mylene Ebert',\n    company: 'Kirlin and Sons',\n    email: 'Hildegard17@hotmail.com',\n  },\n  {\n    name: 'Lou Trantow',\n    company: 'Parisian - Lemke',\n    email: 'Hillard.Barrows1@hotmail.com',\n  },\n  {\n    name: 'Dariana Weimann',\n    company: 'Schowalter - Donnelly',\n    email: 'Colleen80@gmail.com',\n  },\n  {\n    name: 'Dr. Christy Herman',\n    company: 'VonRueden - Labadie',\n    email: 'Lilyan98@gmail.com',\n  },\n  {\n    name: 'Katelin Schuster',\n    company: 'Jacobson - Smitham',\n    email: 'Erich_Brekke76@gmail.com',\n  },\n  {\n    name: 'Melyna Macejkovic',\n    company: 'Schuster LLC',\n    email: 'Kylee4@yahoo.com',\n  },\n  {\n    name: 'Pinkie Rice',\n    company: 'Wolf, Trantow and Zulauf',\n    email: 'Fiona.Kutch@hotmail.com',\n  },\n  {\n    name: 'Brain Kreiger',\n    company: 'Lueilwitz Group',\n    email: 'Rico98@hotmail.com',\n  },\n  {\n    name: 'Myrtice McGlynn',\n    company: 'Feest, Beahan and Johnston',\n    email: 'Julius_Tremblay29@hotmail.com',\n  },\n  {\n    name: 'Chester Carter PhD',\n    company: 'Gaylord - Labadie',\n    email: 'Jensen_McKenzie@hotmail.com',\n  },\n  {\n    name: 'Mrs. Ericka Bahringer',\n    company: 'Conn and Sons',\n    email: 'Lisandro56@hotmail.com',\n  },\n  {\n    name: 'Korbin Buckridge Sr.',\n    company: 'Mraz, Rolfson and Predovic',\n    email: 'Leatha9@yahoo.com',\n  },\n  {\n    name: 'Dr. Daisy Becker',\n    company: 'Carter - Mueller',\n    email: 'Keaton_Sanford27@gmail.com',\n  },\n  {\n    name: 'Derrick Buckridge Sr.',\n    company: \"O'Reilly LLC\",\n    email: 'Kay83@yahoo.com',\n  },\n  {\n    name: 'Ernie Hickle',\n    company: \"Terry, O'Reilly and Farrell\",\n    email: 'Americo.Leffler89@gmail.com',\n  },\n  {\n    name: 'Jewell Littel',\n    company: \"O'Connell Group\",\n    email: 'Hester.Hettinger9@hotmail.com',\n  },\n  {\n    name: 'Cyrus Howell',\n    company: 'Windler, Yost and Fadel',\n    email: 'Rick0@gmail.com',\n  },\n  {\n    name: 'Dr. Orie Jast',\n    company: 'Hilll - Pacocha',\n    email: 'Anna56@hotmail.com',\n  },\n  {\n    name: 'Luisa Murphy',\n    company: 'Turner and Sons',\n    email: 'Christine32@yahoo.com',\n  },\n  {\n    name: 'Lea Witting',\n    company: 'Hodkiewicz Inc',\n    email: 'Ford_Kovacek4@yahoo.com',\n  },\n  {\n    name: 'Kelli Runolfsson',\n    company: \"Feest - O'Hara\",\n    email: 'Dimitri87@yahoo.com',\n  },\n  {\n    name: 'Brook Gaylord',\n    company: 'Conn, Huel and Nader',\n    email: 'Immanuel77@gmail.com',\n  },\n];\n\nexport function TableScrollArea() {\n  const [scrolled, setScrolled] = useState(false);\n\n  const rows = data.map((row) => (\n    <Table.Tr key={row.name}>\n      <Table.Td>{row.name}</Table.Td>\n      <Table.Td>{row.email}</Table.Td>\n      <Table.Td>{row.company}</Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <ScrollArea h={300} onScrollPositionChange={({ y }) => setScrolled(y !== 0)}>\n      <Table miw={700}>\n        <Table.Thead className={cx(classes.header, { [classes.scrolled]: scrolled })}>\n          <Table.Tr>\n            <Table.Th>Name</Table.Th>\n            <Table.Th>Email</Table.Th>\n            <Table.Th>Company</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON object that defines metadata for a table with selection. It contains the following properties:\n\n**title:** \"Table with selection\"\n**category:** \"tables\"\n**canvas:**\n\n* **center:** true\n* **maxWidth:** 800\n\n**Purpose:**\n\nThe purpose of this file is to configure a table with selection in a specific way. The metadata provides the following information:\n\n* **Title:** The title of the table, which is \"Table with selection\".\n* **Category:** The category of the table, which is \"tables\".\n* **Canvas:**\n    * **center:** Specifies whether the table should be centered within the available space.\n    * **maxWidth:** The maximum width of the table in pixels.\n\n**Usage:**\n\nThis JSON object can be used by various applications or tools that handle table metadata. It can be used to:\n\n* Create a table with the specified title and category.\n* Configure the table's canvas settings, such as centering and maximum width.\n* Store and manage table metadata in a structured format.\n\n**Additional Notes:**\n\n* The \"canvas\" property is an object that contains canvas configuration options.\n* The \"center\" property specifies whether the table should be centered within the canvas.\n* The \"maxWidth\" property sets the maximum width of the table.\n* The values provided in the file can be customized to suit specific requirements.",
    "input": "",
    "output": "{\n  \"title\": \"Table with selection\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS rule defines the styling for rows that are selected in a table.\n\n**Selector:**\n\n`.rowSelected`\n\n**Properties:**\n\n- `background-color`: Sets the background color of the selected row to the value of the CSS variable `--mantine-color-blue-light`.\n\n**Explanation:**\n\n- The `rowSelected` class is applied to the `<tr>` (table row) element when it is selected.\n- The `background-color` property is set to the `--mantine-color-blue-light` CSS variable, which is likely defined elsewhere in the CSS code.\n- The value of `--mantine-color-blue-light` is a specific color value, such as \"#e7f2fa\" or \"#bff0fb\".\n\n**Example Usage:**\n\n```css\n<tr class=\"rowSelected\">\n  <td>Row 1, Column 1</td>\n  <td>Row 1, Column 2</td>\n</tr>\n```\n\n**Purpose:**\n\nThe purpose of this CSS rule is to visually indicate that a table row has been selected. Typically, when a user clicks on a row, it receives the `rowSelected` class, which applies the specified background color to the row.\n\n**Additional Notes:**\n\n- The `--mantine-color-blue-light` CSS variable is likely defined in a CSS file that provides the Mantine design system theme.\n- The specific color value of the variable may vary depending on the theme configuration.\n- The `rowSelected` class can be used with JavaScript to programmatically select table rows.",
    "input": "",
    "output": ".rowSelected {\n  background-color: var(--mantine-color-blue-light);\n}\n"
  },
  {
    "instruction": "**File Name:** TableSelection.jsx\n\n**File Description:**\n\nThis file is a React component that represents a table selection feature. It is part of a storybook application and is used to demonstrate how to use the `TableSelection` component.\n\n**Code Breakdown:**\n\n* **Imports:**\n    * `StoryWrapper` component from `../../components/StoryWrapper/StoryWrapper`.\n    * `attributes.json` file containing attributes for the `TableSelection` component.\n    * `TableSelection` component from the current file.\n\n* **Default Export:**\n    * An object with a `title` property set to `'TableSelection'`. This serves as the title for the story in the storybook application.\n\n* **Usage Function:**\n    * A function named `Usage` that creates and renders the `TableSelection` component.\n    * It renders a `StoryWrapper` component with the following props:\n        * `attributes`: The `attributes.json` file.\n        * `component`: The `TableSelection` component.\n\n**Purpose:**\n\nThe purpose of this file is to provide a functional demonstration of the `TableSelection` component within a storybook application. It allows developers to preview and interact with the component with predefined attributes.\n\n**Additional Notes:**\n\n* The `attributes.json` file likely contains configuration options for the `TableSelection` component, such as table data, column headers, and user interactions.\n* The `StoryWrapper` component is likely a utility component that provides additional functionality, such as styling or data binding.\n* The `TableSelection` component is likely a custom component that handles table selection logic and rendering.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableSelection } from './TableSelection';\n\nexport default { title: 'TableSelection' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableSelection} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `TableSelection.js` file is a React component that allows users to select rows in a table by clicking on checkboxes. It displays a list of users with their avatars, names, emails, and jobs. Users can select individual rows or all rows at once.\n\n**Components:**\n\n* **Table:** Displays the user data in a table format.\n* **Checkbox:** Allows users to select or deselect rows.\n* **Avatar:** Displays user avatars.\n* **Text:** Displays user names, emails, and jobs.\n* **ScrollArea:** Encapsulates the table for smooth scrolling.\n\n**Data:**\n\nThe `data` variable contains an array of user objects with properties including `id`, `avatar`, `name`, `job`, and `email`.\n\n**Functionality:**\n\n* **State Management:** Uses `useState` hook to manage the selected row IDs in the `selection` state variable.\n* **Toggle Row Selection:** `toggleRow` function handles checkbox changes and updates the `selection` state accordingly.\n* **Toggle All Rows:** `toggleAll` function selects or deselects all rows based on the current selection state.\n* **Row Rendering:** The `rows` variable maps over the user data and renders a table row for each user, highlighting selected rows using CSS classes.\n\n**Usage:**\n\nThe `TableSelection` component can be rendered to display a selectable user table. Users can click on checkboxes to select or deselect rows, and the selected row IDs are stored in the `selection` state variable.\n\n**Features:**\n\n* Row selection by checkbox\n* Selection of all rows at once\n* Highlighting of selected rows\n* Scrollable table\n\n**Styling:**\n\nThe `classes.rowSelected` class is used to style the selected table rows.\n\n**Overall Function:**\n\nThe `TableSelection.js` file provides a convenient and interactive way for users to select and manage data in a table format.",
    "input": "",
    "output": "import { useState } from 'react';\nimport cx from 'clsx';\nimport { Avatar, Checkbox, Group, ScrollArea, Table, Text } from '@mantine/core';\nimport classes from './TableSelection.module.css';\n\nconst data = [\n  {\n    id: '1',\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png',\n    name: 'Robert Wolfkisser',\n    job: 'Engineer',\n    email: 'rob_wolf@gmail.com',\n  },\n  {\n    id: '2',\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png',\n    name: 'Jill Jailbreaker',\n    job: 'Engineer',\n    email: 'jj@breaker.com',\n  },\n  {\n    id: '3',\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n    name: 'Henry Silkeater',\n    job: 'Designer',\n    email: 'henry@silkeater.io',\n  },\n  {\n    id: '4',\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png',\n    name: 'Bill Horsefighter',\n    job: 'Designer',\n    email: 'bhorsefighter@gmail.com',\n  },\n  {\n    id: '5',\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-10.png',\n    name: 'Jeremy Footviewer',\n    job: 'Manager',\n    email: 'jeremy@foot.dev',\n  },\n];\n\nexport function TableSelection() {\n  const [selection, setSelection] = useState(['1']);\n  const toggleRow = (id: string) =>\n    setSelection((current) =>\n      current.includes(id) ? current.filter((item) => item !== id) : [...current, id]\n    );\n  const toggleAll = () =>\n    setSelection((current) => (current.length === data.length ? [] : data.map((item) => item.id)));\n\n  const rows = data.map((item) => {\n    const selected = selection.includes(item.id);\n    return (\n      <Table.Tr key={item.id} className={cx({ [classes.rowSelected]: selected })}>\n        <Table.Td>\n          <Checkbox checked={selection.includes(item.id)} onChange={() => toggleRow(item.id)} />\n        </Table.Td>\n        <Table.Td>\n          <Group gap=\"sm\">\n            <Avatar size={26} src={item.avatar} radius={26} />\n            <Text size=\"sm\" fw={500}>\n              {item.name}\n            </Text>\n          </Group>\n        </Table.Td>\n        <Table.Td>{item.email}</Table.Td>\n        <Table.Td>{item.job}</Table.Td>\n      </Table.Tr>\n    );\n  });\n\n  return (\n    <ScrollArea>\n      <Table miw={800} verticalSpacing=\"sm\">\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th w={40}>\n              <Checkbox\n                onChange={toggleAll}\n                checked={selection.length === data.length}\n                indeterminate={selection.length > 0 && selection.length !== data.length}\n              />\n            </Table.Th>\n            <Table.Th>User</Table.Th>\n            <Table.Th>Email</Table.Th>\n            <Table.Th>Job</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided is a configuration file for a user interface element called a \"table\". It defines the following attributes:\n\n**title:**\n- The title of the table. In this case, \"Table with search and sort\".\n\n**category:**\n- The category of the table, which is \"tables\".\n\n**canvas:**\n- An object that specifies the layout and behavior of the table.\n\n**canvas.center:**\n- A boolean value that determines if the table should be centered within its container. In this case, it is set to `true`.\n\n**canvas.maxWidth:**\n- An integer value that specifies the maximum width of the table. In this case, it is set to `920`.\n\n**Purpose:**\n\nThe purpose of this JSON file is to configure a table with the following features:\n\n- A title that displays above the table.\n- The ability to search for specific rows in the table.\n- The ability to sort the rows in ascending or descending order based on specific columns.\n\n**Usage:**\n\nThis JSON file can be used to create a table with the specified configuration on a user interface. The table can be displayed and interacted with as follows:\n\n- The title of the table will be displayed above the table.\n- The user can enter a search query in a search field.\n- The user can click on the header of a column to sort the rows in ascending or descending order.\n\n**Additional Notes:**\n\n- The specific implementation of the table and its features may vary depending on the user interface framework or tool used.\n- The configuration options may be subject to change or expansion in future versions.\n- The file extension of the JSON file is typically \".json\".",
    "input": "",
    "output": "{\n  \"title\": \"Table with search and sort\",\n  \"category\": \"tables\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 920\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe CSS file defines styles for a user interface element with the following classes:\n\n- `.th`\n- `.control`\n- `.icon`\n\n**Purpose:**\n\nThe file likely styles a button or other interactive element within a user interface. It sets the padding, width, height, and other visual properties for these elements.\n\n**`.th` Class:**\n\n- Padding is set to 0. This removes any default spacing around the element.\n\n**`.control` Class:**\n\n- Width is set to 100%. This makes the element take up the full width of its container.\n- Padding is set to a variable value named `--mantine-spacing-xs` and another variable value named `--mantine-spacing-md`. This applies padding on both the top and bottom and left and right sides of the element.\n- It defines a CSS mixin named `hover`. This mixin sets the background color of the element to a light or dark shade depending on the current theme (light or dark mode).\n\n**`.icon` Class:**\n\n- Width and height are set to 21px. This specifies the dimensions of the icon element.\n- Border radius is set to 21px. This creates a circular shape for the icon.\n\n**Additional Notes:**\n\n- The CSS file appears to be part of a Mantine CSS framework. Mantine is a JavaScript library that provides pre-built React components and styles.\n- The `light-dark()` function is used to determine the background color based on the current theme.\n- The variables `--mantine-spacing-xs` and `--mantine-spacing-md` are likely defined elsewhere in the CSS or JavaScript code.",
    "input": "",
    "output": ".th {\n  padding: 0;\n}\n\n.control {\n  width: 100%;\n  padding: var(--mantine-spacing-xs) var(--mantine-spacing-md);\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6));\n  }\n}\n\n.icon {\n  width: 21px;\n  height: 21px;\n  border-radius: 21px;\n}\n"
  },
  {
    "instruction": "**File Name:** TableSort.jsx\n\n**Purpose:**\n\nThe `TableSort.jsx` file is a React component that implements a table sorting functionality. It utilizes the `StoryWrapper` component to display a table with sortable columns.\n\n**Components:**\n\n- **StoryWrapper:** A component that provides a testing environment for the `TableSort` component.\n- **TableSort:** The main component responsible for table sorting.\n\n**Data:**\n\n- `attributes.json`: A JSON file containing the table attributes, including column headers, data, and sortability configuration.\n\n**Code Functionality:**\n\n- The file imports the necessary components and data.\n- It exports a `Usage` function that renders a `StoryWrapper` component.\n- The `StoryWrapper` component receives the `attributes` data and the `TableSort` component as props.\n- The `TableSort` component handles the table sorting logic and renders the table with sortable columns.\n\n**Usage:**\n\nThe `Usage` function creates an instance of the `StoryWrapper` component, passing in the `attributes` data and the `TableSort` component. This renders a table with sortable columns based on the configuration in `attributes.json`.\n\n**Additional Notes:**\n\n- The `StoryWrapper` component provides a convenient way to test and showcase the `TableSort` component.\n- The `attributes.json` file defines the table structure and sorting options.\n- The `TableSort` component handles the sorting logic and updates the table accordingly.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TableSort } from './TableSort';\n\nexport default { title: 'TableSort' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TableSort} />;\n}\n"
  },
  {
    "instruction": "**Description:**\n\nThe `TableSort.jsx` file is a React component that implements a sortable and searchable table. It displays a list of user data, including name, email, and company. Users can sort the table by any of the columns and search for specific entries.\n\n**Components:**\n\n- **Th:** A custom component that represents a table header. It includes an icon that indicates whether the column is currently sorted in ascending or descending order.\n- **TextInput:** A search input field that allows users to filter the table data.\n- **Table:** A Mantine Table component that displays the user data.\n\n**Data:**\n\nThe component uses sample user data that includes name, email, and company information.\n\n**Features:**\n\n- **Sorting:** Users can sort the table by any of the columns in ascending or descending order.\n- **Searching:** Users can search the table by any of the fields.\n- **Filtering:** The table data is filtered based on the search query.\n\n**Functionality:**\n\n- The `sortData()` function sorts the data based on the specified field and sort direction.\n- The `setSorting()` function updates the state variables to reflect the new sort configuration.\n- The `handleSearchChange()` function updates the search query and filters the data accordingly.\n- The component renders a table header with sortable columns and a search input field.\n- It displays the filtered and sorted data in a table format.\n\n**Usage:**\n\nThe `TableSort` component can be imported and used in any React application. It provides a convenient and interactive way to display and manage user data.\n\n**Styling:**\n\nThe component uses CSS classes from the `TableSort.module.css` file to style the table header, icons, and other elements.\n\n**Conclusion:**\n\nThe `TableSort.jsx` file is a well-designed and functional React component that enhances user experience by providing a sortable and searchable table. It is a valuable tool for displaying and managing user data in a web application.",
    "input": "",
    "output": "import { useState } from 'react';\nimport { IconChevronDown, IconChevronUp, IconSearch, IconSelector } from '@tabler/icons-react';\nimport {\n  Center,\n  Group,\n  keys,\n  ScrollArea,\n  Table,\n  Text,\n  TextInput,\n  UnstyledButton,\n} from '@mantine/core';\nimport classes from './TableSort.module.css';\n\ninterface RowData {\n  name: string;\n  email: string;\n  company: string;\n}\n\ninterface ThProps {\n  children: React.ReactNode;\n  reversed: boolean;\n  sorted: boolean;\n  onSort: () => void;\n}\n\nfunction Th({ children, reversed, sorted, onSort }: ThProps) {\n  const Icon = sorted ? (reversed ? IconChevronUp : IconChevronDown) : IconSelector;\n  return (\n    <Table.Th className={classes.th}>\n      <UnstyledButton onClick={onSort} className={classes.control}>\n        <Group justify=\"space-between\">\n          <Text fw={500} fz=\"sm\">\n            {children}\n          </Text>\n          <Center className={classes.icon}>\n            <Icon size={16} stroke={1.5} />\n          </Center>\n        </Group>\n      </UnstyledButton>\n    </Table.Th>\n  );\n}\n\nfunction filterData(data: RowData[], search: string) {\n  const query = search.toLowerCase().trim();\n  return data.filter((item) =>\n    keys(data[0]).some((key) => item[key].toLowerCase().includes(query))\n  );\n}\n\nfunction sortData(\n  data: RowData[],\n  payload: { sortBy: keyof RowData | null; reversed: boolean; search: string }\n) {\n  const { sortBy } = payload;\n\n  if (!sortBy) {\n    return filterData(data, payload.search);\n  }\n\n  return filterData(\n    [...data].sort((a, b) => {\n      if (payload.reversed) {\n        return b[sortBy].localeCompare(a[sortBy]);\n      }\n\n      return a[sortBy].localeCompare(b[sortBy]);\n    }),\n    payload.search\n  );\n}\n\nconst data = [\n  {\n    name: 'Athena Weissnat',\n    company: 'Little - Rippin',\n    email: 'Elouise.Prohaska@yahoo.com',\n  },\n  {\n    name: 'Deangelo Runolfsson',\n    company: 'Greenfelder - Krajcik',\n    email: 'Kadin_Trantow87@yahoo.com',\n  },\n  {\n    name: 'Danny Carter',\n    company: 'Kohler and Sons',\n    email: 'Marina3@hotmail.com',\n  },\n  {\n    name: 'Trace Tremblay PhD',\n    company: 'Crona, Aufderhar and Senger',\n    email: 'Antonina.Pouros@yahoo.com',\n  },\n  {\n    name: 'Derek Dibbert',\n    company: 'Gottlieb LLC',\n    email: 'Abagail29@hotmail.com',\n  },\n  {\n    name: 'Viola Bernhard',\n    company: 'Funk, Rohan and Kreiger',\n    email: 'Jamie23@hotmail.com',\n  },\n  {\n    name: 'Austin Jacobi',\n    company: 'Botsford - Corwin',\n    email: 'Genesis42@yahoo.com',\n  },\n  {\n    name: 'Hershel Mosciski',\n    company: 'Okuneva, Farrell and Kilback',\n    email: 'Idella.Stehr28@yahoo.com',\n  },\n  {\n    name: 'Mylene Ebert',\n    company: 'Kirlin and Sons',\n    email: 'Hildegard17@hotmail.com',\n  },\n  {\n    name: 'Lou Trantow',\n    company: 'Parisian - Lemke',\n    email: 'Hillard.Barrows1@hotmail.com',\n  },\n  {\n    name: 'Dariana Weimann',\n    company: 'Schowalter - Donnelly',\n    email: 'Colleen80@gmail.com',\n  },\n  {\n    name: 'Dr. Christy Herman',\n    company: 'VonRueden - Labadie',\n    email: 'Lilyan98@gmail.com',\n  },\n  {\n    name: 'Katelin Schuster',\n    company: 'Jacobson - Smitham',\n    email: 'Erich_Brekke76@gmail.com',\n  },\n  {\n    name: 'Melyna Macejkovic',\n    company: 'Schuster LLC',\n    email: 'Kylee4@yahoo.com',\n  },\n  {\n    name: 'Pinkie Rice',\n    company: 'Wolf, Trantow and Zulauf',\n    email: 'Fiona.Kutch@hotmail.com',\n  },\n  {\n    name: 'Brain Kreiger',\n    company: 'Lueilwitz Group',\n    email: 'Rico98@hotmail.com',\n  },\n];\n\nexport function TableSort() {\n  const [search, setSearch] = useState('');\n  const [sortedData, setSortedData] = useState(data);\n  const [sortBy, setSortBy] = useState<keyof RowData | null>(null);\n  const [reverseSortDirection, setReverseSortDirection] = useState(false);\n\n  const setSorting = (field: keyof RowData) => {\n    const reversed = field === sortBy ? !reverseSortDirection : false;\n    setReverseSortDirection(reversed);\n    setSortBy(field);\n    setSortedData(sortData(data, { sortBy: field, reversed, search }));\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    setSearch(value);\n    setSortedData(sortData(data, { sortBy, reversed: reverseSortDirection, search: value }));\n  };\n\n  const rows = sortedData.map((row) => (\n    <Table.Tr key={row.name}>\n      <Table.Td>{row.name}</Table.Td>\n      <Table.Td>{row.email}</Table.Td>\n      <Table.Td>{row.company}</Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <TextInput\n        placeholder=\"Search by any field\"\n        mb=\"md\"\n        leftSection={<IconSearch size={16} stroke={1.5} />}\n        value={search}\n        onChange={handleSearchChange}\n      />\n      <Table horizontalSpacing=\"md\" verticalSpacing=\"xs\" miw={700} layout=\"fixed\">\n        <Table.Tbody>\n          <Table.Tr>\n            <Th\n              sorted={sortBy === 'name'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('name')}\n            >\n              Name\n            </Th>\n            <Th\n              sorted={sortBy === 'email'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('email')}\n            >\n              Email\n            </Th>\n            <Th\n              sorted={sortBy === 'company'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('company')}\n            >\n              Company\n            </Th>\n          </Table.Tr>\n        </Table.Tbody>\n        <Table.Tbody>\n          {rows.length > 0 ? (\n            rows\n          ) : (\n            <Table.Tr>\n              <Table.Td colSpan={Object.keys(data[0]).length}>\n                <Text fw={500} ta=\"center\">\n                  Nothing found\n                </Text>\n              </Table.Td>\n            </Table.Tr>\n          )}\n        </Table.Tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided describes a specific card called \"Tasks\" within an application. It provides metadata and configuration details for rendering and interacting with the card.\n\n**Key Features:**\n\n- **Title:** \"Tasks\"\n- **Category:** \"app-cards\"\n- **Dimmed:** Indicates that the card is dimmed, potentially signifying that it is inactive or incomplete.\n- **Changelog:** Specifies the month and year when the card was last updated (September 2022).\n- **Canvas:**\n    - **center:** Centers the card horizontally within its container.\n    - **maxWidth:** Sets the maximum width of the card to 360 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to define the visual and interactive properties of the \"Tasks\" card within the application. It provides information such as the title, category, layout, and behavior of the card.\n\n**Usage:**\n\nThis file is likely used in conjunction with a framework or platform that renders and manages application cards. When loaded, the JSON data is parsed and used to generate the visual representation of the \"Tasks\" card.\n\n**Additional Notes:**\n\n- The \"dimmed\" attribute suggests that the card may not be fully functional or may require additional configuration.\n- The \"canvas\" configuration specifies how the card should be positioned and scaled within the application interface.\n- The \"category\" attribute provides a way to group related cards together.\n\n**In summary, this JSON file defines the metadata and configuration of the \"Tasks\" card, including its title, category, dimmed status, changelog, and canvas settings.**",
    "input": "",
    "output": "{\n  \"title\": \"Tasks card\",\n  \"category\": \"app-cards\",\n  \"dimmed\": true,\n  \"changelog\": \"september-2022\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 360\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** TaskCard.jsx\n\n**File Purpose:**\n\nThe `TaskCard.jsx` file is a React component that represents a task card. It is part of a storybook application that allows developers to preview and test different UI components.\n\n**File Structure:**\n\n* **Import Statements:**\n    * `StoryWrapper`: A React component that provides a container for the task card.\n    * `attributes.json`: A JSON file containing data that will be passed to the task card as props.\n    * `TaskCard`: The React component that represents the task card.\n\n* **Default Export:**\n    * An object with a `title` property set to `'TaskCard'`. This title is used to identify the component in the storybook documentation.\n\n* **Usage Function:**\n    * A function that renders a `StoryWrapper` component.\n    * The `attributes` prop of the `StoryWrapper` is set to the data from the `attributes.json` file.\n    * The `component` prop of the `StoryWrapper` is set to the `TaskCard` component.\n\n**How the File Works:**\n\n1. The file imports the necessary components and data.\n2. The `Usage()` function creates a new instance of the `StoryWrapper` component.\n3. The `StoryWrapper` component receives the `attributes` prop and passes it to the `TaskCard` component.\n4. The `TaskCard` component renders the task card with the data specified in the `attributes.json` file.\n\n**Purpose of the TaskCard Component:**\n\nThe `TaskCard` component is responsible for rendering a single task card. The task card should display the task title, description, and other relevant information.\n\n**Benefits of Using the TaskCard Component:**\n\n* Allows developers to preview and test the task card UI.\n* Provides a convenient way to showcase the task card functionality.\n* Facilitates collaboration and feedback during the development process.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { TaskCard } from './TaskCard';\n\nexport default { title: 'TaskCard' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={TaskCard} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided file is a React component called `TaskCard`. Its purpose is to display information about a specific task, including the task title, description, progress status, team members involved, and an option to upload files.\n\n**Components:**\n\nThe component uses the following components from the `@mantine/core` and `@tabler/icons-react` libraries:\n\n- `Card`: A card-like container with borders and padding.\n- `Group`: A component for grouping elements with spacing and alignment.\n- `Badge`: A badge for displaying information.\n- `Text`: Text component with different font sizes and weights.\n- `Progress`: A progress bar to represent task completion.\n- `Avatar`: A component for displaying team member avatars.\n- `ActionIcon`: A button with an icon.\n- `IconUpload`: The upload icon.\n\n**Data:**\n\nThe component receives an array of avatars as props:\n\n```\nconst avatars = [\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-4.png',\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png',\n];\n```\n\n**Structure:**\n\nThe component renders the following information:\n\n- A logo at the top.\n- A badge indicating the remaining time for the task.\n- The task title.\n- A description of the task.\n- A progress bar representing the task completion status.\n- A list of team members involved.\n- An option to upload files using the upload icon.\n\n**Usage:**\n\nThis component can be used to display task information in a user interface. It can be embedded in other components or pages to provide a clear overview of tasks and their progress.\n\n**Purpose:**\n\nThe purpose of this file is to provide a reusable component for displaying task information. It is designed to be visually appealing and informative, allowing users to quickly grasp the status of tasks and the team members involved.",
    "input": "",
    "output": "import { IconUpload } from '@tabler/icons-react';\nimport { ActionIcon, Avatar, Badge, Card, Group, Progress, Text } from '@mantine/core';\nimport { MantineLogo } from '@mantinex/mantine-logo';\n\nconst avatars = [\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-4.png',\n  'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png',\n];\n\nexport function TaskCard() {\n  return (\n    <Card withBorder padding=\"lg\" radius=\"md\">\n      <Group justify=\"space-between\">\n        <MantineLogo type=\"mark\" size={32} />\n        <Badge>12 days left</Badge>\n      </Group>\n\n      <Text fz=\"lg\" fw={500} mt=\"md\">\n        5.3 minor release (September 2022)\n      </Text>\n      <Text fz=\"sm\" c=\"dimmed\" mt={5}>\n        Form context management, Switch, Grid and Indicator components improvements, new hook and\n        10+ other changes\n      </Text>\n\n      <Text c=\"dimmed\" fz=\"sm\" mt=\"md\">\n        Tasks completed:{' '}\n        <Text span fw={500} c=\"bright\">\n          23/36\n        </Text>\n      </Text>\n\n      <Progress value={(23 / 36) * 100} mt={5} />\n\n      <Group justify=\"space-between\" mt=\"md\">\n        <Avatar.Group spacing=\"sm\">\n          <Avatar src={avatars[0]} radius=\"xl\" />\n          <Avatar src={avatars[1]} radius=\"xl\" />\n          <Avatar src={avatars[2]} radius=\"xl\" />\n          <Avatar radius=\"xl\">+5</Avatar>\n        </Avatar.Group>\n        <ActionIcon variant=\"default\" size=\"lg\" radius=\"md\">\n          <IconUpload size={18} />\n        </ActionIcon>\n      </Group>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided JSON file describes a user button configuration for an application or platform. It defines the title, category, and visual properties of the button.\n\n**Title:**\n\n- The `title` property specifies the text label displayed on the button. In this case, the title is \"User button\".\n\n**Category:**\n\n- The `category` property categorizes the button within the application or platform. In this case, the category is \"users\".\n\n**Canvas:**\n\n- The `canvas` property contains configuration options for the button's visual presentation.\n    - **center:** If set to `true`, the button will be centered horizontally within its designated space.\n    - **maxWidth:** Specifies the maximum width of the button. In this case, the maximum width is set to 320 pixels.\n\n**Purpose:**\n\n- This file defines a user button that can be used within an application or platform.\n- The button is titled \"User button\" and belongs to the \"users\" category.\n- The canvas properties configure the button's visual appearance, including centering and maximum width.\n\n**Additional Notes:**\n\n- The values for the `title`, `category`, and `maxWidth` properties can be customized based on the specific requirements of the application or platform.\n- The `canvas` property may contain additional configuration options, such as padding, margin, font size, and button type.\n- The file can be used to create and configure user buttons that can be displayed and interacted with by users within the application or platform.",
    "input": "",
    "output": "{\n  \"title\": \"User button\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided CSS code defines a CSS rule for an element with the class `.user`. This rule styles the element in a specific way, including its display, width, padding, color, and hover behavior.\n\n**CSS Rule:**\n\n```css\n.user {\n  display: block;\n  width: 100%;\n  padding: var(--mantine-spacing-md);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-dark-0));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-8));\n  }\n}\n```\n\n**CSS Properties and Values:**\n\n- **display:** set to `block`, indicating that the element should be displayed as a block-level element, taking up the full width available.\n- **width:** set to `100%`, making the element occupy the entire width of its container.\n- **padding:** set to `var(--mantine-spacing-md)`, which refers to a predefined spacing value named `--mantine-spacing-md`.\n- **color:** set using the `light-dark()` function, which determines the color based on the theme's light and dark modes. If the theme is in light mode, the color is set to `var(--mantine-color-black)`. If it's in dark mode, the color is set to `var(--mantine-color-dark-0)`.\n\n**Hover Behavior:**\n\n- The code defines a mixin named `hover`. Mixins are reusable CSS code blocks.\n- When the user hovers over the `.user` element, the `background-color` property is set using the `light-dark()` function.\n- The background color changes depending on the theme mode:\n    - In light mode, the background color is set to `var(--mantine-color-gray-0)`.\n    - In dark mode, the background color is set to `var(--mantine-color-dark-8)`.\n\n**Purpose:**\n\nThe CSS rule styles an element with the class `.user` in a specific way, including its display, width, padding, color, and hover behavior. This rule is likely used to style elements such as buttons, list items, or other interactive elements within a user interface.",
    "input": "",
    "output": ".user {\n  display: block;\n  width: 100%;\n  padding: var(--mantine-spacing-md);\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-dark-0));\n\n  @mixin hover {\n    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-8));\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** UserButton.jsx\n\n**Description:**\n\nThe UserButton.jsx file is a React component that serves as a user interface element. It uses the following components and files:\n\n* **StoryWrapper:** A component that provides a template for rendering stories.\n* **attributes.json:** A JSON file that contains attributes used to configure the UserButton component.\n* **UserButton:** The actual user button component.\n\n**Code Breakdown:**\n\n**Import Statements:**\n\n* `StoryWrapper` component is imported from the `StoryWrapper` module.\n* `attributes.json` file is imported as a JavaScript object.\n* `UserButton` component is imported from the same directory.\n\n**Component Definition:**\n\n* The component is exported with the title `UserButton`.\n\n**Usage Function:**\n\n* The `Usage` function renders the `StoryWrapper` component with the following props:\n    * `attributes`: The `attributes.json` object.\n    * `component`: The `UserButton` component.\n\n**Purpose:**\n\nThe UserButton.jsx file is likely used to create a user interface element that can be interacted with. It provides a template for rendering a button with specific attributes and behavior.\n\n**Additional Notes:**\n\n* The `attributes.json` file contains the configuration details for the UserButton component, such as the button label, style, and other interactive properties.\n* The `StoryWrapper` component likely provides a way to render the UserButton component within a specific template or context.\n* The `UserButton` component itself likely handles the logic for user interaction and button functionality.\n\n**Conclusion:**\n\nThe UserButton.jsx file is a React component that uses the `StoryWrapper` and `attributes.json` file to render a user button with specific attributes and behavior. It is part of a larger system that handles user interaction and UI rendering.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UserButton } from './UserButton';\n\nexport default { title: 'UserButton' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UserButton} />;\n}\n"
  },
  {
    "instruction": "**UserButton.js**\n\nThis file is a React component that represents a user button. It displays user information, including their avatar, name, email address, and an arrow icon indicating navigation.\n\n**Components:**\n\n* **UnstyledButton:** A button without default styling, allowing for custom styling through CSS classes.\n* **Group:** A component that groups its children into a horizontal layout.\n* **Avatar:** A component that displays an image as an avatar.\n* **Text:** A component for displaying text with different styles.\n* **IconChevronRight:** An icon of a right-facing arrow.\n\n**Functionality:**\n\n* The component renders an unstyled button with a `className` of `classes.user`.\n* Inside the button, there is a `Group` component that contains the user information.\n* The user's avatar is displayed using an `Avatar` component with a source URL.\n* The user's name and email address are displayed as `Text` components with appropriate styles.\n* A `IconChevronRight` component is rendered as an arrow icon, indicating navigation.\n\n**Styling:**\n\n* The `UserButton.module.css` file provides CSS styles for the component, including the button and its elements.\n* The styles can be customized as needed to match the desired design.\n\n**Purpose:**\n\nThe purpose of this component is to provide a user interface element that displays user information and allows for navigation to other pages or sections.\n\n**Usage:**\n\nThis component can be used by importing it into other React components where user information needs to be displayed.\n\n**Example:**\n\n```\n<UserButton />\n```\n\n**Additional Notes:**\n\n* The user avatar image is sourced from a GitHub repository.\n* The email address is displayed as a dimmed text.\n* The arrow icon can be used to indicate navigation or other actions.",
    "input": "",
    "output": "import { IconChevronRight } from '@tabler/icons-react';\nimport { Avatar, Group, Text, UnstyledButton } from '@mantine/core';\nimport classes from './UserButton.module.css';\n\nexport function UserButton() {\n  return (\n    <UnstyledButton className={classes.user}>\n      <Group>\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-8.png\"\n          radius=\"xl\"\n        />\n\n        <div style={{ flex: 1 }}>\n          <Text size=\"sm\" fw={500}>\n            Harriette Spoonlicker\n          </Text>\n\n          <Text c=\"dimmed\" size=\"xs\">\n            hspoonlicker@outlook.com\n          </Text>\n        </div>\n\n        <IconChevronRight size={14} stroke={1.5} />\n      </Group>\n    </UnstyledButton>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user card with an image. It is part of a data structure used in a user interface or application to represent user information.\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"User card with image\",\n  \"category\": \"users\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 300\n  }\n}\n```\n\n**File Properties:**\n\n* **title:** The title of the user card, which is \"User card with image\".\n* **category:** The category of the user card, which is \"users\".\n* **dimmed:** A boolean value indicating whether the card should be dimmed or not. In this case, it is set to `true`.\n* **canvas:** An object that defines the canvas properties for the card.\n    * **center:** A boolean value indicating whether the card should be centered within its container. In this case, it is set to `true`.\n    * **maxWidth:** The maximum width of the card in pixels. In this case, it is set to 300 pixels.\n\n**Purpose:**\n\nThe purpose of this JSON file is to define a user card template with an image. The card can be used to display user information, such as name, profile picture, and other relevant details.\n\n**Usage:**\n\nThis JSON file can be used in a user interface or application to create and display user cards with images. The card's properties, such as title, category, and image, can be customized as needed.\n\n**Additional Notes:**\n\n* The `category` property is used to group related user cards together.\n* The `dimmed` property can be used to indicate that the user card is inactive or unavailable.\n* The `canvas` properties are used to configure the layout and appearance of the card.",
    "input": "",
    "output": "{\n  \"title\": \"User card with image\",\n  \"category\": \"users\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 300\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided CSS code defines two CSS classes, `.card` and `.avatar`, which are used to style HTML elements on a webpage.\n\n**`.card` Class:**\n\n- Sets the background color of the element to the value of the `--mantine-color-body` CSS variable.\n- The `--mantine-color-body` variable is typically set in a CSS root or global stylesheet to define the background color of the entire webpage.\n\n**`.avatar` Class:**\n\n- Sets a 2px solid border around the element.\n- The border color is inherited from the `--mantine-color-body` CSS variable.\n\n**Usage:**\n\nThe `.card` and `.avatar` classes can be applied to HTML elements in a webpage using the following syntax:\n\n```html\n<div class=\"card\">...</div>\n<img src=\"...\" class=\"avatar\">\n```\n\n**Example:**\n\nSuppose the `--mantine-color-body` variable is set to `#f0f0f0`, then the background of the `.card` element will be a light gray color, and the border of the `.avatar` element will also be a light gray color.\n\n**Purpose:**\n\nThe purpose of these CSS classes is to provide a consistent style for cards and avatars throughout a webpage. The `.card` class typically represents a container for content, while the `.avatar` class represents an image or icon that represents a user or entity.",
    "input": "",
    "output": ".card {\n  background-color: var(--mantine-color-body);\n}\n\n.avatar {\n  border: 2px solid var(--mantine-color-body);\n}\n"
  },
  {
    "instruction": "**File Name:** UserCardImage.jsx\n\n**Purpose:**\n\nThe UserCardImage.jsx file is a React component that displays a user card image. It imports necessary components and data to render the user card image and provides a story for testing and documentation.\n\n**Components:**\n\n* **StoryWrapper:** A component that wraps the UserCardImage component and provides additional attributes for testing.\n* **UserCardImage:** The component that displays the user card image.\n\n**Data:**\n\n* **attributes.json:** A JSON file that contains attributes for the UserCardImage component, such as user name, image URL, and bio.\n\n**Code Breakdown:**\n\n**1. Import Statements:**\n\n* Imports the StoryWrapper component from the '../../components/StoryWrapper/StoryWrapper' module.\n* Imports the attributes object from the './attributes.json' file.\n* Imports the UserCardImage component from the current file.\n\n**2. Default Export:**\n\n* Exports an object with a title property set to 'UserCardImage'. This is likely for documentation purposes.\n\n**3. Usage Function:**\n\n* Defines a Usage function that renders a StoryWrapper component with the following attributes:\n    * attributes: The attributes object from './attributes.json'.\n    * component: The UserCardImage component.\n\n**4. Rendering:**\n\nThe UserCardImage component renders a user card image based on the attributes provided. The StoryWrapper component allows testing the component with different attributes.\n\n**Purpose of the File:**\n\nThe UserCardImage.jsx file is responsible for rendering a user card image component with data from the attributes.json file. It is used to display user information on a website or application.\n\n**Additional Notes:**\n\n* The UserCardImage component likely includes styling and layout to display the user card image.\n* The attributes.json file can be used to configure the user card image with different user details.\n* The StoryWrapper component is used for testing and documentation purposes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UserCardImage } from './UserCardImage';\n\nexport default { title: 'UserCardImage' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UserCardImage} />;\n}\n"
  },
  {
    "instruction": "**UserCardImage.js**\n\nThis file is a React component that renders a user card with their profile information and stats.\n\n**Purpose:**\n\nThe purpose of this component is to display user information, including their profile picture, name, profession, and stats. It allows users to follow other users.\n\n**Components:**\n\n- **Card:** A container component that wraps the user information.\n- **Card.Section:** A section within the card that displays the user's profile image.\n- **Avatar:** A component that displays the user's profile picture.\n- **Text:** A component for displaying text content.\n- **Group:** A component that groups multiple elements horizontally.\n- **Button:** A component that allows users to follow other users.\n\n**Data:**\n\n- The component uses a `stats` array to store user stats, including followers, follows, and posts.\n\n**Rendering:**\n\n- The component iterates over the `stats` array and renders a `div` element for each stat.\n- Each `div` element contains two `Text` components: one for the stat value and another for the stat label.\n- The component also displays the user's profile picture, name, profession, and a \"Follow\" button.\n\n**CSS:**\n\n- The component uses a CSS module named `UserCardImage.module.css` for styling.\n\n**Usage:**\n\nThe `UserCardImage` component can be imported into other React components and rendered to display user cards.\n\n**Example:**\n\n```\n<UserCardImage />\n```\n\n**Output:**\n\nThe component will render a user card with the following information:\n\n- Profile picture\n- Name: Bill Headbanger\n- Profession: Fullstack engineer\n- Stats:\n    - Followers: 34K\n    - Follows: 187\n    - Posts: 1.6K\n- \"Follow\" button",
    "input": "",
    "output": "import { Avatar, Button, Card, Group, Text } from '@mantine/core';\nimport classes from './UserCardImage.module.css';\n\nconst stats = [\n  { value: '34K', label: 'Followers' },\n  { value: '187', label: 'Follows' },\n  { value: '1.6K', label: 'Posts' },\n];\n\nexport function UserCardImage() {\n  const items = stats.map((stat) => (\n    <div key={stat.label}>\n      <Text ta=\"center\" fz=\"lg\" fw={500}>\n        {stat.value}\n      </Text>\n      <Text ta=\"center\" fz=\"sm\" c=\"dimmed\" lh={1}>\n        {stat.label}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder padding=\"xl\" radius=\"md\" className={classes.card}>\n      <Card.Section\n        h={140}\n        style={{\n          backgroundImage:\n            'url(https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=500&q=80)',\n        }}\n      />\n      <Avatar\n        src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-9.png\"\n        size={80}\n        radius={80}\n        mx=\"auto\"\n        mt={-30}\n        className={classes.avatar}\n      />\n      <Text ta=\"center\" fz=\"lg\" fw={500} mt=\"sm\">\n        Bill Headbanger\n      </Text>\n      <Text ta=\"center\" fz=\"sm\" c=\"dimmed\">\n        Fullstack engineer\n      </Text>\n      <Group mt=\"md\" justify=\"center\" gap={30}>\n        {items}\n      </Group>\n      <Button fullWidth radius=\"md\" mt=\"xl\" size=\"md\" variant=\"default\">\n        Follow\n      </Button>\n    </Card>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a user card with an action. It specifies the following information:\n\n**Title:** User card with action\n\n**Category:** users\n\n**Dimmed:** True\n\n**Canvas:**\n- Centered\n- Maximum width of 320 pixels\n\n**Purpose:**\n\nThis file defines a user card that can be used in a user interface. The card is dimmed, indicating that it is inactive or disabled. The canvas settings center the card and limit its maximum width to 320 pixels.\n\n**Fields:**\n\n- **title:** The title of the user card, which is \"User card with action\".\n- **category:** The category of the user card, which is \"users\".\n- **dimmed:** A boolean value that indicates whether the card should be dimmed. In this case, it is set to true.\n- **canvas:** An object that defines the canvas settings for the card.\n    - **center:** A boolean value that indicates whether the card should be centered. In this case, it is set to true.\n    - **maxWidth:** The maximum width of the card in pixels. In this case, it is set to 320.\n\n**Usage:**\n\nThis JSON file can be used to create a user card with an action in a user interface. The card can be displayed in a dimmed state, indicating that it is inactive or disabled. The canvas settings ensure that the card is centered and within a specified width.\n\n**Additional Notes:**\n\n- The \"dimmed\" property can be used to visually indicate the status of a user card.\n- The \"canvas\" settings allow for customization of the card's positioning and size.\n- The maximum width of 320 pixels can be adjusted as needed.",
    "input": "",
    "output": "{\n  \"title\": \"User card with action\",\n  \"category\": \"users\",\n  \"dimmed\": true,\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided file is a React component called `UserInfoAction`. It is responsible for displaying user information and handling user interactions.\n\n**Description:**\n\n* **Imports:**\n    * `StoryWrapper`: A reusable component for rendering stories.\n    * `attributes.json`: A JSON file containing user attributes.\n    * `UserInfoAction`: The main component being exported.\n\n* **Component Title:**\n    The file exports a component with the title `UserInfoAction`.\n\n* **Usage Function:**\n    * Defines a `Usage` function that renders the `StoryWrapper` component.\n    * Passes the `attributes` JSON file and the `UserInfoAction` component as props to `StoryWrapper`.\n\n**Workflow:**\n\n1. The `StoryWrapper` component renders the `UserInfoAction` component with the provided attributes.\n2. The `UserInfoAction` component displays user information based on the attributes.\n3. It may also include interactive elements, such as buttons or forms, for user actions.\n4. When users interact with these elements, the component handles the events and updates the user information accordingly.\n\n**Purpose of attributes.json:**\n\nThe `attributes.json` file likely contains user attributes, such as name, email, location, etc. This data is passed to the `UserInfoAction` component via the `attributes` prop.\n\n**Overall Function:**\n\nThe `UserInfoAction` component serves as a user interface for displaying and interacting with user information. It uses the `StoryWrapper` component to provide a structured environment for testing and rendering the component.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely used for storybook documentation and testing purposes.\n* The `UserInfoAction` component may be part of a larger application or module.\n* The specific implementation of the component may vary depending on the application requirements.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UserInfoAction } from './UserInfoAction';\n\nexport default { title: 'UserInfoAction' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UserInfoAction} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file `UserInfoAction.jsx` is a React functional component that displays user information and provides an option to send a message.\n\n**Functionality:**\n\n- **Imports:**\n   - Imports necessary Mantine components for UI rendering, including `Avatar`, `Button`, `Paper`, and `Text`.\n\n- **Component Definition:**\n   - The `UserInfoAction()` function is defined as a React component.\n\n- **Component Render:**\n   - The component renders a `Paper` element with the following content:\n     - An `Avatar` component with an image.\n     - A `Text` element for the user's name.\n     - Another `Text` element for the user's email and title.\n     - A `Button` element with the text \"Send message\".\n\n**UI Layout:**\n\n- A circular avatar with a user image.\n- User's name in a larger font size with a bold font weight.\n- User's email and title in a smaller font size with a dimmed color.\n- A button that says \"Send message\" when clicked.\n\n**Style and Appearance:**\n\n- The `Paper` element has a rounded border, padding, and a background color.\n- The `Avatar` and `Text` elements have specific styles, including font size, color, and alignment.\n- The `Button` element has a default variant and is styled to be full-width.\n\n**Usage:**\n\nThis component can be used to display user information and provide a way for users to interact with each other. It can be integrated into other React applications or components.\n\n**Additional Notes:**\n\n- The avatar image source is a placeholder URL.\n- The user's name, email, and title can be dynamically populated based on actual data.\n- The `fullWidth` prop on the `Button` element ensures that it takes up the full width of the `Paper` element.",
    "input": "",
    "output": "import { Avatar, Button, Paper, Text } from '@mantine/core';\n\nexport function UserInfoAction() {\n  return (\n    <Paper radius=\"md\" withBorder p=\"lg\" bg=\"var(--mantine-color-body)\">\n      <Avatar\n        src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-8.png\"\n        size={120}\n        radius={120}\n        mx=\"auto\"\n      />\n      <Text ta=\"center\" fz=\"lg\" fw={500} mt=\"md\">\n        Jane Fingerlicker\n      </Text>\n      <Text ta=\"center\" c=\"dimmed\" fz=\"sm\">\n        jfingerlicker@me.io • Art director\n      </Text>\n\n      <Button variant=\"default\" fullWidth mt=\"md\">\n        Send message\n      </Button>\n    </Paper>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file you provided is a JSON configuration file that defines a user interface component called \"User info with icons\".\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"User info with icons\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n```\n\n**File Contents:**\n\n* **title:** The title of the component, which is \"User info with icons\".\n* **category:** The category of the component, which is \"users\".\n* **canvas:** An object that defines the layout of the component.\n    * **center:** A boolean value that specifies whether the component should be centered horizontally. Defaults to `true`.\n    * **maxWidth:** The maximum width of the component in pixels. Defaults to `320`.\n\n**Purpose:**\n\nThe purpose of this file is to define a user interface component that displays user information with icons. The component should be centered horizontally and have a maximum width of 320 pixels.\n\n**Usage:**\n\nThis configuration file can be used to create an instance of the \"User info with icons\" component in a user interface framework. The component can be placed on a canvas with the specified layout and appearance.\n\n**Example:**\n\n```\n<user-info-with-icons title=\"John Doe\" category=\"admin\" />\n```\n\n**Note:**\n\n* The specific icons and user information displayed in the component are not defined in this file.\n* The user interface framework may have additional configuration options for the component.",
    "input": "",
    "output": "{\n  \"title\": \"User info with icons\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 320\n  }\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe file you have provided is a CSS file that defines CSS rules for two CSS classes: `.icon` and `.name`. These classes are likely used in a web application or website to style and format specific elements.\n\n**`.icon` Class:**\n\n* **Purpose:** To style an element with the class name `icon`.\n* **CSS Rule:**\n    * `color`: Uses the `light-dark()` function to set the color of the element based on the theme mode.\n        * In light mode, the color is set to `var(--mantine-color-gray-5)`.\n        * In dark mode, the color is set to `var(--mantine-color-dark-3)`.\n* **Effect:** The color of the element with the class name `icon` will change based on the user's theme preference (light or dark mode).\n\n**`.name` Class:**\n\n* **Purpose:** To style an element with the class name `name`.\n* **CSS Rule:**\n    * `font-family`: Sets the font family of the element to `Outfit`, followed by the value of `var(--mantine-font-family)`.\n* **Effect:** The font family of the element with the class name `name` will be set to `Outfit`, with a fallback font family specified by the value of `var(--mantine-font-family)`.\n\n**Additional Notes:**\n\n* `--mantine-color-gray-5`: This is a CSS variable that represents a specific color value.\n* `--mantine-color-dark-3`: Another CSS variable that represents a specific color value.\n* `--mantine-font-family`: A CSS variable that specifies the default font family for the web application or website.\n* `light-dark()` function: This function allows for conditional color setting based on the theme mode.\n\n**Purpose of the File:**\n\nThe purpose of this CSS file is to provide styling for two elements in a web application or website. It is likely used to:\n\n* Create visual cues for icons.\n* Display names in a specific font.\n* Adapt to different theme modes.",
    "input": "",
    "output": ".icon {\n  color: light-dark(var(--mantine-color-gray-5), var(--mantine-color-dark-3));\n}\n\n.name {\n  font-family: Outfit, var(--mantine-font-family);\n}\n"
  },
  {
    "instruction": "**File Name:** UserInfoIcons.js\n\n**Purpose:**\n\nThe UserInfoIcons.js file is a React component that displays user information icons. It imports necessary components and data from other files and provides a rendering structure for the component.\n\n**Components:**\n\n- **StoryWrapper:** A custom component that wraps the UserInfoIcons component and provides additional rendering options.\n- **UserInfoIcons:** The main component that displays the user information icons.\n- **attributes.json:** A JSON file containing attributes that control the rendering of the UserInfoIcons component.\n\n**Code Functionality:**\n\n- **Imports:**\n   - Imports the StoryWrapper component from the '../../components/StoryWrapper/StoryWrapper' file.\n   - Imports the attributes object from the './attributes.json' file.\n   - Imports the UserInfoIcons component from the current file.\n\n- **Default Export:**\n   - Exports an object with a title property set to 'UserInfoIcons'.\n\n- **Usage Function:**\n   - Renders a StoryWrapper component with the following props:\n     - `attributes`: The attributes object imported from the './attributes.json' file.\n     - `component`: The UserInfoIcons component.\n\n**Rendering Structure:**\n\nThe UserInfoIcons component likely uses the attributes object to determine which icons to display and how to style them. It may also interact with other components or services to retrieve user information.\n\n**Additional Notes:**\n\n- The file name and component name suggest that it is part of a user interface or profile management system.\n- The StoryWrapper component is likely used for testing or documentation purposes.\n- The attributes.json file likely contains configuration options for the UserInfoIcons component, such as icon sizes, colors, and hover effects.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UserInfoIcons } from './UserInfoIcons';\n\nexport default { title: 'UserInfoIcons' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UserInfoIcons} />;\n}\n"
  },
  {
    "instruction": "**File Name:** UserInfoIcons.js\n\n**Purpose:**\n\nThe `UserInfoIcons.js` file is a React component that displays a user's information, including their avatar, name, title, email address, and phone number.\n\n**Functionality:**\n\n- The component imports necessary components from the `@tabler/icons-react` and `@mantine/core` libraries.\n- It defines a `UserInfoIcons()` function that returns a `div` element containing the user information.\n- The user's avatar is displayed using an `Avatar` component with an image source.\n- The user's title, name, email address, and phone number are displayed using `Text` components with appropriate styling and formatting.\n- The email address and phone number are wrapped in `Group` components with icons.\n- The component uses a CSS module (UserInfoIcons.module.css) for styling.\n\n**Code Breakdown:**\n\n```\nimport { IconAt, IconPhoneCall } from '@tabler/icons-react';\nimport { Avatar, Group, Text } from '@mantine/core';\nimport classes from './UserInfoIcons.module.css';\n\nexport function UserInfoIcons() {\n  return (\n    <div>\n      <Group wrap=\"nowrap\">\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png\"\n          size={94}\n          radius=\"md\"\n        />\n        <div>\n          <Text fz=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n            Software engineer\n          </Text>\n\n          <Text fz=\"lg\" fw={500} className={classes.name}>\n            Robert Glassbreaker\n          </Text>\n\n          <Group wrap=\"nowrap\" gap={10} mt={3}>\n            <IconAt stroke={1.5} size={16} className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              robert@glassbreaker.io\n            </Text>\n          </Group>\n\n          <Group wrap=\"nowrap\" gap={10} mt={5}>\n            <IconPhoneCall stroke={1.5} size={16} className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              +11 (876) 890 56 23\n            </Text>\n          </Group>\n        </div>\n      </Group>\n    </div>\n  );\n}\n```\n\n**CSS Module (UserInfoIcons.module.css):**\n\nThe CSS module provides styling for the user's name, icons, and other elements.\n\n**Usage:**\n\nThis component can be used to display user information in a user interface. It can be embedded within other components or used as a standalone component.\n\n**Additional Notes:**\n\n- The image source for the avatar is specified in the `src` attribute of the `Avatar` component.\n- The icons used are from the `@tabler/icons-react` library.\n- The styling is applied using the `classes` object imported from the CSS module.",
    "input": "",
    "output": "import { IconAt, IconPhoneCall } from '@tabler/icons-react';\nimport { Avatar, Group, Text } from '@mantine/core';\nimport classes from './UserInfoIcons.module.css';\n\nexport function UserInfoIcons() {\n  return (\n    <div>\n      <Group wrap=\"nowrap\">\n        <Avatar\n          src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png\"\n          size={94}\n          radius=\"md\"\n        />\n        <div>\n          <Text fz=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n            Software engineer\n          </Text>\n\n          <Text fz=\"lg\" fw={500} className={classes.name}>\n            Robert Glassbreaker\n          </Text>\n\n          <Group wrap=\"nowrap\" gap={10} mt={3}>\n            <IconAt stroke={1.5} size={16} className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              robert@glassbreaker.io\n            </Text>\n          </Group>\n\n          <Group wrap=\"nowrap\" gap={10} mt={5}>\n            <IconPhoneCall stroke={1.5} size={16} className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              +11 (876) 890 56 23\n            </Text>\n          </Group>\n        </div>\n      </Group>\n    </div>\n  );\n}\n"
  },
  {
    "instruction": "**File Function:**\n\nThe provided JSON file defines a user menu configuration for a specific category called \"users\".\n\n**File Structure:**\n\n```json\n{\n  \"title\": \"User menu\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n```\n\n**Key Fields:**\n\n- **title:** This field specifies the title of the user menu. In this case, it is \"User menu\".\n- **category:** This field identifies the category to which the user menu belongs. In this case, it is \"users\".\n- **canvas:** This field contains configuration options for the menu canvas.\n\n**Canvas Configuration:**\n\n- **center:** This field specifies whether the menu should be centered horizontally. In this case, it is set to `false`, indicating that the menu should not be centered.\n\n**Purpose:**\n\nThe purpose of this file is to configure a user menu for the \"users\" category. The menu title and category name are specified, along with the canvas configuration for the menu layout.\n\n**Usage:**\n\nThis file can be used to define user menus within a system or application. The configuration options can be used to customize the menu layout, title, and other display properties.\n\n**Additional Notes:**\n\n- The `category` field should correspond to an existing category within the system.\n- The `center` option in the canvas configuration can be used to adjust the horizontal alignment of the menu.\n- The specific functionality of the user menu is not specified in this file. It may be implemented separately through code or other mechanisms.",
    "input": "",
    "output": "{\n  \"title\": \"User menu\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": false\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** UserMenu.jsx\n\n**Purpose:**\n\nThe UserMenu.jsx file appears to be a React component that represents a user menu. It likely provides a navigation interface for users to access various functionalities within the application.\n\n**Components:**\n\n- **StoryWrapper:** A custom React component that wraps the UserMenu component and provides additional attributes.\n- **UserMenu:** The main component that displays the user menu options.\n\n**Data:**\n\n- **attributes.json:** A JSON file that contains attributes and configuration options for the UserMenu component.\n\n**Code Functionality:**\n\n- The file imports the necessary components, including StoryWrapper and UserMenu.\n- It sets the title of the component to 'UserMenu'.\n- It defines a Usage function that renders a StoryWrapper component with the following props:\n    - attributes: Attributes loaded from the attributes.json file.\n    - component: UserMenu.\n\n**Usage:**\n\nThe Usage function can be used to render the UserMenu component with the specified attributes. When rendered, the UserMenu component will display a navigation interface based on the configuration in attributes.json.\n\n**Additional Notes:**\n\n- The StoryWrapper component is likely used for testing or demonstration purposes.\n- The UserMenu component is assumed to have logic for handling user interactions and navigation.\n- The attributes.json file contains configuration options such as menu items, labels, and styles.\n\n**Overall Function:**\n\nThe UserMenu.jsx file provides a React component that represents a user menu, allowing users to access different functionalities within the application. The menu options are configured in the attributes.json file.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UserMenu } from './UserMenu';\n\nexport default { title: 'UserMenu' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UserMenu} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe `UserMenu.jsx` file creates a user menu component that provides a dropdown menu with various options for the logged-in user.\n\n**Functionality:**\n\nThe component consists of a `Menu` component from the `@mantine/core` library, which is triggered by an `ActionIcon` with three dots. When clicked, a dropdown menu appears with the following options:\n\n**Profile:**\n\n- User avatar and name\n- Email address\n\n**Post Management:**\n\n- Liked posts\n- Saved posts\n- Your comments\n\n**Settings:**\n\n- Account settings\n- Change account\n- Logout\n\n**Danger Zone:**\n\n- Pause subscription\n- Delete account\n\n**Features:**\n\n- **Theme support:** The component uses the `useMantineTheme()` hook to access the current theme and apply the appropriate colors to the icons and labels.\n- **Iconography:** The component uses icons from the `@tabler/icons-react` library to represent different options.\n- **Menu layout:** The options are organized into sections with labels and dividers for clarity.\n- **Hover effects:** The menu items have hover effects that change the background color.\n- **Dropdown animation:** The dropdown menu transitions with a pop animation.\n\n**Usage:**\n\nThe `UserMenu` component can be used in any component that needs to display a user menu.\n\n**Example:**\n\n```jsx\n<UserMenu />\n```\n\n**Note:**\n\n- The user avatar image is a placeholder.\n- The subscription and account deletion features are represented by icons but may require additional implementation.",
    "input": "",
    "output": "import {\n  IconChevronRight,\n  IconDots,\n  IconHeart,\n  IconLogout,\n  IconMessage,\n  IconPlayerPause,\n  IconSettings,\n  IconStar,\n  IconSwitchHorizontal,\n  IconTrash,\n} from '@tabler/icons-react';\nimport { ActionIcon, Avatar, Group, Menu, Text, useMantineTheme } from '@mantine/core';\n\nexport function UserMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Group justify=\"center\">\n      <Menu\n        withArrow\n        width={300}\n        position=\"bottom\"\n        transitionProps={{ transition: 'pop' }}\n        withinPortal\n      >\n        <Menu.Target>\n          <ActionIcon variant=\"default\">\n            <IconDots size={16} stroke={1.5} />\n          </ActionIcon>\n        </Menu.Target>\n        <Menu.Dropdown>\n          <Menu.Item rightSection={<IconChevronRight size={16} stroke={1.5} />}>\n            <Group>\n              <Avatar\n                radius=\"xl\"\n                src=\"https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png\"\n              />\n\n              <div>\n                <Text fw={500}>Nancy Eggshacker</Text>\n                <Text size=\"xs\" c=\"dimmed\">\n                  neggshaker@mantine.dev\n                </Text>\n              </div>\n            </Group>\n          </Menu.Item>\n\n          <Menu.Divider />\n\n          <Menu.Item leftSection={<IconHeart size={16} stroke={1.5} color={theme.colors.red[6]} />}>\n            Liked posts\n          </Menu.Item>\n          <Menu.Item\n            leftSection={<IconStar size={16} stroke={1.5} color={theme.colors.yellow[6]} />}\n          >\n            Saved posts\n          </Menu.Item>\n          <Menu.Item\n            leftSection={<IconMessage size={16} stroke={1.5} color={theme.colors.blue[6]} />}\n          >\n            Your comments\n          </Menu.Item>\n\n          <Menu.Label>Settings</Menu.Label>\n          <Menu.Item leftSection={<IconSettings size={16} stroke={1.5} />}>\n            Account settings\n          </Menu.Item>\n          <Menu.Item leftSection={<IconSwitchHorizontal size={16} stroke={1.5} />}>\n            Change account\n          </Menu.Item>\n          <Menu.Item leftSection={<IconLogout size={16} stroke={1.5} />}>Logout</Menu.Item>\n\n          <Menu.Divider />\n\n          <Menu.Label>Danger zone</Menu.Label>\n          <Menu.Item leftSection={<IconPlayerPause size={16} stroke={1.5} />}>\n            Pause subscription\n          </Menu.Item>\n          <Menu.Item color=\"red\" leftSection={<IconTrash size={16} stroke={1.5} />}>\n            Delete account\n          </Menu.Item>\n        </Menu.Dropdown>\n      </Menu>\n    </Group>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a configuration object for a table component in an application. It specifies the title, category, and layout of the table.\n\n**Title:**\n\n* **\"Table with roles select\"**\n\n**Category:**\n\n* **\"users\"**\n\n**Canvas:**\n\n* **\"center\": true** - Indicates that the table should be centered within its container.\n* **\"maxWidth\": 800** - Sets the maximum width of the table to 800 pixels.\n\n**Summary:**\n\nThe file configures a table with the title \"Table with roles select\" within the \"users\" category. It specifies that the table should be centered and have a maximum width of 800 pixels.\n\n**Additional Notes:**\n\n* The canvas configuration determines the positioning and styling of the table.\n* The title is displayed as a header of the table.\n* The category is used for organizational purposes and may be used to filter or categorize the table data.\n\n**Purpose:**\n\nThe purpose of this file is to define the layout and configuration of a table component that is used to display and manage user roles.\n\n**Usage:**\n\nThis configuration object can be used in an application to render a table with the specified title, category, and layout. The table can be used to display and manage user roles, such as assigning or removing roles to users.",
    "input": "",
    "output": "{\n  \"title\": \"Table with roles select\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** UsersRolesTable.jsx\n\n**Purpose:**\n\nThe `UsersRolesTable.jsx` file is a React component that displays a table of users and their roles. It uses the `StoryWrapper` component to provide a story for testing and documentation purposes.\n\n**Key Features:**\n\n- **Import Components:**\n    - `StoryWrapper`: A component that wraps a story and provides additional functionality, such as styling and data.\n    - `attributes.json`: A JSON file containing attributes that will be passed to the `UsersRolesTable` component.\n    - `UsersRolesTable`: The component that displays the table of users and roles.\n\n- **Story Definition:**\n    - The file exports a `title` property with the value `UsersRolesTable`. This title will be used to identify the story in documentation or testing reports.\n\n- **Story Usage:**\n    - The `Usage` function renders a `StoryWrapper` component with the following properties:\n        - `attributes`: The attributes defined in `attributes.json`.\n        - `component`: The `UsersRolesTable` component.\n\n**Functionality:**\n\n- When the `UsersRolesTable` component receives the `attributes` prop, it renders a table with the following columns:\n    - User Name\n    - Role\n- The table data is populated based on the `attributes` prop, which contains an array of user objects with `name` and `role` properties.\n\n**Purpose of the Story Wrapper:**\n\nThe `StoryWrapper` component provides the following functionalities:\n\n- Wraps the `UsersRolesTable` component with additional styling and functionality.\n- Allows for easier testing and documentation by providing a context for the component.\n- Provides a convenient way to preview the component with different attributes.\n\n**Usage:**\n\nThe `UsersRolesTable.jsx` file can be used to display a table of users and roles in a React application. It can be easily integrated with other components and functionalities.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UsersRolesTable } from './UsersRolesTable';\n\nexport default { title: 'UsersRolesTable' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UsersRolesTable} />;\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe provided code snippet is a React functional component called `UsersRolesTable`. It renders a table that displays user information, including their name, email, role, last active date, and status.\n\n**Key Features:**\n\n- **Data Source:** The component uses an array of user objects called `data`. Each object represents a single user with their respective attributes.\n- **Table Structure:** The table has four columns: Employee, Role, Last active, and Status.\n- **Employee Column:** Displays the user's avatar, name, and email.\n- **Role Column:** Allows users to select their role from a dropdown list.\n- **Last Active Column:** Shows the last date the user was active.\n- **Status Column:** Indicates whether the user is active or disabled based on the `active` attribute.\n- **Filtering:** The component does not explicitly implement any filtering functionality.\n- **Styling:** The table uses the Mantine CSS framework for styling.\n\n**How the Component Works:**\n\n1. **Data Mapping:** The `rows` variable maps each user object in `data` to a table row.\n2. **Table Rendering:** The `Table` component renders the table header and body with the corresponding data.\n3. **Avatar and Text:** The `Avatar` and `Text` components are used to display the user's avatar and name.\n4. **Select Component:** The `Select` component allows users to select their role from the `rolesData` array.\n5. **Badge Component:** The `Badge` component is used to indicate the user's status based on the `active` attribute.\n\n**Purpose:**\n\nThe `UsersRolesTable` component is likely intended to be used in an application where users need to be managed and their roles need to be tracked. It provides a convenient way to display and manage user information in a tabular format.\n\n**Additional Notes:**\n\n- The code uses Mantine components for styling and layout.\n- The `minWidth` prop is set on the `Table.ScrollContainer` to ensure the table displays properly on smaller screens.\n- The `key` prop is used to uniquely identify each table row.",
    "input": "",
    "output": "import { Avatar, Badge, Group, Select, Table, Text } from '@mantine/core';\n\nconst data = [\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-9.png',\n    name: 'Robert Wolfkisser',\n    job: 'Engineer',\n    email: 'rob_wolf@gmail.com',\n    role: 'Collaborator',\n    lastActive: '2 days ago',\n    active: true,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-6.png',\n    name: 'Jill Jailbreaker',\n    job: 'Engineer',\n    email: 'jj@breaker.com',\n    role: 'Collaborator',\n    lastActive: '6 days ago',\n    active: true,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-10.png',\n    name: 'Henry Silkeater',\n    job: 'Designer',\n    email: 'henry@silkeater.io',\n    role: 'Contractor',\n    lastActive: '2 days ago',\n    active: false,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n    name: 'Bill Horsefighter',\n    job: 'Designer',\n    email: 'bhorsefighter@gmail.com',\n    role: 'Contractor',\n    lastActive: '5 days ago',\n    active: true,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png',\n    name: 'Jeremy Footviewer',\n    job: 'Manager',\n    email: 'jeremy@foot.dev',\n    role: 'Manager',\n    lastActive: '3 days ago',\n    active: false,\n  },\n];\n\nconst rolesData = ['Manager', 'Collaborator', 'Contractor'];\n\nexport function UsersRolesTable() {\n  const rows = data.map((item) => (\n    <Table.Tr key={item.name}>\n      <Table.Td>\n        <Group gap=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text fz=\"sm\" fw={500}>\n              {item.name}\n            </Text>\n            <Text fz=\"xs\" c=\"dimmed\">\n              {item.email}\n            </Text>\n          </div>\n        </Group>\n      </Table.Td>\n\n      <Table.Td>\n        <Select\n          data={rolesData}\n          defaultValue={item.role}\n          variant=\"unstyled\"\n          allowDeselect={false}\n        />\n      </Table.Td>\n      <Table.Td>{item.lastActive}</Table.Td>\n      <Table.Td>\n        {item.active ? (\n          <Badge fullWidth variant=\"light\">\n            Active\n          </Badge>\n        ) : (\n          <Badge color=\"gray\" fullWidth variant=\"light\">\n            Disabled\n          </Badge>\n        )}\n      </Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <Table.ScrollContainer minWidth={800}>\n      <Table verticalSpacing=\"sm\">\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>Employee</Table.Th>\n            <Table.Th>Role</Table.Th>\n            <Table.Th>Last active</Table.Th>\n            <Table.Th>Status</Table.Th>\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </Table.ScrollContainer>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe JSON file you provided defines a stack called \"Users stack\" within the category \"users\". It contains configuration settings for a stack, including its title, category, and canvas properties.\n\n**Title:**\n\n* `title`: \"Users stack\"\n\n**Category:**\n\n* `category`: \"users\"\n\n**Canvas Properties:**\n\n* `canvas`:\n    * `center`: true - Indicates that the stack should be centered within the available space.\n    * `maxWidth`: 800 - Specifies the maximum width of the stack canvas.\n\n**Purpose:**\n\nThis file likely represents a configuration for a stack within a user management system or application. Stacks are typically used to organize and display related information or data in a hierarchical manner.\n\n**Usage:**\n\nThe configuration data in this file can be used to:\n\n* Create a new stack with the specified title and category.\n* Set the canvas properties for the stack, including the maximum width and centering option.\n* Display the stack in a user interface or application.\n\n**Additional Notes:**\n\n* The `start_of_turn` tags are not part of the JSON data and are likely used to mark the start of a new conversational turn or prompt.\n* The specific meaning and context of this file may vary depending on the application or system where it is used.",
    "input": "",
    "output": "{\n  \"title\": \"Users stack\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** UsersStack.jsx\n\n**Purpose:**\n\nThe `UsersStack.jsx` file is a React component that represents a stack of users. It is used to display a list of users and their attributes.\n\n**File Structure:**\n\n* **Imports:**\n    * `StoryWrapper`: A React component that provides a common layout for stories.\n    * `attributes.json`: A JSON file that contains the user attributes.\n    * `UsersStack`: The React component that represents the stack of users.\n* **Default Export:**\n    * An object with a `title` property set to `UsersStack`. This title is used for documentation purposes.\n* **Usage Function:**\n    * A function that returns a `<StoryWrapper>` component.\n    * The `attributes` prop of the `<StoryWrapper>` component is set to the `attributes` JSON object.\n    * The `component` prop of the `<StoryWrapper>` component is set to the `UsersStack` component.\n\n**Usage:**\n\nThe `UsersStack` component can be used to display a list of users and their attributes. The `attributes.json` file specifies the attributes to be displayed.\n\n**Example Usage:**\n\n```\n<StoryWrapper attributes={attributes} component={UsersStack} />\n```\n\n**Output:**\n\nThe `UsersStack` component will display a list of users with their corresponding attributes.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component provides a common layout for stories, such as a header and footer.\n* The `UsersStack` component can be customized to display different user attributes or to implement different functionality.\n* The `attributes.json` file can be modified to add or remove user attributes.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UsersStack } from './UsersStack';\n\nexport default { title: 'UsersStack' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UsersStack} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe file `UsersStack.jsx` is a React component that displays a table of user data, including their avatar, name, job title, email, and hourly rate. It provides options for sending messages, adding notes, viewing analytics, or terminating contracts.\n\n**Components:**\n\n- **@tabler/icons-react:** Provides icons for different actions.\n- **@mantine/core:** Provides components for building the user interface, such as ActionIcon, Avatar, Group, Menu, Table, and Text.\n\n**Data:**\n\nThe component uses an array of user objects containing their avatar, name, job title, email, and hourly rate.\n\n**Table Structure:**\n\n- Each user is represented as a table row with columns for avatar, email, rate, and actions.\n- The actions column includes options to send a message, add a note, view analytics, or terminate the contract.\n\n**Features:**\n\n- **Avatar:** Displays a user's avatar.\n- **Name and Job Title:** Displays the user's name and job title.\n- **Email:** Displays the user's email address.\n- **Rate:** Displays the user's hourly rate.\n- **Action Menu:** Provides options for sending a message, adding a note, viewing analytics, or terminating the contract.\n\n**Implementation:**\n\n- The `UsersStack` function iterates over the user data and renders a table row for each user.\n- The `Group` component groups the avatar and user information.\n- The `Menu` component provides the action menu with options for different actions.\n- The `Table.ScrollContainer` component ensures that the table can be scrolled horizontally if necessary.\n\n**Usage:**\n\nThis component can be used to display a list of users and provide options for interacting with them.\n\n**Conclusion:**\n\nThe `UsersStack.jsx` file is a React component that simplifies the task of displaying user data in a table format with interactive options. It provides a user-friendly interface for managing user information.",
    "input": "",
    "output": "import {\n  IconDots,\n  IconMessages,\n  IconNote,\n  IconPencil,\n  IconReportAnalytics,\n  IconTrash,\n} from '@tabler/icons-react';\nimport { ActionIcon, Avatar, Group, Menu, Table, Text } from '@mantine/core';\n\nconst data = [\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png',\n    name: 'Robert Wolfkisser',\n    job: 'Engineer',\n    email: 'rob_wolf@gmail.com',\n    rate: 22,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-5.png',\n    name: 'Jill Jailbreaker',\n    job: 'Engineer',\n    email: 'jj@breaker.com',\n    rate: 45,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png',\n    name: 'Henry Silkeater',\n    job: 'Designer',\n    email: 'henry@silkeater.io',\n    rate: 76,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png',\n    name: 'Bill Horsefighter',\n    job: 'Designer',\n    email: 'bhorsefighter@gmail.com',\n    rate: 15,\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n    name: 'Jeremy Footviewer',\n    job: 'Manager',\n    email: 'jeremy@foot.dev',\n    rate: 98,\n  },\n];\n\nexport function UsersStack() {\n  const rows = data.map((item) => (\n    <Table.Tr key={item.name}>\n      <Table.Td>\n        <Group gap=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text fz=\"sm\" fw={500}>\n              {item.name}\n            </Text>\n            <Text c=\"dimmed\" fz=\"xs\">\n              {item.job}\n            </Text>\n          </div>\n        </Group>\n      </Table.Td>\n      <Table.Td>\n        <Text fz=\"sm\">{item.email}</Text>\n        <Text fz=\"xs\" c=\"dimmed\">\n          Email\n        </Text>\n      </Table.Td>\n      <Table.Td>\n        <Text fz=\"sm\">${item.rate.toFixed(1)} / hr</Text>\n        <Text fz=\"xs\" c=\"dimmed\">\n          Rate\n        </Text>\n      </Table.Td>\n      <Table.Td>\n        <Group gap={0} justify=\"flex-end\">\n          <ActionIcon variant=\"subtle\" color=\"gray\">\n            <IconPencil size={16} stroke={1.5} />\n          </ActionIcon>\n          <Menu\n            transitionProps={{ transition: 'pop' }}\n            withArrow\n            position=\"bottom-end\"\n            withinPortal\n          >\n            <Menu.Target>\n              <ActionIcon variant=\"subtle\" color=\"gray\">\n                <IconDots size={16} stroke={1.5} />\n              </ActionIcon>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Item leftSection={<IconMessages size={16} stroke={1.5} />}>\n                Send message\n              </Menu.Item>\n              <Menu.Item leftSection={<IconNote size={16} stroke={1.5} />}>Add note</Menu.Item>\n              <Menu.Item leftSection={<IconReportAnalytics size={16} stroke={1.5} />}>\n                Analytics\n              </Menu.Item>\n              <Menu.Item leftSection={<IconTrash size={16} stroke={1.5} />} color=\"red\">\n                Terminate contract\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n        </Group>\n      </Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <Table.ScrollContainer minWidth={800}>\n      <Table verticalSpacing=\"md\">\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </Table.ScrollContainer>\n  );\n}\n"
  },
  {
    "instruction": "**File Description:**\n\nThe file is a JSON configuration file that defines a table named \"users\".\n\n**Content:**\n\n```json\n{\n  \"title\": \"Table with users\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n```\n\n**Properties:**\n\n* **title:** The title of the table, which is \"Table with users\".\n* **category:** The category of the table, which is \"users\".\n* **canvas:** An object that defines the layout of the table.\n\n**canvas Properties:**\n\n* **center:** A boolean value that specifies whether the table should be centered horizontally. The value is set to \"true\".\n* **maxWidth:** The maximum width of the table in pixels. The value is set to 800 pixels.\n\n**Purpose:**\n\nThe purpose of this file is to define a table in a specific category with a given title. The table layout is set to be centered horizontally and have a maximum width of 800 pixels.\n\n**Usage:**\n\nThis configuration file can be used to create a table in a database or other data store. The table title, category, and layout can be used to identify and manage the table.\n\n**Additional Notes:**\n\n* The file extension is \".json\", which indicates that it is a JSON file.\n* JSON is a data interchange format that uses key-value pairs to represent data.\n* The specific syntax and semantics of JSON are defined in the JSON specification.",
    "input": "",
    "output": "{\n  \"title\": \"Table with users\",\n  \"category\": \"users\",\n  \"canvas\": {\n    \"center\": true,\n    \"maxWidth\": 800\n  }\n}\n"
  },
  {
    "instruction": "**File Name:** UsersTable.jsx\n\n**Purpose:**\n\nThe `UsersTable.jsx` file is a React component that renders a table displaying users. It uses the `StoryWrapper` component from another module to create a complete story.\n\n**Components:**\n\n* **StoryWrapper:** A component that provides a template for creating stories with different attributes.\n* **UsersTable:** The main component that displays the user table.\n* **attributes.json:** A JSON file containing attributes that will be passed to the `StoryWrapper`.\n\n**Code Breakdown:**\n\n**Imports:**\n\n* `StoryWrapper` is imported from the `StoryWrapper` component.\n* `attributes.json` is imported as a JSON object.\n* `UsersTable` is imported as a component.\n\n**Default Export:**\n\n* The file exports an object with a `title` property set to \"UsersTable\". This title is used for documentation purposes.\n\n**Usage Function:**\n\n* The `Usage()` function creates an instance of `StoryWrapper`.\n* It passes the `attributes` object and the `UsersTable` component as props to the `StoryWrapper`.\n* The `StoryWrapper` renders the `UsersTable` with the specified attributes.\n\n**Workflow:**\n\n1. The `UsersTable.jsx` file is imported and rendered.\n2. The `attributes.json` file provides the necessary data for the table.\n3. The `StoryWrapper` component wraps the `UsersTable` and passes the attributes to it.\n4. The `UsersTable` component renders the user table with the provided attributes.\n\n**Additional Notes:**\n\n* The `StoryWrapper` component is likely responsible for rendering the table with different styles and formatting based on the attributes.\n* The `attributes.json` file should contain an array of objects that represent user data, such as name, email, and role.\n* The specific implementation of the `StoryWrapper` and `UsersTable` components is not included in this code snippet.",
    "input": "",
    "output": "import { StoryWrapper } from '../../components/StoryWrapper/StoryWrapper';\nimport attributes from './attributes.json';\nimport { UsersTable } from './UsersTable';\n\nexport default { title: 'UsersTable' };\n\nexport function Usage() {\n  return <StoryWrapper attributes={attributes} component={UsersTable} />;\n}\n"
  },
  {
    "instruction": "**Purpose:**\n\nThe provided code creates a React component called `UsersTable` that displays a table of user information, including name, job title, email, phone number, and action buttons.\n\n**Functionality:**\n\n* **Data:** The component uses a `data` array to store an array of user objects. Each object contains properties such as name, avatar, job, email, and phone number.\n* **Job Colors:** A `jobColors` object maps job titles to their corresponding colors.\n* **Table Structure:**\n    * The table consists of five columns:\n        * Employee\n        * Job title\n        * Email\n        * Phone\n        * Actions\n    * Each row represents a user object from the `data` array.\n* **Table Row:**\n    * Displays user information in the respective columns.\n    * The avatar is rendered using an `Avatar` component.\n    * The job title is displayed with a badge of the corresponding color.\n    * The email is displayed as an anchor link.\n    * The phone number is displayed as a text element.\n    * Two action icons are provided for editing and deleting user records.\n* **Scroll Container:** The table is wrapped in a `Table.ScrollContainer` to enable horizontal scrolling if the table exceeds the viewport width.\n\n**Usage:**\n\nThe `UsersTable` component can be rendered to display the user information in a tabular format.\n\n**Additional Notes:**\n\n* The code uses the `@tabler/icons-react` and `@mantine/core` libraries for table rendering, icons, and other UI elements.\n* The `start_of_turn` tag is a custom marker that is not part of the code itself. It is likely a comment or a section divider.",
    "input": "",
    "output": "import { IconPencil, IconTrash } from '@tabler/icons-react';\nimport { ActionIcon, Anchor, Avatar, Badge, Group, Table, Text } from '@mantine/core';\n\nconst data = [\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png',\n    name: 'Robert Wolfkisser',\n    job: 'Engineer',\n    email: 'rob_wolf@gmail.com',\n    phone: '+44 (452) 886 09 12',\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-7.png',\n    name: 'Jill Jailbreaker',\n    job: 'Engineer',\n    email: 'jj@breaker.com',\n    phone: '+44 (934) 777 12 76',\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png',\n    name: 'Henry Silkeater',\n    job: 'Designer',\n    email: 'henry@silkeater.io',\n    phone: '+44 (901) 384 88 34',\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png',\n    name: 'Bill Horsefighter',\n    job: 'Designer',\n    email: 'bhorsefighter@gmail.com',\n    phone: '+44 (667) 341 45 22',\n  },\n  {\n    avatar:\n      'https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-10.png',\n    name: 'Jeremy Footviewer',\n    job: 'Manager',\n    email: 'jeremy@foot.dev',\n    phone: '+44 (881) 245 65 65',\n  },\n];\n\nconst jobColors: Record<string, string> = {\n  engineer: 'blue',\n  manager: 'cyan',\n  designer: 'pink',\n};\n\nexport function UsersTable() {\n  const rows = data.map((item) => (\n    <Table.Tr key={item.name}>\n      <Table.Td>\n        <Group gap=\"sm\">\n          <Avatar size={30} src={item.avatar} radius={30} />\n          <Text fz=\"sm\" fw={500}>\n            {item.name}\n          </Text>\n        </Group>\n      </Table.Td>\n\n      <Table.Td>\n        <Badge color={jobColors[item.job.toLowerCase()]} variant=\"light\">\n          {item.job}\n        </Badge>\n      </Table.Td>\n      <Table.Td>\n        <Anchor component=\"button\" size=\"sm\">\n          {item.email}\n        </Anchor>\n      </Table.Td>\n      <Table.Td>\n        <Text fz=\"sm\">{item.phone}</Text>\n      </Table.Td>\n      <Table.Td>\n        <Group gap={0} justify=\"flex-end\">\n          <ActionIcon variant=\"subtle\" color=\"gray\">\n            <IconPencil size={16} stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon variant=\"subtle\" color=\"red\">\n            <IconTrash size={16} stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Table.Td>\n    </Table.Tr>\n  ));\n\n  return (\n    <Table.ScrollContainer minWidth={800}>\n      <Table verticalSpacing=\"sm\">\n        <Table.Thead>\n          <Table.Tr>\n            <Table.Th>Employee</Table.Th>\n            <Table.Th>Job title</Table.Th>\n            <Table.Th>Email</Table.Th>\n            <Table.Th>Phone</Table.Th>\n            <Table.Th />\n          </Table.Tr>\n        </Table.Thead>\n        <Table.Tbody>{rows}</Table.Tbody>\n      </Table>\n    </Table.ScrollContainer>\n  );\n}\n"
  }
]